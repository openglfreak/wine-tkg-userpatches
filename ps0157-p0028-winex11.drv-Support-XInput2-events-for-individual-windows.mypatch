From 614c09e719e1f8339d9de0d31417755f20b530fd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 23 Jan 2020 11:00:19 +0100
Subject: [PATCH 28/37] winex11.drv: Support XInput2 events for individual
 windows.

This will allow us to listen to the XInput version of several events,
which can bring additional information.
---
 dlls/winex11.drv/desktop.c |  1 +
 dlls/winex11.drv/event.c   |  7 +++++
 dlls/winex11.drv/mouse.c   | 59 +++++++++++++++++++++++++++-----------
 dlls/winex11.drv/window.c  |  3 ++
 dlls/winex11.drv/x11drv.h  | 12 +++++++-
 5 files changed, 65 insertions(+), 17 deletions(-)

diff --git a/dlls/winex11.drv/desktop.c b/dlls/winex11.drv/desktop.c
index b517e44e150..6f46ef505c9 100644
--- a/dlls/winex11.drv/desktop.c
+++ b/dlls/winex11.drv/desktop.c
@@ -356,6 +356,7 @@ BOOL CDECL X11DRV_create_desktop( UINT width, UINT height )
                          0, 0, width, height, 0, default_visual.depth, InputOutput, default_visual.visual,
                          CWEventMask | CWCursor | CWColormap, &win_attr );
     if (!win) return FALSE;
+    X11DRV_XInput2_Enable( display, win, win_attr.event_mask );
     if (!create_desktop_win_data( win )) return FALSE;
 
     X11DRV_init_desktop( win, width, height );
diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 8f3a3e60ace..41c918b3f4d 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -245,6 +245,13 @@ static Bool filter_event( Display *display, XEvent *event, char *arg )
         return (mask & QS_MOUSEBUTTON) != 0;
 #ifdef GenericEvent
     case GenericEvent:
+#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
+        if (event->xcookie.extension == xinput2_opcode &&
+            (event->xcookie.evtype == XI_RawMotion ||
+             event->xcookie.evtype == XI_DeviceChanged))
+            return (mask & QS_MOUSEMOVE) != 0;
+#endif
+        return (mask & QS_SENDMESSAGE) != 0;
 #endif
     case MotionNotify:
     case EnterNotify:
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index aeccda79b83..edf2b94bf9b 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -313,19 +313,31 @@ void x11drv_xinput_init(void)
 /***********************************************************************
  *              X11DRV_XInput2_Enable
  */
-void X11DRV_XInput2_Enable(void)
+void X11DRV_XInput2_Enable( Display *display, Window window, long event_mask )
 {
 #ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
     struct x11drv_thread_data *data = x11drv_thread_data();
     XIEventMask mask;
     XIDeviceInfo *pointer_info;
     unsigned char mask_bits[XIMaskLen(XI_LASTEVENT)];
+    enum xi2_state xi2_state = data ? data->xi2_state : xi_unknown;
     int count;
 
-    TRACE( "state:%d\n", data->xi2_state );
-    if (data->xi2_state != xi_disabled) return;
+    TRACE( "state:%d window:%lx event_mask:%lx\n", xi2_state, window, event_mask );
 
-    if (!pXIGetClientPointer( data->display, None, &data->xi2_core_pointer )) return;
+    if (xi2_state == xi_unavailable) return;
+
+    if (window != DefaultRootWindow( display ))
+    {
+        mask.mask     = mask_bits;
+        mask.mask_len = sizeof(mask_bits);
+        mask.deviceid = XIAllMasterDevices;
+        memset( mask_bits, 0, sizeof(mask_bits) );
+
+        pXISelectEvents( display, window, &mask, 1 );
+        XSelectInput( display, window, event_mask );
+        return;
+    }
 
     mask.mask     = mask_bits;
     mask.mask_len = sizeof(mask_bits);
@@ -337,8 +349,9 @@ static void X11DRV_XInput2_Enable(void)
     XISetMask( mask_bits, XI_RawMotion );
     XISetMask( mask_bits, XI_ButtonPress );
 
-    pXISelectEvents( data->display, DefaultRootWindow( data->display ), &mask, 1 );
+    pXISelectEvents( display, DefaultRootWindow( display ), &mask, 1 );
 
+    if (!data || !pXIGetClientPointer( data->display, None, &data->xi2_core_pointer )) return;
     pointer_info = pXIQueryDevice( data->display, data->xi2_core_pointer, &count );
     update_relative_valuators( pointer_info->classes, pointer_info->num_classes );
     pXIFreeDeviceInfo( pointer_info );
@@ -358,25 +371,39 @@ static void X11DRV_XInput2_Enable(void)
 /***********************************************************************
  *              X11DRV_XInput2_Disable
  */
-void X11DRV_XInput2_Disable(void)
+void X11DRV_XInput2_Disable( Display *display, Window window, long event_mask )
 {
 #ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
     struct x11drv_thread_data *data = x11drv_thread_data();
+    enum xi2_state xi2_state = data ? data->xi2_state : xi_unknown;
     XIEventMask mask;
 
-    TRACE( "state:%d\n", data->xi2_state );
-    if (data->xi2_state != xi_enabled) return;
+    TRACE( "state:%d window:%lx event_mask:%lx\n", xi2_state, window, event_mask );
 
-    data->xi2_state = xi_disabled;
+    if (xi2_state == xi_unavailable) return;
+
+    if (window != DefaultRootWindow( display ))
+    {
+        mask.mask     = NULL;
+        mask.mask_len = 0;
+        mask.deviceid = XIAllMasterDevices;
+
+        pXISelectEvents( display, window, &mask, 1 );
+        XSelectInput( display, window, event_mask );
+        return;
+    }
 
     mask.mask = NULL;
     mask.mask_len = 0;
     mask.deviceid = XIAllMasterDevices;
 
-    pXISelectEvents( data->display, DefaultRootWindow( data->display ), &mask, 1 );
+    pXISelectEvents( display, DefaultRootWindow( display ), &mask, 1 );
+
+    if (!data) return;
     data->x_pos_valuator.number = -1;
     data->y_pos_valuator.number = -1;
     data->xi2_core_pointer = 0;
+    data->xi2_state = xi_disabled;
 #endif
 }
 
@@ -423,7 +450,7 @@ static BOOL grab_clipping_window( const RECT *clip )
     }
 
     /* enable XInput2 unless we are already clipping */
-    if (!data->clip_hwnd) X11DRV_XInput2_Enable();
+    if (!data->clip_hwnd) X11DRV_XInput2_Enable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
 
     if (data->xi2_state != xi_enabled)
     {
@@ -453,7 +480,7 @@ static BOOL grab_clipping_window( const RECT *clip )
 
     if (!clipping_cursor)
     {
-        X11DRV_XInput2_Disable();
+        X11DRV_XInput2_Disable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
         DestroyWindow( msg_hwnd );
         return FALSE;
     }
@@ -532,7 +559,7 @@ LRESULT clip_cursor_notify( HWND hwnd, HWND prev_clip_hwnd, HWND new_clip_hwnd )
         TRACE( "clip hwnd reset from %p\n", hwnd );
         data->clip_hwnd = 0;
         data->clip_reset = GetTickCount();
-        X11DRV_XInput2_Disable();
+        X11DRV_XInput2_Disable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
         DestroyWindow( hwnd );
     }
     else if (prev_clip_hwnd)
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index f46cbfb088a..93bf3e9c97e 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -375,6 +375,7 @@ static void sync_window_style( struct x11drv_win_data *data )
         int mask = get_window_attributes( data, &attr );
 
         XChangeWindowAttributes( data->display, data->whole_window, mask, &attr );
+        X11DRV_XInput2_Enable( data->display, data->whole_window, attr.event_mask );
     }
 }
 
@@ -1573,6 +1574,7 @@ static void create_whole_window( struct x11drv_win_data *data )
                                         data->vis.visual, mask, &attr );
     if (!data->whole_window) goto done;
 
+    X11DRV_XInput2_Enable( data->display, data->whole_window, attr.event_mask );
     set_initial_wm_hints( data->display, data->whole_window );
     set_wm_hints( data );
 
@@ -1879,6 +1881,7 @@ BOOL CDECL X11DRV_CreateWindow( HWND hwnd )
         data->clip_window = XCreateWindow( data->display, root_window, 0, 0, 1, 1, 0, 0,
                                            InputOnly, default_visual.visual,
                                            CWOverrideRedirect | CWEventMask, &attr );
+        X11DRV_XInput2_Enable( data->display, data->clip_window, attr.event_mask );
         XFlush( data->display );
         SetPropA( hwnd, clip_window_prop, (HANDLE)data->clip_window );
         X11DRV_InitClipboard();
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 8d556a32a73..9cbedf59ec9 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -197,8 +197,8 @@ extern BOOL CDECL X11DRV_UnrealizePalette( HPALETTE hpal ) DECLSPEC_HIDDEN;
 extern void X11DRV_Xcursor_Init(void) DECLSPEC_HIDDEN;
 extern void X11DRV_XInput2_Load(void) DECLSPEC_HIDDEN;
 extern void X11DRV_XInput2_Init(void) DECLSPEC_HIDDEN;
-extern void X11DRV_XInput2_Enable(void) DECLSPEC_HIDDEN;
-extern void X11DRV_XInput2_Disable(void) DECLSPEC_HIDDEN;
+extern void X11DRV_XInput2_Enable( Display *display, Window window, long event_mask ) DECLSPEC_HIDDEN;
+extern void X11DRV_XInput2_Disable( Display *display, Window window, long event_mask ) DECLSPEC_HIDDEN;
 
 BOOL x11drv_handle_focus_in_event( HWND hwnd, XEvent *xev, Time time );
 BOOL x11drv_handle_focus_out_event( HWND hwnd, XEvent *xev, Time time );
@@ -327,6 +329,14 @@ struct x11drv_valuator_data
     int number;
 };
 
+enum xi2_state
+{
+    xi_unavailable = -1,
+    xi_unknown,
+    xi_disabled,
+    xi_enabled
+};
+
 struct x11drv_thread_data
 {
     Display *display;
@@ -342,7 +352,7 @@ struct x11drv_thread_data
     DWORD    clip_reset;           /* time when clipping was last reset */
     HKL      kbd_layout;           /* active keyboard layout */
 #ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
-    enum { xi_unavailable = -1, xi_unknown, xi_disabled, xi_enabled } xi2_state; /* XInput2 state */
+    enum xi2_state xi2_state;      /* XInput2 state */
     XIValuatorClassInfo x_pos_valuator;
     XIValuatorClassInfo y_pos_valuator;
     int      xi2_core_pointer;     /* XInput2 core pointer id */
diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index 8d556a32a73..9cbedf59ec9 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -640,7 +640,7 @@ void CDECL X11DRV_ThreadDetach(void)
     if (data)
     {
         if (GetWindowThreadProcessId( GetDesktopWindow(), NULL ) == GetCurrentThreadId())
-            X11DRV_XInput2_Disable();
+            X11DRV_XInput2_Disable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
         if (data->xim) XCloseIM( data->xim );
         if (data->font_set) XFreeFontSet( data->display, data->font_set );
         XCloseDisplay( data->display );
@@ -744,7 +744,7 @@ struct x11drv_thread_data *x11drv_init_thread_data(void)
 
     if (use_xim) X11DRV_SetupXIM();
     if (GetWindowThreadProcessId( GetDesktopWindow(), NULL ) == GetCurrentThreadId())
-        X11DRV_XInput2_Enable();
+        X11DRV_XInput2_Enable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
 
     X11DRV_XInput2_Init();
 
