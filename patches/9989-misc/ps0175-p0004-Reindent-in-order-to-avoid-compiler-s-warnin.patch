From: Eric Pouech <eric.pouech@gmail.com>
Subject: [PATCH 4/4] Reindent in order to avoid compiler's warning (GCC11)
Message-Id: <163317639735.285529.12863358068792563643.stgit@euterpe>
Date: Sat,  2 Oct 2021 14:06:37 +0200
In-Reply-To: <163317637739.285529.489808632054114548.stgit@euterpe>
References: <163317637739.285529.489808632054114548.stgit@euterpe>

(-Wmisleading indentation)

This is the first patch of a long serie (more than 100 files to patch)

as a remainder, gcc 11.2 with -Wall (implying -Wmisleading indentation)
complains when we have:
      bla1;

todo_wine
      ok(..., "...");
      bla2;

It complains on bla2; not beying indented as the todo_wine.
To make gcc happy, indent the todo_wine as the rest.

      bla1;

      todo_wine
      ok(..., "...");
      bla2;

If this patch is accepted, I volunteer to keep pushing the remaining
changes. With the following rules:
- one patch per file
- max ten patches per day
- if one patch conflicts with another patch, other patch has priority
  as it should bring more value than pure space injection.


Signed-off-by: Eric Pouech <eric.pouech@gmail.com>

---
 dlls/adsldp/tests/ldap.c |   10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/dlls/adsldp/tests/ldap.c b/dlls/adsldp/tests/ldap.c
index fe9801a3972..161fc5d0bbc 100644
--- a/dlls/adsldp/tests/ldap.c
+++ b/dlls/adsldp/tests/ldap.c
@@ -190,7 +190,7 @@ static void test_ParseDisplayName(void)
 
         count = 0xdeadbeef;
         hr = MkParseDisplayName(bc, test[i].path, &count, &mk);
-todo_wine_if(i == 0 || i == 1 || i == 11 || i == 12)
+        todo_wine_if(i == 0 || i == 1 || i == 11 || i == 12)
         ok(hr == test[i].hr, "%d: got %#x, expected %#x\n", i, hr, test[i].hr);
         if (hr == S_OK)
         {
@@ -394,7 +394,7 @@ static void test_DirectorySearch(void)
     ok(hr == E_ADS_BAD_PARAMETER, "got %#x\n", hr);
 
     hr = IDirectorySearch_GetPreviousRow(ds, sh);
-todo_wine
+    todo_wine
     ok(hr == E_ADS_BAD_PARAMETER, "got %#x\n", hr);
 
     while (IDirectorySearch_GetNextRow(ds, sh) != S_ADS_NOMORE_ROWS)
@@ -430,9 +430,9 @@ todo_wine
 
     name = NULL;
     hr = IDirectorySearch_GetNextColumnName(ds, sh, &name);
-todo_wine
+    todo_wine
     ok(hr == S_OK || broken(hr == S_ADS_NOMORE_COLUMNS) /* XP */, "got %#x\n", hr);
-todo_wine
+    todo_wine
     ok((name && !wcscmp(name, L"ADsPath")) || broken(!name) /* XP */, "got %s\n", wine_dbgstr_w(name));
     FreeADsMem(name);
 
@@ -488,7 +488,7 @@ static void test_DirectoryObject(void)
     ok(hr == S_OK, "got %#x\n", hr);
 
     hr = IDirectoryObject_QueryInterface(dirobj, &IID_IADsOpenDSObject, (void **)&unk);
-todo_wine
+    todo_wine
     ok(hr == E_NOINTERFACE, "got %#x\n", hr);
     if (hr == S_OK) IUnknown_Release(unk);
     hr = IDirectoryObject_QueryInterface(dirobj, &IID_IDispatch, (void **)&unk);

