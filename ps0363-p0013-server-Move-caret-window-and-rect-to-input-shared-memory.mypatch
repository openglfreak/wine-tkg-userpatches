From 66d902c1eefa0669fa50bc87c2314266c2853c4e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 18:44:03 +0100
Subject: [PATCH 13/26] server: Move caret window and rect to input shared
 memory.

---
 include/wine/server_protocol.h |  4 ++-
 server/protocol.def            |  2 ++
 server/queue.c                 | 48 ++++++++++++++++++----------------
 3 files changed, 31 insertions(+), 23 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 0e3b63afdf3..9c63800121b 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -835,6 +835,8 @@ struct input_shared_memory
     user_handle_t        active;
     user_handle_t        menu_owner;
     user_handle_t        move_size;
+    user_handle_t        caret;
+    rectangle_t          caret_rect;
 };
 
 
@@ -6780,7 +6782,7 @@ union generic_reply
 
 /* ### protocol_version begin ### */
 
-#define SERVER_PROTOCOL_VERSION 703
+#define SERVER_PROTOCOL_VERSION 704
 
 /* ### protocol_version end ### */
 
diff --git a/server/protocol.def b/server/protocol.def
index 6e19902bdd6..e9be7472910 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -851,6 +851,8 @@ struct input_shared_memory
     user_handle_t        active;           /* handle to the active window */
     user_handle_t        menu_owner;       /* handle to the menu owner */
     user_handle_t        move_size;        /* handle to the moving/resizing window */
+    user_handle_t        caret;            /* handle to the caret window */
+    rectangle_t          caret_rect;       /* caret rectangle */
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 452d4487418..8be052ae93a 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -103,8 +103,6 @@ struct thread_input
 {
     struct object          obj;           /* object header */
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
-    user_handle_t          caret;         /* caret window */
-    rectangle_t            caret_rect;    /* caret rectangle */
     int                    caret_hide;    /* caret hide count */
     int                    caret_state;   /* caret on/off state */
     user_handle_t          cursor;        /* current cursor */
@@ -284,16 +282,18 @@ static void free_message( struct message *msg );
 /* set the caret window in a given thread input */
 static void set_caret_window( struct thread_input *input, user_handle_t win )
 {
-    if (!win || win != input->caret)
+    SHARED_WRITE_BEGIN( &input->shared->seq );
+    if (!win || win != input->shared->caret)
     {
-        input->caret_rect.left   = 0;
-        input->caret_rect.top    = 0;
-        input->caret_rect.right  = 0;
-        input->caret_rect.bottom = 0;
+        input->shared->caret_rect.left   = 0;
+        input->shared->caret_rect.top    = 0;
+        input->shared->caret_rect.right  = 0;
+        input->shared->caret_rect.bottom = 0;
     }
-    input->caret             = win;
+    input->shared->caret     = win;
     input->caret_hide        = 1;
     input->caret_state       = 0;
+    SHARED_WRITE_END( &input->shared->seq );
 }
 
 /* create a thread input object */
@@ -1203,7 +1203,7 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
     if (window == input->shared->active) input->shared->active = 0;
     if (window == input->shared->menu_owner) input->shared->menu_owner = 0;
     if (window == input->shared->move_size) input->shared->move_size = 0;
-    if (window == input->caret) set_caret_window( input, 0 );
+    if (window == input->shared->caret) set_caret_window( input, 0 );
     SHARED_WRITE_END( &input->shared->seq );
 }
 
@@ -3200,10 +3200,10 @@ DECL_HANDLER(get_thread_input)
         reply->active     = input->shared->active;
         reply->menu_owner = input->shared->menu_owner;
         reply->move_size  = input->shared->move_size;
-        reply->caret      = input->caret;
+        reply->caret      = input->shared->caret;
         reply->cursor     = input->cursor;
         reply->show_count = input->cursor_count;
-        reply->rect       = input->caret_rect;
+        reply->rect       = input->shared->caret_rect;
     }
 
     /* foreground window is active window of foreground thread */
@@ -3389,14 +3389,16 @@ DECL_HANDLER(set_caret_window)
     {
         struct thread_input *input = queue->input;
 
-        reply->previous  = input->caret;
-        reply->old_rect  = input->caret_rect;
+        reply->previous  = input->shared->caret;
+        reply->old_rect  = input->shared->caret_rect;
         reply->old_hide  = input->caret_hide;
         reply->old_state = input->caret_state;
 
+        SHARED_WRITE_BEGIN( &input->shared->seq );
         set_caret_window( input, get_user_full_handle(req->handle) );
-        input->caret_rect.right  = input->caret_rect.left + req->width;
-        input->caret_rect.bottom = input->caret_rect.top + req->height;
+        input->shared->caret_rect.right  = input->shared->caret_rect.left + req->width;
+        input->shared->caret_rect.bottom = input->shared->caret_rect.top + req->height;
+        SHARED_WRITE_END( &input->shared->seq );
     }
 }
 
@@ -3409,22 +3411,24 @@ DECL_HANDLER(set_caret_info)
 
     if (!queue) return;
     input = queue->input;
-    reply->full_handle = input->caret;
-    reply->old_rect    = input->caret_rect;
+    reply->full_handle = input->shared->caret;
+    reply->old_rect    = input->shared->caret_rect;
     reply->old_hide    = input->caret_hide;
     reply->old_state   = input->caret_state;
 
-    if (req->handle && get_user_full_handle(req->handle) != input->caret)
+    if (req->handle && get_user_full_handle(req->handle) != input->shared->caret)
     {
         set_error( STATUS_ACCESS_DENIED );
         return;
     }
     if (req->flags & SET_CARET_POS)
     {
-        input->caret_rect.right  += req->x - input->caret_rect.left;
-        input->caret_rect.bottom += req->y - input->caret_rect.top;
-        input->caret_rect.left = req->x;
-        input->caret_rect.top  = req->y;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
+        input->shared->caret_rect.right  += req->x - input->shared->caret_rect.left;
+        input->shared->caret_rect.bottom += req->y - input->shared->caret_rect.top;
+        input->shared->caret_rect.left = req->x;
+        input->shared->caret_rect.top  = req->y;
+        SHARED_WRITE_END( &input->shared->seq );
     }
     if (req->flags & SET_CARET_HIDE)
     {

