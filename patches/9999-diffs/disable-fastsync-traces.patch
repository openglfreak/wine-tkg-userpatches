diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 128da733682..d3e2096119f 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -308,14 +308,6 @@ static BOOL compare_addr( const void *addr, const void *cmp, SIZE_T size )
 }
 
 
-static const char *debugstr_timeout( const LARGE_INTEGER *timeout )
-{
-    if (!timeout) return "<infinite>";
-    return wine_dbg_sprintf( "%ld.%07ld", (long)timeout->QuadPart / TICKSPERSEC,
-                             (long)timeout->QuadPart % TICKSPERSEC );
-}
-
-
 /* create a struct security_descriptor and contained information in one contiguous piece of memory */
 NTSTATUS alloc_object_attributes( const OBJECT_ATTRIBUTES *attr, struct object_attributes **ret,
                                   data_size_t *ret_len )
@@ -1440,9 +1432,6 @@ NTSTATUS WINAPI NtCreateSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJ
     data_size_t len;
     struct object_attributes *objattr;
 
-    TRACE( "access %#x, name %s, initial %d, max %d\n", access,
-           attr ? debugstr_us(attr->ObjectName) : "(null)", initial, max );
-
     if (max <= 0 || initial < 0 || initial > max) return STATUS_INVALID_PARAMETER;
     if ((ret = alloc_object_attributes( attr, &objattr, &len ))) return ret;
 
@@ -1475,8 +1464,6 @@ NTSTATUS WINAPI NtOpenSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJEC
 {
     NTSTATUS ret;
 
-    TRACE( "access %#x, name %s\n", access, attr ? debugstr_us(attr->ObjectName) : "(null)" );
-
     if (do_fsync())
         return fsync_open_semaphore( handle, access, attr );
 
@@ -1553,8 +1540,6 @@ NTSTATUS WINAPI NtReleaseSemaphore( HANDLE handle, ULONG count, ULONG *previous
 {
     NTSTATUS ret;
 
-    TRACE( "handle %p, count %u, prev_count %p\n", handle, count, previous );
-
     if (do_fsync())
         return fsync_release_semaphore( handle, count, previous );
 
@@ -1588,9 +1573,6 @@ NTSTATUS WINAPI NtCreateEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_
     data_size_t len;
     struct object_attributes *objattr;
 
-    TRACE( "access %#x, name %s, type %u, state %u\n", access,
-           attr ? debugstr_us(attr->ObjectName) : "(null)", type, state );
-
     if (type != NotificationEvent && type != SynchronizationEvent) return STATUS_INVALID_PARAMETER;
 
     if (do_fsync())
@@ -1624,8 +1606,6 @@ NTSTATUS WINAPI NtOpenEvent( HANDLE *handle, ACCESS_MASK access, const OBJECT_AT
 {
     NTSTATUS ret;
 
-    TRACE( "access %#x, name %s\n", access, attr ? debugstr_us(attr->ObjectName) : "(null)" );
-
     if ((ret = validate_open_object_attributes( attr ))) return ret;
 
     if (do_fsync())
@@ -1657,8 +1637,6 @@ NTSTATUS WINAPI NtSetEvent( HANDLE handle, LONG *prev_state )
     /* This comment is a dummy to make sure this patch applies in the right place. */
     NTSTATUS ret;
 
-    TRACE( "handle %p, prev_state %p\n", handle, prev_state );
-
     if (do_fsync())
         return fsync_set_event( handle, prev_state );
 
@@ -1688,8 +1666,6 @@ NTSTATUS WINAPI NtResetEvent( HANDLE handle, LONG *prev_state )
     /* This comment is a dummy to make sure this patch applies in the right place. */
     NTSTATUS ret;
 
-    TRACE( "handle %p, prev_state %p\n", handle, prev_state );
-
     if (do_fsync())
         return fsync_reset_event( handle, prev_state );
 
@@ -1728,8 +1704,6 @@ NTSTATUS WINAPI NtPulseEvent( HANDLE handle, LONG *prev_state )
 {
     NTSTATUS ret;
 
-    TRACE( "handle %p, prev_state %p\n", handle, prev_state );
-
     if (do_fsync())
         return fsync_pulse_event( handle, prev_state );
 
@@ -1808,9 +1782,6 @@ NTSTATUS WINAPI NtCreateMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT
     data_size_t len;
     struct object_attributes *objattr;
 
-    TRACE( "access %#x, name %s, owned %u\n", access,
-           attr ? debugstr_us(attr->ObjectName) : "(null)", owned );
-
     if (do_fsync())
         return fsync_create_mutex( handle, access, attr, owned );
 
@@ -1841,8 +1812,6 @@ NTSTATUS WINAPI NtOpenMutant( HANDLE *handle, ACCESS_MASK access, const OBJECT_A
 {
     NTSTATUS ret;
 
-    TRACE( "access %#x, name %s\n", access, attr ? debugstr_us(attr->ObjectName) : "(null)" );
-
     if ((ret = validate_open_object_attributes( attr ))) return ret;
 
     if (do_fsync())
@@ -1873,8 +1842,6 @@ NTSTATUS WINAPI NtReleaseMutant( HANDLE handle, LONG *prev_count )
 {
     NTSTATUS ret;
 
-    TRACE( "handle %p, prev_count %p\n", handle, prev_count );
-
     if (do_fsync())
         return fsync_release_mutex( handle, prev_count );
 
@@ -2565,9 +2532,6 @@ NTSTATUS WINAPI NtCreateTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_
     data_size_t len;
     struct object_attributes *objattr;
 
-    TRACE( "access %#x, name %s, type %u\n", access,
-           attr ? debugstr_us(attr->ObjectName) : "(null)", type );
-
     if (type != NotificationTimer && type != SynchronizationTimer) return STATUS_INVALID_PARAMETER;
 
     if ((ret = alloc_object_attributes( attr, &objattr, &len ))) return ret;
@@ -2595,8 +2559,6 @@ NTSTATUS WINAPI NtOpenTimer( HANDLE *handle, ACCESS_MASK access, const OBJECT_AT
 {
     NTSTATUS ret;
 
-    TRACE( "access %#x, name %s\n", access, attr ? debugstr_us(attr->ObjectName) : "(null)" );
-
     if ((ret = validate_open_object_attributes( attr ))) return ret;
 
     SERVER_START_REQ( open_timer )
@@ -2649,8 +2611,6 @@ NTSTATUS WINAPI NtCancelTimer( HANDLE handle, BOOLEAN *state )
 {
     NTSTATUS ret;
 
-    TRACE( "handle %p, state %p\n", handle, state );
-
     SERVER_START_REQ( cancel_timer )
     {
         req->handle = wine_server_obj_handle( handle );
@@ -2723,13 +2682,6 @@ NTSTATUS WINAPI NtWaitForMultipleObjects( DWORD count, const HANDLE *handles, BO
 
     if (!count || count > MAXIMUM_WAIT_OBJECTS) return STATUS_INVALID_PARAMETER_1;
 
-    if (TRACE_ON(sync))
-    {
-        TRACE( "wait_any %u, alertable %u, handles {%p", wait_any, alertable, handles[0] );
-        for (i = 1; i < count; i++) TRACE( ", %p", handles[i] );
-        TRACE( "}, timeout %s\n", debugstr_timeout(timeout) );
-    }
-
     if (do_fsync())
     {
         NTSTATUS ret = fsync_wait_objects( count, handles, wait_any, alertable, timeout );
@@ -2753,9 +2705,7 @@ NTSTATUS WINAPI NtWaitForMultipleObjects( DWORD count, const HANDLE *handles, BO
     if (alertable) flags |= SELECT_ALERTABLE;
     select_op.wait.op = wait_any ? SELECT_WAIT : SELECT_WAIT_ALL;
     for (i = 0; i < count; i++) select_op.wait.handles[i] = wine_server_obj_handle( handles[i] );
-    ret = server_wait( &select_op, offsetof( select_op_t, wait.handles[count] ), flags, timeout );
-    TRACE( "-> %#x\n", ret );
-    return ret;
+    return server_wait( &select_op, offsetof( select_op_t, wait.handles[count] ), flags, timeout );
 }
 
 
@@ -2778,8 +2728,6 @@ NTSTATUS WINAPI NtSignalAndWaitForSingleObject( HANDLE signal, HANDLE wait,
     UINT flags = SELECT_INTERRUPTIBLE;
     NTSTATUS ret;
 
-    TRACE( "signal %p, wait %p, alertable %u, timeout %s\n", signal, wait, alertable, debugstr_timeout(timeout) );
-
     if (do_fsync())
         return fsync_signal_and_wait( signal, wait, alertable, timeout );
 
@@ -2818,8 +2766,6 @@ NTSTATUS WINAPI NtYieldExecution(void)
  */
 NTSTATUS WINAPI NtDelayExecution( BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
-//    TRACE( "alertable %u, timeout %s\n", alertable, debugstr_timeout(timeout) );
-
     /* if alertable, we need to query the server */
     if (alertable)
     {
@@ -3007,9 +2953,6 @@ NTSTATUS WINAPI NtCreateKeyedEvent( HANDLE *handle, ACCESS_MASK access,
     data_size_t len;
     struct object_attributes *objattr;
 
-    TRACE( "access %#x, name %s, flags %#x\n", access,
-           attr ? debugstr_us(attr->ObjectName) : "(null)", flags );
-
     if ((ret = alloc_object_attributes( attr, &objattr, &len ))) return ret;
 
     SERVER_START_REQ( create_keyed_event )
@@ -3033,8 +2976,6 @@ NTSTATUS WINAPI NtOpenKeyedEvent( HANDLE *handle, ACCESS_MASK access, const OBJE
 {
     NTSTATUS ret;
 
-    TRACE( "access %#x, name %s\n", access, attr ? debugstr_us(attr->ObjectName) : "(null)" );
-
     if ((ret = validate_open_object_attributes( attr ))) return ret;
 
     SERVER_START_REQ( open_keyed_event )
@@ -3065,8 +3006,6 @@ NTSTATUS WINAPI NtWaitForKeyedEvent( HANDLE handle, const void *key,
     UINT flags = SELECT_INTERRUPTIBLE;
     NTSTATUS status;
 
-    TRACE( "handle %p, key %p, alertable %u, timeout %s\n", handle, key, alertable, debugstr_timeout(timeout) );
-
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
     entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
     if ((status = fast_wait_for_keyed_event( entry, timeout )) == STATUS_NOT_IMPLEMENTED)
@@ -3094,8 +3033,6 @@ NTSTATUS WINAPI NtReleaseKeyedEvent( HANDLE handle, const void *key,
     UINT flags = SELECT_INTERRUPTIBLE;
     NTSTATUS status;
 
-    TRACE( "handle %p, key %p, alertable %u, timeout %s\n", handle, key, alertable, debugstr_timeout(timeout) );
-
     if ((ULONG_PTR)key & 1) return STATUS_INVALID_PARAMETER_1;
     entry = keyed_entry_acquire( handle, wine_server_client_ptr( key ), alertable );
     if ((status = fast_release_keyed_event( entry, timeout )) == STATUS_NOT_IMPLEMENTED)
