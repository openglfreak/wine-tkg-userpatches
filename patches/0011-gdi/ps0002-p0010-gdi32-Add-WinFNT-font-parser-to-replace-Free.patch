From 5514f6ff8f2ae346374702a971a64eab65ffe7f2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 13 Nov 2020 11:39:03 +0100
Subject: [PATCH 10/11] gdi32: Add WinFNT font parser to replace FreeType.

---
 dlls/gdi32/freetype.c    |  39 +++++++++-
 dlls/gdi32/gdi_private.h |   4 ++
 dlls/gdi32/opentype.c    | 150 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 192 insertions(+), 1 deletion(-)

diff --git a/dlls/gdi32/freetype.c b/dlls/gdi32/freetype.c
index 0ffd2f8f34a..97483c3552e 100644
--- a/dlls/gdi32/freetype.c
+++ b/dlls/gdi32/freetype.c
@@ -1194,9 +1194,11 @@ static struct unix_face *unix_face_create( const char *unix_name, void *data_ptr
 
     const struct ttc_sfnt_v1 *ttc_sfnt_v1;
     const struct tt_name_v0 *tt_name_v0;
+    const char *family_name_a = NULL, *style_name_a = NULL;
     struct unix_face *This;
     struct stat st;
-    DWORD face_count;
+    DWORD face_count, needed;
+    WORD width, height, points, ppem, in_leading;
     int fd, length;
 
     TRACE( "unix_name %s, face_index %u, data_ptr %p, data_size %u, flags %#x\n",
@@ -1263,6 +1265,41 @@ static struct unix_face *unix_face_create( const char *unix_name, void *data_ptr
             WARN( "full name not found, using %s instead\n", debugstr_w(This->full_name) );
         }
     }
+    else if (winfnt_parse_font_face( data_ptr, data_size, face_index, &face_count,
+                                     &family_name_a, &style_name_a, &This->fs, &This->ntm_flags,
+                                     &width, &height, &points, &ppem, &in_leading ))
+    {
+        This->scalable = FALSE;
+        This->num_faces = face_count;
+        This->font_version = 0;
+
+        length = strlen( family_name_a ) + 1;
+        RtlMultiByteToUnicodeSize( &needed, family_name_a, length );
+        This->family_name = RtlAllocateHeap( GetProcessHeap(), 0, needed );
+        RtlMultiByteToUnicodeN( This->family_name, needed, &needed, family_name_a, length );
+
+        This->second_name = NULL;
+
+        length = strlen( style_name_a ) + 1;
+        RtlMultiByteToUnicodeSize( &needed, style_name_a, length );
+        This->style_name = RtlAllocateHeap( GetProcessHeap(), 0, needed );
+        RtlMultiByteToUnicodeN( This->style_name, needed, &needed, style_name_a, length );
+
+        TRACE( "parsed font names family_name %s, style_name %s\n", debugstr_w(This->family_name), debugstr_w(This->style_name) );
+
+        length = lstrlenW( This->family_name ) + lstrlenW( space_w ) + lstrlenW( This->style_name ) + 1;
+        This->full_name = RtlAllocateHeap( GetProcessHeap(), 0, length * sizeof(WCHAR) );
+        lstrcpyW( This->full_name, This->family_name );
+        lstrcatW( This->full_name, space_w );
+        lstrcatW( This->full_name, This->style_name );
+
+        This->size.height = height;
+        This->size.width = width;
+        This->size.size = points * 64;
+        This->size.y_ppem = ppem;
+        This->size.x_ppem = ppem;
+        This->size.internal_leading = in_leading;
+    }
     else if ((This->ft_face = new_ft_face( unix_name, data_ptr, data_size, face_index, flags & ADDFONT_ALLOW_BITMAP )))
     {
         WARN( "unable to parse font, falling back to FreeType\n" );
diff --git a/dlls/gdi32/gdi_private.h b/dlls/gdi32/gdi_private.h
index 8d917a795c0..e92d197d661 100644
--- a/dlls/gdi32/gdi_private.h
+++ b/dlls/gdi32/gdi_private.h
@@ -442,6 +442,10 @@ extern BOOL opentype_enum_full_names( const struct tt_name_v0 *tt_name_v0,
 extern BOOL opentype_get_properties( const void *data, size_t size, const struct ttc_sfnt_v1 *ttc_sfnt_v1,
                                      DWORD *version, FONTSIGNATURE *fs, DWORD *ntm_flags ) DECLSPEC_HIDDEN;
 
+extern BOOL winfnt_parse_font_face( const void *data, size_t size, DWORD index, DWORD *count,
+                                    const char **family_name, const char **style_name, FONTSIGNATURE *fs, DWORD *ntm_flags,
+                                    WORD *width, WORD *height, WORD *points, WORD *ppem, WORD *in_leading ) DECLSPEC_HIDDEN;
+
 /* gdiobj.c */
 extern HGDIOBJ alloc_gdi_handle( void *obj, WORD type, const struct gdi_obj_funcs *funcs ) DECLSPEC_HIDDEN;
 extern void *free_gdi_handle( HGDIOBJ handle ) DECLSPEC_HIDDEN;
diff --git a/dlls/gdi32/opentype.c b/dlls/gdi32/opentype.c
index 67af44dfe91..eb0a93a8a30 100644
--- a/dlls/gdi32/opentype.c
+++ b/dlls/gdi32/opentype.c
@@ -631,6 +631,7 @@ BOOL opentype_get_ttc_sfnt_v1( const void *data, size_t size, DWORD index, DWORD
     default:
         WARN( "unsupported font format %x\n", fourcc );
         return FALSE;
+    case 0x010d5a4d: /* WinFNT header */ return FALSE;
     case MS_TTCF_TAG:
         if (size < sizeof(ttc_header_v1)) return FALSE;
         if (index >= (*count = GET_BE_DWORD( ttc_header_v1->numFonts ))) return FALSE;
@@ -768,3 +769,152 @@ BOOL opentype_get_properties( const void *data, size_t size, const struct ttc_sf
     *ntm_flags = flags;
     return TRUE;
 }
+
+#include "pshpack1.h"
+typedef struct
+{
+    INT16 dfType;
+    INT16 dfPoints;
+    INT16 dfVertRes;
+    INT16 dfHorizRes;
+    INT16 dfAscent;
+    INT16 dfInternalLeading;
+    INT16 dfExternalLeading;
+    BYTE  dfItalic;
+    BYTE  dfUnderline;
+    BYTE  dfStrikeOut;
+    INT16 dfWeight;
+    BYTE  dfCharSet;
+    INT16 dfPixWidth;
+    INT16 dfPixHeight;
+    BYTE  dfPitchAndFamily;
+    INT16 dfAvgWidth;
+    INT16 dfMaxWidth;
+    BYTE  dfFirstChar;
+    BYTE  dfLastChar;
+    BYTE  dfDefaultChar;
+    BYTE  dfBreakChar;
+    INT16 dfWidthBytes;
+    LONG  dfDevice;
+    LONG  dfFace;
+    LONG  dfBitsPointer;
+    LONG  dfBitsOffset;
+    BYTE  dfReserved;
+    LONG  dfFlags;
+    INT16 dfAspace;
+    INT16 dfBspace;
+    INT16 dfCspace;
+    LONG  dfColorPointer;
+    LONG  dfReserved1[4];
+} FONTINFO16;
+
+typedef struct
+{
+    WORD dfVersion;
+    DWORD dfSize;
+    char dfCopyright[60];
+    FONTINFO16 fi;
+} FNT_HEADER;
+
+typedef struct
+{
+    WORD  offset;
+    WORD  length;
+    WORD  flags;
+    WORD  id;
+    WORD  handle;
+    WORD  usage;
+} NE_NAMEINFO;
+
+typedef struct
+{
+    WORD  type_id;
+    WORD  count;
+    DWORD resloader;
+} NE_TYPEINFO;
+#include "poppack.h"
+
+#define NE_RSCTYPE_FONTDIR 0x8007
+#define NE_RSCTYPE_FONT    0x8008
+
+BOOL winfnt_parse_font_face( const void *data, size_t size, DWORD index, DWORD *count,
+                             const char **family_name, const char **style_name, FONTSIGNATURE *fs, DWORD *ntm_flags,
+                             WORD *width, WORD *height, WORD *points, WORD *ppem, WORD *in_leading )
+{
+    const IMAGE_DOS_HEADER *dos = data;
+    const IMAGE_OS2_HEADER *os2 = (const IMAGE_OS2_HEADER *)((const char *)data + dos->e_lfanew);
+    DWORD offset, flags;
+    WORD align;
+
+    if (dos->e_magic != IMAGE_DOS_SIGNATURE) return FALSE;
+
+    if (dos->e_lfanew <= size && dos->e_lfanew + sizeof(*os2) <= size &&
+        os2->ne_magic == IMAGE_OS2_SIGNATURE)
+    {
+        const char *rsrc_table = (const char *)os2 + os2->ne_rsrctab;
+        const char *res_table = (const char *)os2 + os2->ne_restab;
+        const NE_TYPEINFO *type = (const NE_TYPEINFO *)(rsrc_table + sizeof(align));
+        const NE_NAMEINFO *name = (const NE_NAMEINFO *)(type + 1);
+        const FNT_HEADER *fnt_header;
+
+        if ((const char *)name >= res_table) return FALSE;
+        memcpy(&align, rsrc_table, sizeof(align));
+
+        if (type->type_id != NE_RSCTYPE_FONTDIR) return FALSE;
+        if (rsrc_table + name->id >= res_table) return FALSE;
+        if (*(rsrc_table + name->id) != strlen("FONTDIR")) return FALSE;
+        if (memcmp(rsrc_table + name->id + 1, "FONTDIR", strlen("FONTDIR"))) return FALSE;
+
+        type = (const NE_TYPEINFO *)(name + 1);
+        if (type->type_id != NE_RSCTYPE_FONT) return FALSE;
+        *count = type->count;
+
+        if (index >= type->count) return FALSE;
+        name = (const NE_NAMEINFO *)(type + 1) + index;
+        offset = name->offset << align;
+
+        if (offset >= size || offset + sizeof(*fnt_header) >= size) return FALSE;
+        fnt_header = (const FNT_HEADER *)((const char *)data + offset);
+
+        *family_name = (const char *)fnt_header + fnt_header->fi.dfFace;
+        switch (fnt_header->fi.dfCharSet)
+        {
+            case ANSI_CHARSET:        fs->fsCsb[0] = FS_LATIN1; break;
+            case EASTEUROPE_CHARSET:  fs->fsCsb[0] = FS_LATIN2; break;
+            case RUSSIAN_CHARSET:     fs->fsCsb[0] = FS_CYRILLIC; break;
+            case GREEK_CHARSET:       fs->fsCsb[0] = FS_GREEK; break;
+            case TURKISH_CHARSET:     fs->fsCsb[0] = FS_TURKISH; break;
+            case HEBREW_CHARSET:      fs->fsCsb[0] = FS_HEBREW; break;
+            case ARABIC_CHARSET:      fs->fsCsb[0] = FS_ARABIC; break;
+            case BALTIC_CHARSET:      fs->fsCsb[0] = FS_BALTIC; break;
+            case VIETNAMESE_CHARSET:  fs->fsCsb[0] = FS_VIETNAMESE; break;
+            case THAI_CHARSET:        fs->fsCsb[0] = FS_THAI; break;
+            case SHIFTJIS_CHARSET:    fs->fsCsb[0] = FS_JISJAPAN; break;
+            case GB2312_CHARSET:      fs->fsCsb[0] = FS_CHINESESIMP; break;
+            case HANGEUL_CHARSET:     fs->fsCsb[0] = FS_WANSUNG; break;
+            case CHINESEBIG5_CHARSET: fs->fsCsb[0] = FS_CHINESETRAD; break;
+            case JOHAB_CHARSET:       fs->fsCsb[0] = FS_JOHAB; break;
+            case SYMBOL_CHARSET:      fs->fsCsb[0] = FS_SYMBOL; break;
+        }
+
+        flags = 0;
+        if (fnt_header->fi.dfItalic) flags |= NTM_ITALIC;
+        if (fnt_header->fi.dfWeight > FW_NORMAL) flags |= NTM_BOLD;
+        if (flags == 0) flags = NTM_REGULAR;
+        *ntm_flags = flags;
+
+        if (flags == (NTM_BOLD|NTM_ITALIC)) *style_name = "Bold Italic";
+        else if (flags == NTM_BOLD) *style_name = "Bold";
+        else if (flags == NTM_ITALIC) *style_name = "Italic";
+        else *style_name = "Regular";
+
+        *width = fnt_header->fi.dfAvgWidth;
+        *height = fnt_header->fi.dfPixHeight;
+        *points = fnt_header->fi.dfPoints;
+        *ppem = ((fnt_header->fi.dfPoints * fnt_header->fi.dfVertRes * 0x40) / 72
+                 + fnt_header->fi.dfInternalLeading + fnt_header->fi.dfExternalLeading + 0x20) & ~0x3f;
+        *in_leading = fnt_header->fi.dfInternalLeading;
+    }
+
+    return TRUE;
+}
-- 
2.29.2

