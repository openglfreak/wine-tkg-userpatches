From b166c181a1712b73c05e11719c951f0f562fb4cb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 22 Feb 2022 11:23:19 +0100
Subject: [PATCH 31/35] winegstreamer: Reply with the custom buffer pool to
 ALLOCATION query.

For: Call of Duty III, Mortal Kombat 11, Shadow Warrior 2,
Yakuza 4 Remastered, Hard Reset Redux.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=45988
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47084
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49715
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52183
CW-Bug-Id: #16839
CW-Bug-Id: #18678
CW-Bug-Id: #19362
---
 dlls/winegstreamer/wg_transform.c | 37 +++++++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)

diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -62,6 +62,7 @@ struct wg_transform
     struct list samples;
     GstCaps *sink_caps;
     GstBufferPool *pool;
+    bool enable_pool;
 };
 
 static GstFlowReturn transform_sink_chain_cb(GstPad *pad, GstObject *parent, GstBuffer *buffer)
@@ -87,6 +88,40 @@ static GstFlowReturn transform_sink_chain_cb(GstPad *pad, GstObject *parent, Gst
     return GST_FLOW_OK;
 }
 
+static gboolean transform_sink_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
+{
+    struct wg_transform *transform = gst_pad_get_element_private(pad);
+
+    GST_LOG("transform %p, type \"%s\".", transform, gst_query_type_get_name(query->type));
+
+    switch (query->type)
+    {
+    case GST_QUERY_ALLOCATION:
+    {
+        GstBufferPool *pool;
+        gboolean need_pool;
+        gsize buffer_size;
+        GstCaps *caps;
+
+        gst_query_parse_allocation(query, &caps, &need_pool);
+        if (!caps || !need_pool || !transform->enable_pool ||
+                !(pool = wg_pool_create(caps, &buffer_size)))
+            break;
+        pthread_mutex_lock(&transform->mutex);
+        wg_pool_destroy(transform->pool);
+        transform->pool = pool;
+        gst_query_add_allocation_pool(query, pool, buffer_size, 0, 0);
+        pthread_mutex_unlock(&transform->mutex);
+        return TRUE;
+    }
+    default:
+        GST_INFO("Ignoring \"%s\" query.", gst_query_type_get_name(query->type));
+        break;
+    }
+
+    return gst_pad_query_default(pad, parent, query);
+}
+
 static gboolean transform_sink_event_cb(GstPad *pad, GstObject *parent, GstEvent *event)
 {
     struct wg_transform *transform = gst_pad_get_element_private(pad);
@@ -271,6 +306,7 @@ NTSTATUS wg_transform_create(void *args)
     }
 
     gst_pad_set_element_private(transform->my_sink, transform);
+    gst_pad_set_query_function(transform->my_sink, transform_sink_query_cb);
     gst_pad_set_event_function(transform->my_sink, transform_sink_event_cb);
     gst_pad_set_chain_function(transform->my_sink, transform_sink_chain_cb);
 
@@ -293,6 +329,7 @@ NTSTATUS wg_transform_create(void *args)
                 goto out;
             }
             transform->broken_timestamps = !element;
+            transform->enable_pool = true;
             /* fallthrough */
         case WG_MAJOR_TYPE_WMA:
             if (!(element = transform_find_element(GST_ELEMENT_FACTORY_TYPE_DECODER, src_caps, sink_caps))

