From 0de7c50ed48d341b4df13d1895ef7603f926da4c Mon Sep 17 00:00:00 2001
From: Paul Gofman <gofmanp@gmail.com>
Date: Fri, 13 Jan 2023 18:36:25 -0600
Subject: [PATCH 1003/3] win32u: Stop leaking shared data memory.

And close section handles right away.

CW-Bug-Id: #21761
---
 dlls/win32u/ntuser_private.h |  4 ----
 dlls/win32u/sysparams.c      | 18 +++++++-----------
 dlls/win32u/winstation.c     | 33 ++++++++++++++-------------------
 3 files changed, 21 insertions(+), 34 deletions(-)

diff --git a/dlls/win32u/ntuser_private.h b/dlls/win32u/ntuser_private.h
index 11111111111..11111111111 100644
--- a/dlls/win32u/ntuser_private.h
+++ b/dlls/win32u/ntuser_private.h
@@ -134,13 +134,9 @@ struct user_thread_info
     UINT                          spy_indent;             /* Current spy indent */
     BOOL                          clipping_cursor;        /* thread is currently clipping */
     DWORD                         clipping_reset;         /* time when clipping was last reset */
-    HANDLE                        desktop_shared_map;     /* HANDLE to server's desktop shared memory */
     struct desktop_shared_memory *desktop_shared_memory;  /* Ptr to server's desktop shared memory */
-    HANDLE                        queue_shared_map;       /* HANDLE to server's thread queue shared memory */
     struct queue_shared_memory   *queue_shared_memory;    /* Ptr to server's thread queue shared memory */
-    HANDLE                        input_shared_map;       /* HANDLE to server's thread input shared memory */
     struct input_shared_memory   *input_shared_memory;    /* Ptr to server's thread input shared memory */
-    HANDLE                        foreground_shared_map;    /* HANDLE to server's thread input shared memory */
     struct input_shared_memory   *foreground_shared_memory; /* Ptr to server's thread input shared memory */
 };
 
diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -6209,31 +6209,27 @@ static void thread_detach(void)
     cleanup_imm_thread();
     NtClose( thread_info->server_queue );
 
-    if (thread_info->desktop_shared_map)
+    if (thread_info->desktop_shared_memory)
     {
-        NtClose( thread_info->desktop_shared_map );
-        thread_info->desktop_shared_map = NULL;
+        NtUnmapViewOfSection( GetCurrentProcess(), thread_info->desktop_shared_memory );
         thread_info->desktop_shared_memory = NULL;
     }
 
-    if (thread_info->queue_shared_map)
+    if (thread_info->queue_shared_memory)
     {
-        NtClose( thread_info->queue_shared_map );
-        thread_info->queue_shared_map = NULL;
+        NtUnmapViewOfSection( GetCurrentProcess(), thread_info->queue_shared_memory );
         thread_info->queue_shared_memory = NULL;
     }
 
-    if (thread_info->input_shared_map)
+    if (thread_info->input_shared_memory)
     {
-        NtClose( thread_info->input_shared_map );
-        thread_info->input_shared_map = NULL;
+        NtUnmapViewOfSection( GetCurrentProcess(), thread_info->input_shared_memory );
         thread_info->input_shared_memory = NULL;
     }
 
     if (thread_info->foreground_shared_memory)
     {
-        NtClose( thread_info->foreground_shared_map );
-        thread_info->foreground_shared_map = NULL;
+        NtUnmapViewOfSection( GetCurrentProcess(), thread_info->foreground_shared_memory );
         thread_info->foreground_shared_memory = NULL;
     }
 
diff --git a/dlls/win32u/winstation.c b/dlls/win32u/winstation.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/winstation.c
+++ b/dlls/win32u/winstation.c
@@ -262,10 +262,9 @@ BOOL WINAPI NtUserSetThreadDesktop( HDESK handle )
         struct user_thread_info *thread_info = get_user_thread_info();
         thread_info->client_info.top_window = 0;
         thread_info->client_info.msg_window = 0;
-        if (thread_info->desktop_shared_map)
+        if (thread_info->desktop_shared_memory)
         {
-            NtClose( thread_info->desktop_shared_map );
-            thread_info->desktop_shared_map = NULL;
+            NtUnmapViewOfSection( GetCurrentProcess(), thread_info->desktop_shared_memory );
             thread_info->desktop_shared_memory = NULL;
         }
         if (was_virtual_desktop != is_virtual_desktop()) update_display_cache( TRUE );
@@ -611,32 +610,31 @@ static const WCHAR *get_default_desktop( void *buf, size_t buf_size )
     return defaultW;
 }
 
-static void map_shared_memory_section( const WCHAR *name, SIZE_T size, HANDLE root, HANDLE *handle, void **ptr )
+static void map_shared_memory_section( const WCHAR *name, SIZE_T size, HANDLE root, void **ptr )
 {
     OBJECT_ATTRIBUTES attr;
     UNICODE_STRING section_str;
     unsigned int status;
+    HANDLE handle;
 
     RtlInitUnicodeString( &section_str, name );
     InitializeObjectAttributes( &attr, &section_str, 0, root, NULL );
-    status = NtOpenSection( handle, SECTION_ALL_ACCESS, &attr );
+    status = NtOpenSection( &handle, SECTION_ALL_ACCESS, &attr );
     if (status)
     {
         ERR( "failed to open section %s: %08x\n", debugstr_w(name), status );
         *ptr = NULL;
-        *handle = NULL;
         return;
     }
 
     *ptr = NULL;
-    status = NtMapViewOfSection( *handle, GetCurrentProcess(), ptr, 0, 0, NULL,
+    status = NtMapViewOfSection( handle, GetCurrentProcess(), ptr, 0, 0, NULL,
                                  &size, ViewUnmap, 0, PAGE_READONLY );
+    NtClose( handle );
     if (status)
     {
         ERR( "failed to map view of section %s: %08x\n", debugstr_w(name), status );
-        NtClose( *handle );
         *ptr = NULL;
-        *handle = NULL;
     }
 }
 
@@ -715,7 +713,7 @@ volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
 
     root = get_winstations_dir_handle();
     map_shared_memory_section( buf, sizeof(struct desktop_shared_memory), root,
-                               &thread_info->desktop_shared_map, (void **)&thread_info->desktop_shared_memory );
+                               (void **)&thread_info->desktop_shared_memory );
     NtClose( root );
 
     return thread_info->desktop_shared_memory;
@@ -733,23 +731,22 @@ volatile struct queue_shared_memory *get_queue_shared_memory( void )
     snprintf( buffer, ARRAY_SIZE(buffer), "\\KernelObjects\\__wine_thread_mappings\\%08x-queue", tid );
     asciiz_to_unicode( bufferW, buffer );
     map_shared_memory_section( bufferW, sizeof(struct queue_shared_memory), NULL,
-                               &thread_info->queue_shared_map, (void **)&thread_info->queue_shared_memory );
+                               (void **)&thread_info->queue_shared_memory );
     return thread_info->queue_shared_memory;
 }
 
-static volatile struct input_shared_memory *get_thread_input_shared_memory( UINT tid, HANDLE *handle,
-                                                                            struct input_shared_memory **ptr )
+static volatile struct input_shared_memory *get_thread_input_shared_memory( UINT tid, struct input_shared_memory **ptr )
 {
     WCHAR bufferW[MAX_PATH];
     char buffer[MAX_PATH];
 
     if (*ptr && (*ptr)->tid == tid) return *ptr;
-    if (*ptr) NtClose( *handle );
+    if (*ptr) NtUnmapViewOfSection( GetCurrentProcess(), *ptr );
 
     snprintf( buffer, ARRAY_SIZE(buffer), "\\KernelObjects\\__wine_thread_mappings\\%08x-input", tid );
     asciiz_to_unicode( bufferW, buffer );
     map_shared_memory_section( bufferW, sizeof(struct input_shared_memory), NULL,
-                               handle, (void **)ptr );
+                               (void **)ptr );
     return *ptr;
 }
 
@@ -766,8 +763,7 @@ volatile struct input_shared_memory *get_input_shared_memory( void )
     }
     SHARED_READ_END( &queue->seq );
 
-    return get_thread_input_shared_memory( tid, &thread_info->input_shared_map,
-                                           &thread_info->input_shared_memory );
+    return get_thread_input_shared_memory( tid, &thread_info->input_shared_memory );
 }
 
 volatile struct input_shared_memory *get_foreground_shared_memory( void )
@@ -784,8 +780,7 @@ volatile struct input_shared_memory *get_foreground_shared_memory( void )
     SHARED_READ_END( &desktop->seq );
 
     if (!tid) return NULL;
-    return get_thread_input_shared_memory( tid, &thread_info->foreground_shared_map,
-                                           &thread_info->foreground_shared_memory );
+    return get_thread_input_shared_memory( tid, &thread_info->foreground_shared_memory );
 }
 
 /***********************************************************************
