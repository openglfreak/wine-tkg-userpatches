From ecfe82758596155628b2545d97eb1afe3acce04e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 9 Mar 2022 12:10:33 +0100
Subject: [PATCH 10/16] user32/tests: Factor MsgWaitForMultipleObjects uses
 with wait_for_events.

---
 dlls/user32/tests/msg.c | 65 +++++++++++++++++++++--------------------
 1 file changed, 33 insertions(+), 32 deletions(-)

diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/msg.c
+++ b/dlls/user32/tests/msg.c
@@ -2895,6 +2895,28 @@ static void flush_sequence(void)
     LeaveCriticalSection( &sequence_cs );
 }
 
+static DWORD wait_for_events( DWORD count, HANDLE *events, DWORD timeout )
+{
+    DWORD ret, end = GetTickCount() + timeout;
+    MSG msg;
+
+    while ((ret = MsgWaitForMultipleObjects( count, events, FALSE, timeout, QS_ALLINPUT )) <= count)
+    {
+        while (PeekMessageA( &msg, 0, 0, 0, PM_REMOVE ))
+        {
+            TranslateMessage( &msg );
+            DispatchMessageA( &msg );
+        }
+        if (ret < count) return ret;
+        if (timeout == INFINITE) continue;
+        if (end <= GetTickCount()) timeout = 0;
+        else timeout = end - GetTickCount();
+    }
+
+    ok( ret == WAIT_TIMEOUT, "MsgWaitForMultipleObjects returned %#lx\n", ret );
+    return ret;
+}
+
 static int try_compare_message( const struct message *expected, const struct message *received )
 {
     static DWORD type_flags = hook | winevent_hook | kbd_hook;
@@ -9233,7 +9255,6 @@ static DWORD CALLBACK create_grand_child_thread( void *param )
 {
     struct wnd_event *wnd_event = param;
     HWND hchild;
-    MSG msg;
 
     hchild = CreateWindowExA(0, "TestWindowClass", "Test child",
                              WS_CHILD | WS_VISIBLE, 0, 0, 10, 10, wnd_event->hwnd, 0, 0, NULL);
@@ -9244,9 +9265,8 @@ static DWORD CALLBACK create_grand_child_thread( void *param )
 
     for (;;)
     {
-        MsgWaitForMultipleObjects(0, NULL, FALSE, 1000, QS_ALLINPUT);
+        wait_for_events( 0, NULL, 1000 );
         if (!IsWindow( hchild )) break;  /* will be destroyed when parent thread exits */
-        while (PeekMessageA(&msg, 0, 0, 0, PM_REMOVE)) DispatchMessageA(&msg);
     }
     return 0;
 }
@@ -9256,7 +9276,6 @@ static DWORD CALLBACK create_child_thread( void *param )
     struct wnd_event *wnd_event = param;
     struct wnd_event child_event;
     DWORD ret, tid;
-    MSG msg;
 
     child_event.hwnd = CreateWindowExA(0, "TestWindowClass", "Test child",
                              WS_CHILD | WS_VISIBLE, 0, 0, 10, 10, wnd_event->hwnd, 0, 0, NULL);
@@ -9266,12 +9285,8 @@ static DWORD CALLBACK create_child_thread( void *param )
     flush_sequence();
     child_event.start_event = wnd_event->start_event;
     wnd_event->grand_child = CreateThread(NULL, 0, create_grand_child_thread, &child_event, 0, &tid);
-    for (;;)
-    {
-        DWORD ret = MsgWaitForMultipleObjects(1, &child_event.start_event, FALSE, 1000, QS_SENDMESSAGE);
-        if (ret != 1) break;
-        while (PeekMessageA(&msg, 0, 0, 0, PM_REMOVE)) DispatchMessageA(&msg);
-    }
+    ret = wait_for_events( 1, &child_event.start_event, 1000 );
+    ok( !ret, "wait_for_events returned %lx\n", ret );
     ret = WaitForSingleObject( wnd_event->stop_event, 5000 );
     ok( !ret, "WaitForSingleObject failed %lx\n", ret );
     return 0;
@@ -9411,13 +9426,8 @@ static void test_interthread_messages(void)
     wnd_event.start_event = CreateEventA( NULL, TRUE, FALSE, NULL );
     wnd_event.stop_event = CreateEventA( NULL, TRUE, FALSE, NULL );
     hThread = CreateThread( NULL, 0, create_child_thread, &wnd_event, 0, &tid );
-    for (;;)
-    {
-        ret = MsgWaitForMultipleObjects(1, &wnd_event.start_event, FALSE, 1000, QS_SENDMESSAGE);
-        if (ret != 1) break;
-        while (PeekMessageA(&msg, 0, 0, 0, PM_REMOVE)) DispatchMessageA(&msg);
-    }
-    ok( !ret, "MsgWaitForMultipleObjects failed %x\n", ret );
+    ret = wait_for_events( 1, &wnd_event.start_event, 1000 );
+    ok( !ret, "wait_for_events returned %x\n", ret );
     /* now wait for the thread without processing messages; this shouldn't deadlock */
     SetEvent( wnd_event.stop_event );
     ret = WaitForSingleObject( hThread, 5000 );
@@ -12059,15 +12069,6 @@ static DWORD CALLBACK send_msg_thread( LPVOID arg )
     return 0;
 }
 
-static void wait_for_thread( HANDLE thread )
-{
-    while (MsgWaitForMultipleObjects(1, &thread, FALSE, INFINITE, QS_SENDMESSAGE) != WAIT_OBJECT_0)
-    {
-        MSG msg;
-        while (PeekMessageA( &msg, 0, 0, 0, PM_REMOVE )) DispatchMessageA(&msg);
-    }
-}
-
 static LRESULT WINAPI send_msg_delay_proc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
 {
     if (message == WM_USER) Sleep(200);
@@ -12092,7 +12093,7 @@ static void test_SendMessageTimeout(void)
     ResetEvent( info.ready );
     thread = CreateThread( NULL, 0, send_msg_thread, &info, 0, &tid );
     WaitForSingleObject( info.ready, INFINITE );
-    wait_for_thread( thread );
+    wait_for_events( 1, &thread, INFINITE );
     CloseHandle( thread );
     ok( info.ret == 1, "SendMessageTimeout failed\n" );
     ok_sequence( WmUser, "WmUser", FALSE );
@@ -12103,7 +12104,7 @@ static void test_SendMessageTimeout(void)
     thread = CreateThread( NULL, 0, send_msg_thread, &info, 0, &tid );
     WaitForSingleObject( info.ready, INFINITE );
     Sleep(100);  /* SendMessageTimeout should time out here */
-    wait_for_thread( thread );
+    wait_for_events( 1, &thread, INFINITE );
     CloseHandle( thread );
     ok( info.ret == 0, "SendMessageTimeout succeeded\n" );
     ok_sequence( WmEmptySeq, "WmEmptySeq", FALSE );
@@ -12115,7 +12116,7 @@ static void test_SendMessageTimeout(void)
     thread = CreateThread( NULL, 0, send_msg_thread, &info, 0, &tid );
     WaitForSingleObject( info.ready, INFINITE );
     Sleep(100);
-    wait_for_thread( thread );
+    wait_for_events( 1, &thread, INFINITE );
     CloseHandle( thread );
     is_win9x = !info.ret;
     if (is_win9x) ok_sequence( WmEmptySeq, "WmEmptySeq", FALSE );
@@ -12128,7 +12129,7 @@ static void test_SendMessageTimeout(void)
     thread = CreateThread( NULL, 0, send_msg_thread, &info, 0, &tid );
     WaitForSingleObject( info.ready, INFINITE );
     Sleep(100);
-    wait_for_thread( thread );
+    wait_for_events( 1, &thread, INFINITE );
     CloseHandle( thread );
     ok( info.ret == 1, "SendMessageTimeout failed\n" );
     ok_sequence( WmUser, "WmUser", FALSE );
@@ -12139,7 +12140,7 @@ static void test_SendMessageTimeout(void)
     thread = CreateThread( NULL, 0, send_msg_thread, &info, 0, &tid );
     WaitForSingleObject( info.ready, INFINITE );
     Sleep(100);
-    wait_for_thread( thread );
+    wait_for_events( 1, &thread, INFINITE );
     CloseHandle( thread );
     if (is_win9x)
     {
@@ -12159,7 +12160,7 @@ static void test_SendMessageTimeout(void)
     ResetEvent( info.ready );
     thread = CreateThread( NULL, 0, send_msg_thread, &info, 0, &tid );
     WaitForSingleObject( info.ready, INFINITE );
-    wait_for_thread( thread );
+    wait_for_events( 1, &thread, INFINITE );
     CloseHandle( thread );
     /* we should time out but still get the message */
     ok( info.ret == 0, "SendMessageTimeout failed\n" );
-- 
2.37.1

