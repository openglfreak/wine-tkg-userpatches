From 99975d2e72e522c77c0c6ac5528d7e511e9aa550 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 14 Jan 2021 14:55:40 +0100
Subject: [PATCH 02/18] server: Rename thread shared memory to queue shared
 memory.

---
 dlls/user32/message.c      |  2 +-
 dlls/user32/user_main.c    |  8 ++++----
 dlls/user32/user_private.h |  6 +++---
 dlls/user32/winstation.c   | 12 ++++++------
 server/protocol.def        |  2 +-
 server/queue.c             |  4 ++--
 server/thread.c            | 22 +++++++++++-----------
 server/thread.h            |  4 ++--
 8 files changed, 30 insertions(+), 30 deletions(-)

diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index 224b2e01356..b194b0cf03f 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -2666,7 +2666,7 @@ static inline void call_sendmsg_callback( SENDASYNCPROC callback, HWND hwnd, UIN
 static int peek_message( MSG *msg, HWND hwnd, UINT first, UINT last, UINT flags, UINT changed_mask, BOOL waited )
 {
     LRESULT result;
-    volatile struct thread_shared_memory *shared = get_thread_shared_memory();
+    volatile struct queue_shared_memory *shared = get_queue_shared_memory();
     struct user_thread_info *thread_info = get_user_thread_info();
     INPUT_MESSAGE_SOURCE prev_source = thread_info->msg_source;
     struct received_message_info info, *old_info;
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index a5ef75c194c..41b3f433e98 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -368,11 +368,11 @@ static void thread_detach(void)
         thread_info->desktop_shared_memory = NULL;
     }
 
-    if (thread_info->thread_shared_map)
+    if (thread_info->queue_shared_map)
     {
-        CloseHandle( thread_info->thread_shared_map );
-        thread_info->thread_shared_map = NULL;
-        thread_info->thread_shared_memory = NULL;
+        CloseHandle( thread_info->queue_shared_map );
+        thread_info->queue_shared_map = NULL;
+        thread_info->queue_shared_memory = NULL;
     }
 
     exiting_thread_id = 0;
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index 0e03685754f..2034ee63ab1 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -204,8 +204,8 @@ struct user_thread_info
     struct rawinput_thread_data  *rawinput;               /* RawInput thread local data / buffer */
     HANDLE                        desktop_shared_map;     /* HANDLE to server's desktop shared memory */
     struct desktop_shared_memory *desktop_shared_memory;  /* Ptr to server's desktop shared memory */
-    HANDLE                        thread_shared_map;      /* HANDLE to server's thread shared memory */
-    struct thread_shared_memory  *thread_shared_memory;   /* Ptr to server's thread shared memory */
+    HANDLE                        queue_shared_map;       /* HANDLE to server's thread queue shared memory */
+    struct queue_shared_memory   *queue_shared_memory;     /* Ptr to server's thread queue shared memory */
 };
 
 C_ASSERT( sizeof(struct user_thread_info) <= sizeof(((TEB *)0)->Win32ClientInfo) );
@@ -291,7 +291,7 @@ extern BOOL WINPROC_call_window( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lPar
 extern const WCHAR *CLASS_GetVersionedName(const WCHAR *classname, UINT *basename_offset,
         WCHAR *combined, BOOL register_class) DECLSPEC_HIDDEN;
 extern volatile struct desktop_shared_memory *get_desktop_shared_memory( void ) DECLSPEC_HIDDEN;
-extern volatile struct thread_shared_memory *get_thread_shared_memory( void ) DECLSPEC_HIDDEN;
+extern volatile struct queue_shared_memory *get_queue_shared_memory( void ) DECLSPEC_HIDDEN;
 
 /* message spy definitions */
 
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index 47e5eb1e61a..66335b27812 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -160,20 +160,20 @@ volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
 }
 
 
-volatile struct thread_shared_memory *get_thread_shared_memory( void )
+volatile struct queue_shared_memory *get_queue_shared_memory( void )
 {
     static const WCHAR dir_thread_mapsW[] = {'\\','K','e','r','n','e','l','O','b','j','e','c','t','s',
                                              '\\','_','_','w','i','n','e','_','t','h','r','e','a','d','_','m','a','p','p','i','n','g','s',
-                                             '\\','%','0','8','x',0};
+                                             '\\','%','0','8','x','-','q','u','e','u','e',0};
     struct user_thread_info *thread_info = get_user_thread_info();
     WCHAR buf[MAX_PATH];
 
-    if (thread_info->thread_shared_memory) return thread_info->thread_shared_memory;
+    if (thread_info->queue_shared_memory) return thread_info->queue_shared_memory;
 
     swprintf( buf, ARRAY_SIZE(buf), dir_thread_mapsW, GetCurrentThreadId() );
-    map_shared_memory_section( buf, sizeof(struct thread_shared_memory), NULL,
-                               &thread_info->thread_shared_map, (void **)&thread_info->thread_shared_memory );
-    return thread_info->thread_shared_memory;
+    map_shared_memory_section( buf, sizeof(struct queue_shared_memory), NULL,
+                               &thread_info->queue_shared_map, (void **)&thread_info->queue_shared_memory );
+    return thread_info->queue_shared_memory;
 }
 
 
diff --git a/server/protocol.def b/server/protocol.def
index c97c1105466..b7d281e15ff 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -867,7 +867,7 @@ struct desktop_shared_memory
     unsigned char        keystate[256];    /* asynchronous key state */
 };
 
-struct thread_shared_memory
+struct queue_shared_memory
 {
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     unsigned int         wake_bits;
diff --git a/server/queue.c b/server/queue.c
index 9cc4621b538..7a6b1ec9302 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -146,7 +146,7 @@ struct msg_queue
     int                    fsync_in_msgwait; /* our thread is currently waiting on us */
     struct fast_sync      *fast_sync;       /* fast synchronization object */
     int                    in_fast_wait;    /* are we in a fast wait? */
-    volatile struct thread_shared_memory *shared;  /* thread shared memory ptr */
+    volatile struct queue_shared_memory *shared;  /* thread queue shared memory ptr */
 };
 
 struct hotkey
@@ -322,7 +322,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
         queue->fsync_in_msgwait = 0;
         queue->fast_sync       = NULL;
         queue->in_fast_wait    = 0;
-        queue->shared          = thread->shared;
+        queue->shared          = thread->queue_shared;
         list_init( &queue->send_result );
         list_init( &queue->callback_result );
         list_init( &queue->pending_timers );
diff --git a/server/thread.c b/server/thread.c
index d72036a8857..9191034a461 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -299,8 +299,8 @@ static inline void init_thread_structure( struct thread *thread )
     thread->desc_len        = 0;
     thread->exit_poll       = NULL;
     thread->fast_sync       = NULL;
-    thread->shared_mapping  = NULL;
-    thread->shared          = NULL;
+    thread->queue_shared_mapping = NULL;
+    thread->queue_shared         = NULL;
 
     thread->creation_time = current_time;
     thread->exit_time     = 0;
@@ -349,7 +349,7 @@ static struct context *create_thread_context( struct thread *thread )
 }
 
 
-static volatile void *init_thread_mapping( struct thread *thread )
+static volatile void *init_queue_mapping( struct thread *thread )
 {
     struct unicode_str name;
     struct object *dir = create_thread_map_directory();
@@ -358,16 +358,16 @@ static volatile void *init_thread_mapping( struct thread *thread )
 
     if (!dir) return NULL;
 
-    sprintf( nameA, "%08x", thread->id );
+    sprintf( nameA, "%08x-queue", thread->id );
     nameW = ascii_to_unicode_str( nameA, &name );
 
-    thread->shared_mapping = create_shared_mapping( dir, &name, sizeof(struct thread_shared_memory),
-                                                    NULL, (void **)&thread->shared );
+    thread->queue_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct queue_shared_memory),
+                                                          NULL, (void **)&thread->queue_shared );
     release_object( dir );
-    if (thread->shared) memset( (void *)thread->shared, 0, sizeof(*thread->shared) );
+    if (thread->queue_shared) memset( (void *)thread->queue_shared, 0, sizeof(*thread->queue_shared) );
 
     free( nameW );
-    return thread->shared;
+    return thread->queue_shared;
 }
 
 
@@ -436,7 +436,7 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
         release_object( thread );
         return NULL;
     }
-    if (!init_thread_mapping( thread ))
+    if (!init_queue_mapping( thread ))
     {
         release_object( thread );
         return NULL;
@@ -514,8 +514,8 @@ static void cleanup_thread( struct thread *thread )
         }
     }
     free( thread->desc );
-    if (thread->shared_mapping) release_object( thread->shared_mapping );
-    thread->shared_mapping = NULL;
+    if (thread->queue_shared_mapping) release_object( thread->queue_shared_mapping );
+    thread->queue_shared_mapping = NULL;
     thread->req_data = NULL;
     thread->reply_data = NULL;
     thread->request_fd = NULL;
diff --git a/server/thread.h b/server/thread.h
index c3d40f88843..b1e3278c483 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -95,8 +95,8 @@ struct thread
     WCHAR                 *desc;          /* thread description string */
     struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
     struct fast_sync      *fast_sync;     /* fast synchronization object */
-    struct object         *shared_mapping;         /* thread shared memory mapping */
-    volatile struct thread_shared_memory *shared;  /* thread shared memory ptr */
+    struct object         *queue_shared_mapping; /* thread queue shared memory mapping */
+    volatile struct queue_shared_memory *queue_shared;  /* thread queue shared memory ptr */
 };
 
 extern struct thread *current;

