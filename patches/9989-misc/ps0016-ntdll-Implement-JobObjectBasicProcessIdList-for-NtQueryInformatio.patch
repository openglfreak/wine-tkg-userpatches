From: "Gabriel Ivăncescu" <gabrielopcode@gmail.com>
Subject: [PATCH resend] ntdll: Implement JobObjectBasicProcessIdList for NtQueryInformationJobObject.
Message-Id: <e854e9f472588204f87c3abd66cd7898306bfe49.1605274368.git.gabrielopcode@gmail.com>
Date: Fri, 13 Nov 2020 15:33:54 +0200

Signed-off-by: Gabriel Ivăncescu <gabrielopcode@gmail.com>
---
 dlls/kernel32/tests/process.c |  9 ---------
 dlls/ntdll/unix/sync.c        | 26 ++++++++++++++++++++++++--
 server/process.c              | 23 +++++++++++++++++++++++
 server/protocol.def           |  9 +++++++++
 4 files changed, 56 insertions(+), 11 deletions(-)

diff --git a/dlls/kernel32/tests/process.c b/dlls/kernel32/tests/process.c
index 7c6a0ff..afc7126 100644
--- a/dlls/kernel32/tests/process.c
+++ b/dlls/kernel32/tests/process.c
@@ -2671,15 +2671,11 @@ static void test_QueryInformationJobObject(void)
     pid_list->NumberOfProcessIdsInList  = 42;
     ret = QueryInformationJobObject(job, JobObjectBasicProcessIdList, pid_list,
                                     FIELD_OFFSET(JOBOBJECT_BASIC_PROCESS_ID_LIST, ProcessIdList[1]), &ret_len);
-    todo_wine
     ok(!ret, "QueryInformationJobObject expected failure\n");
-    todo_wine
     expect_eq_d(ERROR_MORE_DATA, GetLastError());
     if (ret)
     {
-        todo_wine
         expect_eq_d(42, pid_list->NumberOfAssignedProcesses);
-        todo_wine
         expect_eq_d(42, pid_list->NumberOfProcessIdsInList);
     }
 
@@ -2694,17 +2690,12 @@ static void test_QueryInformationJobObject(void)
         {
             ULONG_PTR *list = pid_list->ProcessIdList;
 
-            todo_wine
             ok(ret_len == FIELD_OFFSET(JOBOBJECT_BASIC_PROCESS_ID_LIST, ProcessIdList[2]),
                "QueryInformationJobObject returned ret_len=%u\n", ret_len);
 
-            todo_wine
             expect_eq_d(2, pid_list->NumberOfAssignedProcesses);
-            todo_wine
             expect_eq_d(2, pid_list->NumberOfProcessIdsInList);
-            todo_wine
             expect_eq_d(pi[0].dwProcessId, list[0]);
-            todo_wine
             expect_eq_d(pi[1].dwProcessId, list[1]);
         }
     }
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index bba7af7..e6273f8 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -780,10 +780,32 @@ NTSTATUS WINAPI NtQueryInformationJobObject( HANDLE handle, JOBOBJECTINFOCLASS c
     case JobObjectBasicProcessIdList:
     {
         JOBOBJECT_BASIC_PROCESS_ID_LIST *process = info;
+        DWORD count, i;
 
         if (len < sizeof(*process)) return STATUS_INFO_LENGTH_MISMATCH;
-        memset( process, 0, sizeof(*process) );
-        if (ret_len) *ret_len = sizeof(*process);
+
+        count  = len - FIELD_OFFSET(JOBOBJECT_BASIC_PROCESS_ID_LIST, ProcessIdList);
+        count /= sizeof(process->ProcessIdList[0]);
+
+        SERVER_START_REQ( query_job_pids )
+        {
+            req->job = wine_server_user_handle(handle);
+            wine_server_set_reply(req, process, count * sizeof(process_id_t));
+            if ((ret = wine_server_call(req)) != STATUS_SUCCESS)
+                return ret;
+            if (count < reply->count)
+                return STATUS_MORE_ENTRIES;
+            count = reply->count;
+        }
+        SERVER_END_REQ;
+
+        /* start from the end to not overwrite */
+        for (i = count; i--;)
+            process->ProcessIdList[i] = ((process_id_t*)process)[i];
+        process->NumberOfAssignedProcesses = count;
+        process->NumberOfProcessIdsInList = count;
+
+        if (ret_len) *ret_len = (char*)(&process->ProcessIdList[count]) - (char*)process;
         return STATUS_SUCCESS;
     }
     case JobObjectExtendedLimitInformation:
diff --git a/server/process.c b/server/process.c
index 1786493..5c330bd 100644
--- a/server/process.c
+++ b/server/process.c
@@ -1739,6 +1739,29 @@ DECL_HANDLER(process_in_job)
     release_object( process );
 }
 
+/* get a list of the pids associated with the job */
+DECL_HANDLER(query_job_pids)
+{
+    struct job *job = get_job_obj( current->process, req->job, JOB_OBJECT_QUERY );
+    struct process *process;
+    process_id_t *data;
+    data_size_t len;
+
+    if (!job) return;
+
+    reply->count = job->num_processes;
+    len = min( get_reply_max_size(), job->num_processes * sizeof(*data) );
+    if (len && ((data = set_reply_data_size( len ))))
+    {
+        process_id_t *end = data + len;
+        LIST_FOR_EACH_ENTRY( process, &job->process_list, struct process, job_entry )
+        {
+            if (data >= end) break;
+            *data++ = process->id;
+        }
+    }
+}
+
 /* retrieve information about a job */
 DECL_HANDLER(get_job_info)
 {
diff --git a/server/protocol.def b/server/protocol.def
index a3708f2..4bfe6b2 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3615,6 +3615,15 @@ struct handle_info
 @END
 
 
+/* Query a list of pids associated with the job */
+@REQ(query_job_pids)
+    obj_handle_t job;             /* handle to the job */
+@REPLY
+    data_size_t count;            /* number of processes associated with the job */
+    VARARG(pids,uints);           /* list of pids */
+@END
+
+
 /* Set limit flags on a job */
 @REQ(set_job_limits)
     obj_handle_t handle;          /* handle to the job */

-- 
2.21.0

