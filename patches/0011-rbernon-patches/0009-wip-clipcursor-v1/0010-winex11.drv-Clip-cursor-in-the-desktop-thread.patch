From 7925ea1112ae8d2a1012c0afa80d3fd267cf1e36 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 7 May 2022 01:45:29 +0200
Subject: [PATCH 10/13] winex11.drv: Clip cursor in the desktop thread.

---
 dlls/winex11.drv/event.c  |   2 +
 dlls/winex11.drv/mouse.c  | 110 ++++++++++----------------------------
 dlls/winex11.drv/window.c |   6 +--
 dlls/winex11.drv/x11drv.h |   7 +--
 4 files changed, 32 insertions(+), 93 deletions(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -867,6 +867,7 @@ BOOL x11drv_handle_focus_in_event( HWND hwnd, XEvent *xev, Time time )
         break;
     case NotifyNormal:
         keyboard_grabbed = FALSE;
+        send_notify_message( NtUserGetDesktopWindow(), WM_X11DRV_DESKTOP_CLIP_CURSOR, FALSE, FALSE );
         break;
     case NotifyUngrab:
         keyboard_grabbed = FALSE;
@@ -958,6 +959,7 @@ BOOL x11drv_handle_focus_out_event( HWND hwnd, XEvent *xev, Time time )
         break;
     case NotifyWhileGrabbed:
         keyboard_grabbed = TRUE;
+        send_notify_message( NtUserGetDesktopWindow(), WM_X11DRV_DESKTOP_CLIP_CURSOR, FALSE, TRUE );
         break;
     case NotifyGrab:
         keyboard_grabbed = TRUE;
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -441,21 +441,17 @@ static BOOL grab_clipping_window( const RECT *clip )
     static const WCHAR messageW[] = {'M','e','s','s','a','g','e',0};
     struct x11drv_thread_data *data = x11drv_thread_data();
     UNICODE_STRING class_name;
-    HCURSOR cursor;
+    CURSORINFO pci;
     Window clip_window;
-    HWND msg_hwnd = 0;
     POINT pos;
 
-    if (NtUserGetWindowThread( NtUserGetDesktopWindow(), NULL ) == GetCurrentThreadId())
-        return TRUE;  /* don't clip in the desktop process */
-
     if (!data) return FALSE;
     if (!(clip_window = init_clip_window())) return TRUE;
 
     RtlInitUnicodeString( &class_name, messageW );
-    if (!(msg_hwnd = NtUserCreateWindowEx( 0, &class_name, &class_name, NULL, 0, 0, 0, 0, 0,
-                                           HWND_MESSAGE, 0, NtCurrentTeb()->Peb->ImageBaseAddress,
-                                           NULL, 0, NULL, 0, FALSE )))
+    if (!data->clip_hwnd && !(data->clip_hwnd = NtUserCreateWindowEx( 0, &class_name, &class_name, NULL, 0, 0, 0, 0, 0,
+                                                                      HWND_MESSAGE, 0, NtCurrentTeb()->Peb->ImageBaseAddress,
+                                                                      NULL, 0, NULL, 0, FALSE )))
         return TRUE;
 
     if (keyboard_grabbed)
@@ -476,14 +472,19 @@ static BOOL grab_clipping_window( const RECT *clip )
 
     TRACE( "clipping to %s win %lx\n", wine_dbgstr_rect(clip), clip_window );
 
-    if (!data->clip_hwnd) XUnmapWindow( data->display, clip_window );
     pos = virtual_screen_to_root( clip->left, clip->top );
     XMoveResizeWindow( data->display, clip_window, pos.x, pos.y,
                        max( 1, clip->right - clip->left ), max( 1, clip->bottom - clip->top ) );
-    XMapWindow( data->display, clip_window );
+
+    if (!clipping_cursor)
+    {
+        XMapWindow( data->display, clip_window );
+        NtUserGetCursorInfo( &pci );
+        set_window_cursor( clip_window, (pci.flags & CURSOR_SHOWING) ? pci.hCursor : 0 );
+    }
 
     /* if the rectangle is shrinking we may get a pointer warp */
-    if (!data->clip_hwnd || clip->left > clip_rect.left || clip->top > clip_rect.top ||
+    if (!clipping_cursor || clip->left > clip_rect.left || clip->top > clip_rect.top ||
         clip->right < clip_rect.right || clip->bottom < clip_rect.bottom)
         data->warp_serial = NextRequest( data->display );
 
@@ -492,24 +493,16 @@ static BOOL grab_clipping_window( const RECT *clip )
                        GrabModeAsync, GrabModeAsync, clip_window, None, CurrentTime ))
         clipping_cursor = TRUE;
 
-    SERVER_START_REQ( set_cursor )
-    {
-        req->flags = 0;
-        wine_server_call( req );
-        cursor = reply->prev_count >= 0 ? wine_server_ptr_handle( reply->prev_handle ) : 0;
-    }
-    SERVER_END_REQ;
-    set_window_cursor( clip_window, cursor );
-
     if (!clipping_cursor)
     {
         X11DRV_XInput2_Enable( data->display, None, 0 );
-        NtUserDestroyWindow( msg_hwnd );
+        XUnmapWindow( data->display, clip_window );
+        NtUserDestroyWindow( data->clip_hwnd );
+        data->clip_hwnd = NULL;
         return FALSE;
     }
     clip_rect = *clip;
-    data->clip_hwnd = msg_hwnd;
-    send_notify_message( NtUserGetDesktopWindow(), WM_X11DRV_CLIP_CURSOR_NOTIFY, 0, (LPARAM)msg_hwnd );
+    TRACE("new clip rect: %s\n", wine_dbgstr_rect(&clip_rect));
     return TRUE;
 #else
     WARN( "XInput2 was not available at compile time\n" );
@@ -524,16 +517,19 @@ static BOOL grab_clipping_window( const RECT *clip )
  */
 void ungrab_clipping_window(void)
 {
-    Display *display = thread_init_display();
+    struct x11drv_thread_data *data = x11drv_init_thread_data();
     Window clip_window = init_clip_window();
 
     if (!clip_window) return;
 
     TRACE( "no longer clipping\n" );
-    XUnmapWindow( display, clip_window );
-    if (clipping_cursor) XUngrabPointer( display, CurrentTime );
+    XUnmapWindow( data->display, clip_window );
+    if (clipping_cursor) XUngrabPointer( data->display, CurrentTime );
     clipping_cursor = FALSE;
-    send_notify_message( NtUserGetDesktopWindow(), WM_X11DRV_CLIP_CURSOR_NOTIFY, 0, 0 );
+    if (data->clip_hwnd) NtUserDestroyWindow( data->clip_hwnd );
+    data->clip_hwnd = NULL;
+    data->clip_reset = NtGetTickCount();
+    X11DRV_XInput2_Enable( data->display, None, 0 );
 }
 
 /***********************************************************************
@@ -561,42 +557,6 @@ void retry_grab_clipping_window(void)
         NtUserClipCursor( &last_clip_rect );
 }
 
-/***********************************************************************
- *             clip_cursor_notify
- *
- * Notification function called upon receiving a WM_X11DRV_CLIP_CURSOR_NOTIFY.
- */
-LRESULT clip_cursor_notify( HWND hwnd, HWND prev_clip_hwnd, HWND new_clip_hwnd )
-{
-    struct x11drv_thread_data *data = x11drv_init_thread_data();
-
-    if (hwnd == NtUserGetDesktopWindow())  /* change the clip window stored in the desktop process */
-    {
-        static HWND clip_hwnd;
-
-        HWND prev = clip_hwnd;
-        clip_hwnd = new_clip_hwnd;
-        if (prev || new_clip_hwnd) TRACE( "clip hwnd changed from %p to %p\n", prev, new_clip_hwnd );
-        if (prev) send_notify_message( prev, WM_X11DRV_CLIP_CURSOR_NOTIFY, (WPARAM)prev, 0 );
-    }
-    else if (hwnd == data->clip_hwnd)  /* this is a notification that clipping has been reset */
-    {
-        TRACE( "clip hwnd reset from %p\n", hwnd );
-        data->clip_hwnd = 0;
-        data->clip_reset = NtGetTickCount();
-        X11DRV_XInput2_Enable( data->display, None, 0 );
-        NtUserDestroyWindow( hwnd );
-    }
-    else if (prev_clip_hwnd)
-    {
-        /* This is a notification send by the desktop window to an old
-         * dangling clip window.
-         */
-        TRACE( "destroying old clip hwnd %p\n", prev_clip_hwnd );
-        NtUserDestroyWindow( prev_clip_hwnd );
-    }
-    return 0;
-}
 
 /***********************************************************************
  *		clip_fullscreen_window
@@ -1621,26 +1581,12 @@ BOOL X11DRV_ClipCursor( LPCRECT clip )
  * Function called upon receiving a WM_X11DRV_DESKTOP_CLIP_CURSOR.
  */
 void x11drv_desktop_clip_cursor( BOOL fullscreen, BOOL reset )
-{
-    send_notify_message( NtUserGetForegroundWindow(), WM_X11DRV_CLIP_CURSOR_REQUEST, fullscreen, reset );
-}
-
-/***********************************************************************
- *             clip_cursor_request
- *
- * Function called upon receiving a WM_X11DRV_CLIP_CURSOR_REQUEST.
- */
-LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset )
 {
     RECT clip, virtual_rect;
     HWND foreground = NtUserGetForegroundWindow();
 
-    if (hwnd == NtUserGetDesktopWindow())
-        WARN( "ignoring clip cursor request on desktop window.\n" );
-    else if (hwnd != foreground)
-        WARN( "ignoring clip cursor request on non-foreground window.\n" );
-    else if (fullscreen)
-        clip_fullscreen_window( hwnd, reset );
+    if (fullscreen)
+        clip_fullscreen_window( foreground, reset );
     else if (!grab_pointer)
         ungrab_clipping_window();
     else
@@ -1653,7 +1599,7 @@ LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset )
         if (clip.left > virtual_rect.left || clip.right < virtual_rect.right ||
             clip.top > virtual_rect.top || clip.bottom < virtual_rect.bottom)
         {
-            if (grab_clipping_window( &clip )) return 0;
+            if (grab_clipping_window( &clip )) return;
         }
         else /* if currently clipping, check if we should switch to fullscreen clipping */
         {
@@ -1661,14 +1607,12 @@ LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset )
             if (data && data->clip_hwnd)
             {
                 if (EqualRect( &clip, &clip_rect ) || clip_fullscreen_window( foreground, TRUE ))
-                    return 0;
+                    return;
             }
         }
 
         ungrab_clipping_window();
     }
-
-    return 0;
 }
 
 /***********************************************************************
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -3190,21 +3190,17 @@ LRESULT X11DRV_WindowMessage( HWND hwnd, UINT msg, WPARAM wp, LPARAM lp )
             release_win_data( data );
             if (win) set_window_cursor( win, (HCURSOR)lp );
         }
-        if (clipping_cursor) set_window_cursor( x11drv_thread_data()->clip_window, (HCURSOR)lp );
         return 0;
     case WM_X11DRV_DESKTOP_SET_HICON_CURSOR:
         x11drv_desktop_set_hicon_cursor( (HICON)wp, (Cursor)lp );
         return 0;
     case WM_X11DRV_DESKTOP_SET_WINDOW_CURSOR:
+        if (clipping_cursor) set_window_cursor( x11drv_thread_data()->clip_window, (HCURSOR)lp );
         send_notify_message( (HWND)wp, WM_X11DRV_SET_CURSOR, 0, lp );
         return 0;
     case WM_X11DRV_DESKTOP_CLIP_CURSOR:
         x11drv_desktop_clip_cursor( (BOOL)wp, (BOOL)lp );
         return 0;
-    case WM_X11DRV_CLIP_CURSOR_NOTIFY:
-        return clip_cursor_notify( hwnd, (HWND)wp, (HWND)lp );
-    case WM_X11DRV_CLIP_CURSOR_REQUEST:
-        return clip_cursor_request( hwnd, (BOOL)wp, (BOOL)lp );
     case WM_X11DRV_DELETE_TAB:
         taskbar_delete_tab( hwnd );
         return 0;
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -596,10 +596,9 @@ enum x11drv_window_messages
     WM_X11DRV_DESKTOP_SET_HICON_CURSOR,
     WM_X11DRV_DESKTOP_SET_WINDOW_CURSOR,
     WM_X11DRV_DESKTOP_CLIP_CURSOR,
-    WM_X11DRV_CLIP_CURSOR_NOTIFY,
-    WM_X11DRV_CLIP_CURSOR_REQUEST,
     WM_X11DRV_DELETE_TAB,
-    WM_X11DRV_ADD_TAB
+    WM_X11DRV_ADD_TAB,
+    WM_X11DRV_CLIP_CURSOR_REQUEST,
 };
 
 /* _NET_WM_STATE properties that we keep track of */
@@ -699,8 +698,6 @@ extern XContext cursor_context DECLSPEC_HIDDEN;
 extern void X11DRV_SetFocus( HWND hwnd ) DECLSPEC_HIDDEN;
 extern BOOL X11DRV_SetForegroundWindow( HWND hwnd ) DECLSPEC_HIDDEN;
 extern void set_window_cursor( Window window, HCURSOR handle ) DECLSPEC_HIDDEN;
-extern LRESULT clip_cursor_notify( HWND hwnd, HWND prev_clip_hwnd, HWND new_clip_hwnd ) DECLSPEC_HIDDEN;
-extern LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset ) DECLSPEC_HIDDEN;
 extern void x11drv_desktop_clip_cursor( BOOL fullscreen, BOOL reset ) DECLSPEC_HIDDEN;
 extern void ungrab_clipping_window(void) DECLSPEC_HIDDEN;
 extern void reset_clipping_window(void) DECLSPEC_HIDDEN;
-- 
2.37.1

