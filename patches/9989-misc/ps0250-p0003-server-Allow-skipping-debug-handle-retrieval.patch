From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Subject: [PATCH v2 3/3] server: Allow skipping debug handle retrieval in get_process_debug_info.
Message-Id: <7d4868da-09a8-cb8b-ed5f-1d628ee5eefb@gmail.com>
Date: Wed, 8 Dec 2021 00:29:09 +0900
In-Reply-To: <e92663f3-06e7-5d6a-ef6d-f2d8677eff5e@gmail.com>
References: <e92663f3-06e7-5d6a-ef6d-f2d8677eff5e@gmail.com>

Make retrieval of debug port object handle optional.  Also, skip debug
port object handle retrieval if serving requests that don't need it
(i.e. ProcessDebugPort and ProcessDebugFlags).

This also eliminates the extra round trip to the server for closing the
unneeded debug port object handle.

Signed-off-by: Jinoh Kang <jinoh.kang.kr@gmail.com>
---
 dlls/ntdll/unix/process.c | 13 ++++---------
 server/process.c          |  2 +-
 server/protocol.def       |  1 +
 3 files changed, 6 insertions(+), 10 deletions(-)

diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
index 4433f881f4e..c631c072b79 100644
--- a/dlls/ntdll/unix/process.c
+++ b/dlls/ntdll/unix/process.c
@@ -1318,19 +1318,16 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
             if (!info) ret = STATUS_ACCESS_VIOLATION;
             else
             {
-                HANDLE debug;
-
                 SERVER_START_REQ(get_process_debug_info)
                 {
                     req->handle = wine_server_obj_handle( handle );
+                    req->want_debug_obj = 0;
                     ret = wine_server_call( req );
-                    debug = wine_server_ptr_handle( reply->debug );
                 }
                 SERVER_END_REQ;
                 if (ret == STATUS_SUCCESS)
                 {
                     *(DWORD_PTR *)info = ~0ul;
-                    NtClose( debug );
                 }
                 else if (ret == STATUS_PORT_NOT_SET)
                 {
@@ -1349,18 +1346,15 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
             if (!info) ret = STATUS_ACCESS_VIOLATION;
             else
             {
-                HANDLE debug;
-
                 SERVER_START_REQ(get_process_debug_info)
                 {
                     req->handle = wine_server_obj_handle( handle );
+                    req->want_debug_obj = 0;
                     ret = wine_server_call( req );
-                    debug = wine_server_ptr_handle( reply->debug );
                     *(DWORD *)info = reply->debug_children;
                 }
                 SERVER_END_REQ;
-                if (ret == STATUS_SUCCESS) NtClose( debug );
-                else if (ret == STATUS_PORT_NOT_SET) ret = STATUS_SUCCESS;
+                if (ret == STATUS_PORT_NOT_SET) ret = STATUS_SUCCESS;
             }
         }
         else ret = STATUS_INFO_LENGTH_MISMATCH;
@@ -1382,6 +1376,7 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
                 SERVER_START_REQ(get_process_debug_info)
                 {
                     req->handle = wine_server_obj_handle( handle );
+                    req->want_debug_obj = 1;
                     ret = wine_server_call( req );
                     *(HANDLE *)info = wine_server_ptr_handle( reply->debug );
                 }
diff --git a/server/process.c b/server/process.c
index 63a43dcc245..8975ea92014 100644
--- a/server/process.c
+++ b/server/process.c
@@ -1592,7 +1592,7 @@ DECL_HANDLER(get_process_debug_info)
 
     reply->debug_children = process->debug_children;
     if (!process->debug_obj) set_error( STATUS_PORT_NOT_SET );
-    else reply->debug = alloc_handle( current->process, process->debug_obj, MAXIMUM_ALLOWED, 0 );
+    else if (req->want_debug_obj) reply->debug = alloc_handle( current->process, process->debug_obj, MAXIMUM_ALLOWED, 0 );
     release_object( process );
 }
 
diff --git a/server/protocol.def b/server/protocol.def
index 497a8b9a066..fc2e825d2bf 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -1041,6 +1041,7 @@ struct input_shared_memory
 /* Retrieve debug information about a process */
 @REQ(get_process_debug_info)
     obj_handle_t handle;           /* process handle */
+    int          want_debug_obj;   /* want debug port object? */
 @REPLY
     obj_handle_t debug;            /* handle to debug port */
     int          debug_children;   /* inherit debugger to child processes */

-- 
2.35.1

