From: Eric Pouech <eric.pouech@gmail.com>
Subject: [PATCH 2/4] dlls/kernel32/tests: add tests about CreateProcess on CUI programs with console inheritance
Message-Id: <164450491611.734344.4919953909409913639.stgit@euterpe>
Date: Thu, 10 Feb 2022 15:55:16 +0100
In-Reply-To: <164450483602.734344.17484220244981387052.stgit@euterpe>
References: <164450483602.734344.17484220244981387052.stgit@euterpe>

adding console_cui as a CUI submodule

Signed-off-by: Eric Pouech <eric.pouech@gmail.com>

---
 dlls/kernel32/tests/Makefile.in      |  4 ++
 dlls/kernel32/tests/console.c        | 56 ++++++++++++++++++++++++++++
 dlls/kernel32/tests/console_cui.c    | 31 +++++++++++++++
 dlls/kernel32/tests/console_cui.spec |  0
 dlls/kernel32/tests/Makefile.in      |  4 ++
 dlls/kernel32/tests/console.c        | 56 ++++++++++++++++++++++++++++
 dlls/kernel32/tests/console_cui.c    | 31 +++++++++++++++
 dlls/kernel32/tests/console_cui.spec |  0
 4 files changed, 91 insertions(+)
 create mode 100644 dlls/kernel32/tests/console_cui.c
 create mode 100644 dlls/kernel32/tests/console_cui.spec

diff --git a/dlls/kernel32/tests/Makefile.in b/dlls/kernel32/tests/Makefile.in
index 11111111111..11111111111 100644
--- a/dlls/kernel32/tests/Makefile.in
+++ b/dlls/kernel32/tests/Makefile.in
@@ -4,6 +4,8 @@ TESTDLL   = kernel32.dll
 # icmp is for testing export forwarding (to iphlpapi)
 IMPORTS   = user32 advapi32 icmp
 
+console_cui_EXTRADLLFLAGS = -mconsole -municode
+
 SOURCES = \
 	actctx.c \
 	atom.c \
@@ -11,6 +13,8 @@ SOURCES = \
 	codepage.c \
 	comm.c \
 	console.c \
+	console_cui.c \
+	console_cui.spec \
 	debugger.c \
 	directory.c \
 	drive.c \
diff --git a/dlls/kernel32/tests/console.c b/dlls/kernel32/tests/console.c
index 11111111111..11111111111 100644
--- a/dlls/kernel32/tests/console.c
+++ b/dlls/kernel32/tests/console.c
@@ -4656,6 +4656,61 @@ static void test_pseudo_console(void)
     pClosePseudoConsole(pseudo_console);
 }
 
+static void extract_resource(const char *name, const char *where)
+{
+    DWORD written;
+    HANDLE file;
+    HRSRC res;
+    void *ptr;
+
+    trace("foobar %s %s\n", name, where);
+    file = CreateFileA(where, GENERIC_READ|GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, 0);
+    ok(file != INVALID_HANDLE_VALUE, "file creation failed, at %s, error %u\n", where, GetLastError());
+
+    res = FindResourceA(NULL, name, "TESTDLL");
+    ok( res != 0, "couldn't find resource\n" );
+    ptr = LockResource( LoadResource( GetModuleHandleA(NULL), res ));
+    WriteFile( file, ptr, SizeofResource( GetModuleHandleA(NULL), res ), &written, NULL );
+    ok( written == SizeofResource( GetModuleHandleA(NULL), res ), "couldn't write resource\n" );
+    CloseHandle( file );
+}
+
+static void test_CreateProcess_CUI(void)
+{
+    STARTUPINFOA si = { sizeof(si) };
+    PROCESS_INFORMATION info;
+    char buf[MAX_PATH];
+    BOOL res;
+    DWORD ec = 255;
+
+    FreeConsole();
+
+    GetTempPathA(ARRAY_SIZE(buf), buf);
+    strcat(buf, "console_cui.exe");
+    extract_resource("console_cui.exe", buf);
+
+    res = CreateProcessA(NULL, buf, NULL, NULL, FALSE, DETACHED_PROCESS, NULL, NULL, &si, &info);
+    ok(res, "CreateProcess failed: %u %s\n", GetLastError(), buf);
+    CloseHandle(info.hThread);
+
+    res = WaitForSingleObject(info.hProcess, 30000) == WAIT_OBJECT_0 &&
+            GetExitCodeProcess(info.hProcess, &ec);
+    ok(res, "Couldn't grab exit code %u\n", GetLastError());
+    ok(!res || ec == 1, "Got unexpected error code %u\n", ec);
+    CloseHandle(info.hProcess);
+
+    res = CreateProcessA(NULL, buf, NULL, NULL, FALSE, 0, NULL, NULL, &si, &info);
+    ok(res, "CreateProcess failed: %u\n", GetLastError());
+    CloseHandle(info.hThread);
+
+    res = WaitForSingleObject(info.hProcess, 30000) == WAIT_OBJECT_0 &&
+            GetExitCodeProcess(info.hProcess, &ec);
+    res = GetExitCodeProcess(info.hProcess, &ec);
+    ok(res, "Couldn't grab exit code %u\n", GetLastError());
+    todo_wine ok(!res || ec == 0, "Got unexpected error code %u\n", ec);
+    CloseHandle(info.hProcess);
+}
+
 START_TEST(console)
 {
     HANDLE hConIn, hConOut, revert_output = NULL, unbound_output;
@@ -4874,6 +4929,7 @@ START_TEST(console)
         test_AttachConsole(hConOut);
         test_AllocConsole();
         test_FreeConsole();
+        test_CreateProcess_CUI();
     }
     else if (revert_output) SetConsoleActiveScreenBuffer(revert_output);
 
diff --git a/dlls/kernel32/tests/console_cui.c b/dlls/kernel32/tests/console_cui.c
new file mode 100644
index 00000000000..11111111111
--- /dev/null
+++ b/dlls/kernel32/tests/console_cui.c
@@ -0,0 +1,31 @@
+/*
+ * a CUI application for testing
+ *
+ * Copyright 2022 Eric Pouech
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <stdarg.h>
+
+#include "windef.h"
+#include "winbase.h"
+#include "wincon.h"
+
+int WINAPI wWinMain( HINSTANCE inst, HINSTANCE prev, WCHAR *cmdline, INT show )
+{
+    /* We assume GetConsoleCP() returns 0 only when not attached to a console */
+    return GetConsoleCP() == 0;
+}
diff --git a/dlls/kernel32/tests/console_cui.spec b/dlls/kernel32/tests/console_cui.spec
new file mode 100644

index 00000000000..11111111111
