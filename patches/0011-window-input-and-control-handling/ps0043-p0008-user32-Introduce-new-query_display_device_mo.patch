From f2c827100c31babbbec034c3d3a9707e54026597 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Oct 2021 12:33:22 +0200
Subject: [PATCH 08/14] user32: Introduce new query_display_device_modes
 helper.

---
 dlls/user32/sysparams.c | 78 +++++++++++++++++++++++------------------
 1 file changed, 44 insertions(+), 34 deletions(-)

diff --git a/dlls/user32/sysparams.c b/dlls/user32/sysparams.c
index 11111111111..11111111111 100644
--- a/dlls/user32/sysparams.c
+++ b/dlls/user32/sysparams.c
@@ -1411,6 +1411,42 @@ static BOOL source_mode_exists(const DISPLAYCONFIG_MODE_INFO *modeinfo, UINT32 n
     return FALSE;
 }
 
+static LONG query_display_device_modes( const WCHAR *device_name, UINT32 output_id, LUID *gpu_luid, UINT32 flags,
+                                        UINT32 path_index, UINT32 *path_count, DISPLAYCONFIG_PATH_INFO *path,
+                                        UINT32 mode_index, UINT32 *mode_count, DISPLAYCONFIG_MODE_INFO *mode )
+{
+    DEVMODEW devmode = {.dmSize = sizeof(DEVMODEW)};
+    UINT32 source_mode_index;
+    LONG adapter_index;
+
+    if (!EnumDisplaySettingsW( device_name, ENUM_CURRENT_SETTINGS, &devmode )) return 0;
+    if (path_index == *path_count || mode_index == *mode_count) return -1;
+
+    path[path_index].flags = DISPLAYCONFIG_PATH_ACTIVE;
+    set_mode_target_info( &mode[mode_index], gpu_luid, output_id, flags, &devmode );
+    set_path_target_info( &(path[path_index].targetInfo), gpu_luid, output_id, mode_index, &devmode );
+
+    if (++mode_index == *mode_count) return -1;
+
+    /* Extract the adapter index from device_name to use as the source ID */
+    adapter_index = wcstol( device_name + lstrlenW( L"\\\\.\\DISPLAY" ), NULL, 10 ) - 1;
+
+    /* Multiple targets can be driven by the same source, ensure a mode
+     * hasn't already been added for this source.
+     */
+    if (source_mode_exists( mode, mode_index, adapter_index, &source_mode_index ))
+    {
+        set_path_source_info( &path[path_index].sourceInfo, gpu_luid, adapter_index, source_mode_index );
+        return 1;
+    }
+    else
+    {
+        set_mode_source_info( &mode[mode_index], gpu_luid, adapter_index, &devmode );
+        set_path_source_info( &path[path_index].sourceInfo, gpu_luid, adapter_index, mode_index );
+        return 2;
+    }
+}
+
 /***********************************************************************
  *              QueryDisplayConfig (USER32.@)
  */
@@ -1418,12 +1454,12 @@ LONG WINAPI QueryDisplayConfig(UINT32 flags, UINT32 *numpathelements, DISPLAYCON
                                UINT32 *numinfoelements, DISPLAYCONFIG_MODE_INFO *modeinfo,
                                DISPLAYCONFIG_TOPOLOGY_ID *topologyid)
 {
-    LONG adapter_index, ret;
+    LONG ret;
     HANDLE mutex;
     HDEVINFO devinfo;
     SP_DEVINFO_DATA device_data = {sizeof(device_data)};
     DWORD monitor_index = 0, state_flags, type;
-    UINT32 output_id, source_mode_index, path_index = 0, mode_index = 0;
+    UINT32 output_id, path_index = 0, mode_index = 0;
     LUID gpu_luid;
     WCHAR device_name[CCHDEVICENAME];
     DEVMODEW devmode;
@@ -1548,43 +1584,17 @@ LONG WINAPI QueryDisplayConfig(UINT32 flags, UINT32 *numpathelements, DISPLAYCON
                                        &type, (BYTE *)device_name, sizeof(device_name), NULL, 0))
             goto done;
 
-        memset(&devmode, 0, sizeof(devmode));
-        devmode.dmSize = sizeof(devmode);
-        if (!EnumDisplaySettingsW(device_name, ENUM_CURRENT_SETTINGS, &devmode))
-            goto done;
-
-        /* Extract the adapter index from device_name to use as the source ID */
-        adapter_index = wcstol(device_name + lstrlenW(L"\\\\.\\DISPLAY"), NULL, 10);
-        adapter_index--;
-
-        if (path_index == *numpathelements || mode_index == *numinfoelements)
+        ret = query_display_device_modes(device_name, output_id, &gpu_luid, flags,
+                                         path_index, numpathelements, pathinfo,
+                                         mode_index, numinfoelements, modeinfo);
+        if (ret < 0)
         {
             ret = ERROR_INSUFFICIENT_BUFFER;
             goto done;
         }
 
-        pathinfo[path_index].flags = DISPLAYCONFIG_PATH_ACTIVE;
-        set_mode_target_info(&modeinfo[mode_index], &gpu_luid, output_id, flags, &devmode);
-        set_path_target_info(&(pathinfo[path_index].targetInfo), &gpu_luid, output_id, mode_index, &devmode);
-
-        mode_index++;
-        if (mode_index == *numinfoelements)
-        {
-            ret = ERROR_INSUFFICIENT_BUFFER;
-            goto done;
-        }
-
-        /* Multiple targets can be driven by the same source, ensure a mode
-         * hasn't already been added for this source.
-         */
-        if (!source_mode_exists(modeinfo, mode_index, adapter_index, &source_mode_index))
-        {
-            set_mode_source_info(&modeinfo[mode_index], &gpu_luid, adapter_index, &devmode);
-            source_mode_index = mode_index;
-            mode_index++;
-        }
-        set_path_source_info(&(pathinfo[path_index].sourceInfo), &gpu_luid, adapter_index, source_mode_index);
-        path_index++;
+        path_index += 1;
+        mode_index += ret;
     }
 
     *numpathelements = path_index;
-- 
2.35.1

