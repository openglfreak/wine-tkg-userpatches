From 4a9d9d969252490fd57be3aa00b1548a9248ec43 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 3 Mar 2022 12:48:39 +0100
Subject: [PATCH 02/30] winegstreamer: Make read threads more consistent
 together.

---
 dlls/winegstreamer/media_source.c  | 39 ++++++++++-----------
 dlls/winegstreamer/quartz_parser.c | 19 ++++++-----
 dlls/winegstreamer/wm_reader.c     | 55 +++++++++++++-----------------
 3 files changed, 54 insertions(+), 59 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -597,10 +597,10 @@ static DWORD CALLBACK read_thread(void *arg)
     struct media_source *source = arg;
     IMFByteStream *byte_stream = source->byte_stream;
     size_t buffer_size = 4096;
+    void *buffer, *data;
     uint64_t file_size;
-    void *data;
 
-    if (!(data = malloc(buffer_size)))
+    if (!(buffer = malloc(buffer_size)))
         return 0;
 
     IMFByteStream_GetLength(byte_stream, &file_size);
@@ -609,8 +609,8 @@ static DWORD CALLBACK read_thread(void *arg)
 
     while (!source->read_thread_shutdown)
     {
+        ULONG ret_size = 0;
         uint64_t offset;
-        ULONG ret_size;
         uint32_t size;
         HRESULT hr;
 
@@ -622,32 +622,33 @@ static DWORD CALLBACK read_thread(void *arg)
         else if (offset + size >= file_size)
             size = file_size - offset;
 
+        if (!array_reserve(&buffer, &buffer_size, size, 1))
+            break;
+        data = buffer;
+
         /* Some IMFByteStreams (including the standard file-based stream) return
          * an error when reading past the file size. */
-        if (!size)
-        {
-            wg_parser_push_data(source->wg_parser, data, 0);
-            continue;
-        }
-
-        if (!array_reserve(&data, &buffer_size, size, 1))
-        {
-            free(data);
-            return 0;
-        }
 
-        ret_size = 0;
-
-        if (SUCCEEDED(hr = IMFByteStream_SetCurrentPosition(byte_stream, offset)))
+        if (!size)
+            hr = S_OK;
+        else if (SUCCEEDED(hr = IMFByteStream_SetCurrentPosition(byte_stream, offset)))
             hr = IMFByteStream_Read(byte_stream, data, size, &ret_size);
+
         if (FAILED(hr))
+        {
             ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
+            data = NULL;
+        }
         else if (ret_size != size)
+        {
             ERR("Unexpected short read: requested %u bytes, got %lu.\n", size, ret_size);
-        wg_parser_push_data(source->wg_parser, SUCCEEDED(hr) ? data : NULL, ret_size);
+            size = ret_size;
+        }
+
+        wg_parser_push_data(source->wg_parser, data, size);
     }
 
-    free(data);
+    free(buffer);
     TRACE("Media source is shutting down; exiting.\n");
     return 0;
 }
diff --git a/dlls/winegstreamer/quartz_parser.c b/dlls/winegstreamer/quartz_parser.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/quartz_parser.c
+++ b/dlls/winegstreamer/quartz_parser.c
@@ -870,9 +870,9 @@ static DWORD CALLBACK read_thread(void *arg)
     struct parser *filter = arg;
     LONGLONG file_size, unused;
     size_t buffer_size = 4096;
-    void *data = NULL;
+    void *buffer, *data;
 
-    if (!(data = malloc(buffer_size)))
+    if (!(buffer = malloc(buffer_size)))
         return 0;
 
     IAsyncReader_Length(filter->reader, &file_size, &unused);
@@ -893,20 +893,21 @@ static DWORD CALLBACK read_thread(void *arg)
         else if (offset + size >= file_size)
             size = file_size - offset;
 
-        if (!array_reserve(&data, &buffer_size, size, 1))
-        {
-            free(data);
-            return 0;
-        }
+        if (!array_reserve(&buffer, &buffer_size, size, 1))
+            break;
+        data = buffer;
 
         hr = IAsyncReader_SyncRead(filter->reader, offset, size, data);
         if (FAILED(hr))
+        {
             ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
+            data = NULL;
+        }
 
-        wg_parser_push_data(filter->wg_parser, SUCCEEDED(hr) ? data : NULL, size);
+        wg_parser_push_data(filter->wg_parser, data, size);
     }
 
-    free(data);
+    free(buffer);
     TRACE("Streaming stopped; exiting.\n");
     return 0;
 }
diff --git a/dlls/winegstreamer/wm_reader.c b/dlls/winegstreamer/wm_reader.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wm_reader.c
+++ b/dlls/winegstreamer/wm_reader.c
@@ -532,10 +532,10 @@ static DWORD CALLBACK read_thread(void *arg)
     IStream *stream = reader->source_stream;
     HANDLE file = reader->file;
     size_t buffer_size = 4096;
+    void *buffer, *data;
     uint64_t file_size;
-    void *data;
 
-    if (!(data = malloc(buffer_size)))
+    if (!(buffer = malloc(buffer_size)))
         return 0;
 
     if (file)
@@ -558,8 +558,8 @@ static DWORD CALLBACK read_thread(void *arg)
     while (!reader->read_thread_shutdown)
     {
         LARGE_INTEGER large_offset;
+        ULONG ret_size = 0;
         uint64_t offset;
-        ULONG ret_size;
         uint32_t size;
         HRESULT hr;
 
@@ -571,49 +571,42 @@ static DWORD CALLBACK read_thread(void *arg)
         else if (offset + size >= file_size)
             size = file_size - offset;
 
-        if (!size)
-        {
-            wg_parser_push_data(reader->wg_parser, data, 0);
-            continue;
-        }
-
-        if (!array_reserve(&data, &buffer_size, size, 1))
-        {
-            free(data);
-            return 0;
-        }
-
-        ret_size = 0;
+        if (!array_reserve(&buffer, &buffer_size, size, 1))
+            break;
+        data = buffer;
 
         large_offset.QuadPart = offset;
-        if (file)
+        if (!size)
+            hr = S_OK;
+        else if (file)
         {
             if (!SetFilePointerEx(file, large_offset, NULL, FILE_BEGIN)
                     || !ReadFile(file, data, size, &ret_size, NULL))
-            {
-                ERR("Failed to read %u bytes at offset %I64u, error %lu.\n", size, offset, GetLastError());
-                wg_parser_push_data(reader->wg_parser, NULL, 0);
-                continue;
-            }
+                hr = HRESULT_FROM_WIN32(GetLastError());
+            else
+                hr = S_OK;
         }
         else
         {
             if (SUCCEEDED(hr = IStream_Seek(stream, large_offset, STREAM_SEEK_SET, NULL)))
                 hr = IStream_Read(stream, data, size, &ret_size);
-            if (FAILED(hr))
-            {
-                ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
-                wg_parser_push_data(reader->wg_parser, NULL, 0);
-                continue;
-            }
         }
 
-        if (ret_size != size)
+        if (FAILED(hr))
+        {
+            ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
+            data = NULL;
+        }
+        else if (ret_size != size)
+        {
             ERR("Unexpected short read: requested %u bytes, got %lu.\n", size, ret_size);
-        wg_parser_push_data(reader->wg_parser, data, ret_size);
+            size = ret_size;
+        }
+
+        wg_parser_push_data(reader->wg_parser, data, size);
     }
 
-    free(data);
+    free(buffer);
     TRACE("Reader is shutting down; exiting.\n");
     return 0;
 }
-- 
2.37.1

