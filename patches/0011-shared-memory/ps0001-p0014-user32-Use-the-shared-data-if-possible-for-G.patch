From d48741c549da6c62aaeab482f706c2a8b4468967 Mon Sep 17 00:00:00 2001
From: Huw Davies <huw@codeweavers.com>
Date: Wed, 8 Jul 2020 15:45:24 +0100
Subject: [PATCH 14/15] user32: Use the shared data if possible for
 GetAsyncKeyState().

Signed-off-by: Huw Davies <huw@codeweavers.com>
---
 dlls/user32/hook.c         |  3 ---
 dlls/user32/input.c        | 40 +++++++++-----------------------------
 dlls/user32/message.c      | 16 ++-------------
 dlls/user32/user_main.c    |  1 -
 dlls/user32/user_private.h |  9 ---------
 dlls/user32/winstation.c   |  2 --
 6 files changed, 11 insertions(+), 60 deletions(-)

diff --git a/dlls/user32/hook.c b/dlls/user32/hook.c
index 92a64bd3478..25c8a031085 100644
--- a/dlls/user32/hook.c
+++ b/dlls/user32/hook.c
@@ -450,9 +450,6 @@ static LRESULT call_hook( struct hook_info *info, INT code, WPARAM wparam, LPARA
         }
     }
 
-    if (info->id == WH_KEYBOARD_LL || info->id == WH_MOUSE_LL)
-        InterlockedIncrement( &global_key_state_counter );  /* force refreshing the key state cache */
-
     return ret;
 }
 
diff --git a/dlls/user32/input.c b/dlls/user32/input.c
index 403144f63d0..0255ac918e8 100644
--- a/dlls/user32/input.c
+++ b/dlls/user32/input.c
@@ -49,8 +49,6 @@
 WINE_DEFAULT_DEBUG_CHANNEL(win);
 WINE_DECLARE_DEBUG_CHANNEL(keyboard);
 
-INT global_key_state_counter = 0;
-
 /***********************************************************************
  *           get_key_state
  */
@@ -387,52 +385,32 @@ static void check_for_events( UINT flags )
  */
 SHORT WINAPI DECLSPEC_HOTPATCH GetAsyncKeyState( INT key )
 {
-    struct user_key_state_info *key_state_info = get_user_thread_info()->key_state;
-    INT counter = global_key_state_counter;
-    BYTE prev_key_state;
+    volatile struct desktop_shared_memory *shared = get_desktop_shared_memory();
+    BYTE state;
     SHORT ret;
 
-    if (key < 0 || key >= 256) return 0;
+    if (key < 0 || key >= 256 || !shared) return 0;
 
     check_for_events( QS_INPUT );
 
-    if (key_state_info && !(key_state_info->state[key] & 0xc0) &&
-        key_state_info->counter == counter && GetTickCount() - key_state_info->time < 50)
-    {
-        /* use cached value */
-        return 0;
-    }
-    else if (!key_state_info)
+    SHARED_READ_BEGIN( &shared->seq )
     {
-        key_state_info = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*key_state_info) );
-        get_user_thread_info()->key_state = key_state_info;
+        state = shared->keystate[key];
     }
+    SHARED_READ_END( &shared->seq );
+
+    if (!(state & 0x40)) return (state & 0x80) << 8;
 
+    /* Need to make a server call to reset the last pressed bit */
     ret = 0;
     SERVER_START_REQ( get_key_state )
     {
         req->async = 1;
         req->key = key;
-        if (key_state_info)
-        {
-            prev_key_state = key_state_info->state[key];
-            wine_server_set_reply( req, key_state_info->state, sizeof(key_state_info->state) );
-        }
         if (!wine_server_call( req ))
         {
             if (reply->state & 0x40) ret |= 0x0001;
             if (reply->state & 0x80) ret |= 0x8000;
-            if (key_state_info)
-            {
-                /* force refreshing the key state cache - some multithreaded programs
-                 * (like Adobe Photoshop CS5) expect that changes to the async key state
-                 * are also immediately available in other threads. */
-                if (prev_key_state != key_state_info->state[key])
-                    counter = InterlockedIncrement( &global_key_state_counter );
-
-                key_state_info->time    = GetTickCount();
-                key_state_info->counter = counter;
-            }
         }
     }
     SERVER_END_REQ;
diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index a54ecccc7cd..9e3050a16c2 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -3242,10 +3242,8 @@ static BOOL send_message( struct send_message_info *info, DWORD_PTR *res_ptr, BO
  */
 NTSTATUS send_hardware_message( HWND hwnd, const INPUT *input, const RAWINPUT *rawinput, UINT flags )
 {
-    struct user_key_state_info *key_state_info = get_user_thread_info()->key_state;
     struct send_message_info info;
     int prev_x, prev_y, new_x, new_y;
-    INT counter = global_key_state_counter;
     USAGE hid_usage_page, hid_usage;
     NTSTATUS ret;
     BOOL wait;
@@ -3284,8 +3282,6 @@ NTSTATUS send_hardware_message( HWND hwnd, const INPUT *input, UINT flags )
             req->input.hw.lparam = MAKELONG( input->u.hi.wParamL, input->u.hi.wParamH );
             break;
         }
-        if (key_state_info) wine_server_set_reply( req, key_state_info->state,
-                                                   sizeof(key_state_info->state) );
         ret = wine_server_call( req );
         wait = reply->wait;
         prev_x = reply->prev_x;
@@ -3295,16 +3291,8 @@ NTSTATUS send_hardware_message( HWND hwnd, const INPUT *input, UINT flags )
     }
     SERVER_END_REQ;
 
-    if (!ret)
-    {
-        if (key_state_info)
-        {
-            key_state_info->time    = GetTickCount();
-            key_state_info->counter = counter;
-        }
-        if ((flags & SEND_HWMSG_INJECTED) && (prev_x != new_x || prev_y != new_y))
-            USER_Driver->pSetCursorPos( new_x, new_y );
-    }
+    if (!ret && (flags & SEND_HWMSG_INJECTED) && (prev_x != new_x || prev_y != new_y))
+        USER_Driver->pSetCursorPos( new_x, new_y );
 
     if (wait)
     {
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index c4c4853c213..11900664240 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -359,7 +359,6 @@ static void thread_detach(void)
     destroy_thread_windows();
     CloseHandle( thread_info->server_queue );
     HeapFree( GetProcessHeap(), 0, thread_info->wmchar_data );
-    HeapFree( GetProcessHeap(), 0, thread_info->key_state );
     HeapFree( GetProcessHeap(), 0, thread_info->rawinput );
 
     exiting_thread_id = 0;
diff --git a/include/ntuser.h b/include/ntuser.h
index 5ab59e325c9..98297f2dcc9 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -198,7 +198,6 @@ struct user_thread_info
     DWORD                         GetMessageTimeVal;      /* Value for GetMessageTime */
     DWORD                         GetMessagePosVal;       /* Value for GetMessagePos */
     ULONG_PTR                     GetMessageExtraInfoVal; /* Value for GetMessageExtraInfo */
-    struct user_key_state_info   *key_state;              /* Cache of global key state */
     HKL                           kbd_layout;             /* Current keyboard layout */
     HWND                          top_window;             /* Desktop window */
     HWND                          msg_window;             /* HWND_MESSAGE parent window */
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index 5ab59e325c9..98297f2dcc9 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -208,20 +207,12 @@ struct rawinput_thread_data
     RAWINPUT buffer[1]; /* rawinput message data buffer */
 };
 
-extern INT global_key_state_counter DECLSPEC_HIDDEN;
 extern BOOL (WINAPI *imm_register_window)(HWND) DECLSPEC_HIDDEN;
 extern void (WINAPI *imm_unregister_window)(HWND) DECLSPEC_HIDDEN;
 #define WM_IME_INTERNAL 0x287
 #define IME_INTERNAL_ACTIVATE 0x17
 #define IME_INTERNAL_DEACTIVATE 0x18
 
-struct user_key_state_info
-{
-    UINT                          time;                   /* Time of last key state refresh */
-    INT                           counter;                /* Counter to invalidate the key state */
-    BYTE                          state[256];             /* State for each key */
-};
-
 struct hook_extra_info
 {
     HHOOK handle;
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index 821c04608e7..c36aa5309fb 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -510,10 +510,8 @@ BOOL WINAPI SetThreadDesktop( HDESK handle )
     if (ret)  /* reset the desktop windows */
     {
         struct user_thread_info *thread_info = get_user_thread_info();
-        struct user_key_state_info *key_state_info = thread_info->key_state;
         thread_info->top_window = 0;
         thread_info->msg_window = 0;
-        if (key_state_info) key_state_info->time = 0;
         if (thread_info->desktop_shared_map)
         {
             CloseHandle( thread_info->desktop_shared_map );

