From 6387181f0d0bacbe9f08a6c0617912259f59c0c1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 20 May 2021 00:22:28 +0200
Subject: [PATCH 08/13] user32: Use PostMessageW in set_foreground_window.

Instead of SendNotifyMessageW for WM_WINE_SETACTIVEWINDOW.
---
 dlls/user32/focus.c     | 4 ++--
 dlls/user32/tests/msg.c | 6 +++---
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/dlls/user32/focus.c b/dlls/user32/focus.c
index f7ecf652e7b..caecd4d2fa5 100644
--- a/dlls/user32/focus.c
+++ b/dlls/user32/focus.c
@@ -228,12 +228,12 @@ static BOOL set_foreground_window( HWND hwnd, BOOL mouse )
     if (ret && previous != hwnd)
     {
         if (send_msg_old)  /* old window belongs to other thread */
-            SendNotifyMessageW( previous, WM_WINE_SETACTIVEWINDOW, 0, 0 );
+            PostMessageW( previous, WM_WINE_SETACTIVEWINDOW, 0, 0 );
         else if (send_msg_new)  /* old window belongs to us but new one to other thread */
             ret = set_active_window( 0, NULL, mouse, TRUE );
 
         if (send_msg_new)  /* new window belongs to other thread */
-            SendNotifyMessageW( hwnd, WM_WINE_SETACTIVEWINDOW, (WPARAM)hwnd, 0 );
+            PostMessageW( hwnd, WM_WINE_SETACTIVEWINDOW, (WPARAM)hwnd, 0 );
         else  /* new window belongs to us */
             ret = set_active_window( hwnd, NULL, mouse, TRUE );
     }
diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
index 1fa23c0524b..42520c902f5 100644
--- a/dlls/user32/tests/msg.c
+++ b/dlls/user32/tests/msg.c
@@ -15067,11 +15067,11 @@ static void test_interthread_set_foreground_window(struct test_set_foreground_wi
     };
     const struct test_set_foreground_window_desc test_sfw_tests[] =
     {
-        { hwnd1, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, FALSE, WmEmptySeq,  TRUE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, FALSE, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
         { hwnd1, TRUE, FALSE, FALSE,   FALSE, WmEmptySeq,  TRUE, sequence_1,  TRUE, sequence_2,  TRUE, hwnd0 },
-        { hwnd1, FALSE, TRUE, FALSE,   FALSE, WmEmptySeq, FALSE, WmEmptySeq,  TRUE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, FALSE, TRUE, FALSE,   FALSE, WmEmptySeq, FALSE, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
         { hwnd1, TRUE, TRUE, FALSE,    FALSE, WmEmptySeq,  TRUE, sequence_1,  TRUE, sequence_2,  TRUE, hwnd0 },
-        { hwnd1, FALSE, FALSE, TRUE,   FALSE, WmEmptySeq, FALSE, WmEmptySeq,  TRUE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, FALSE, FALSE, TRUE,   FALSE, WmEmptySeq, FALSE, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
         { hwnd1, TRUE, FALSE, TRUE,    FALSE, WmEmptySeq,  TRUE, sequence_1,  TRUE, sequence_2,  TRUE, hwnd0 },
 
         { hwnd2, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, FALSE, sequence_3,  TRUE, sequence_0,  TRUE, hwnd1 },

