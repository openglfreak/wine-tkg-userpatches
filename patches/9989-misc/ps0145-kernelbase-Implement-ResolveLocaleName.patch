From: David Curtiss <david.curtiss@ni.com>
Subject: [PATCH] kernelbase: Implement ResolveLocaleName
Message-Id: <20210810221608.1904-1-david.curtiss@ni.com>
Date: Tue, 10 Aug 2021 17:16:08 -0500

Signed-off-by: David Curtiss <david.curtiss@ni.com>
---
 dlls/kernel32/tests/locale.c | 69 ++++++++++++++++++++++++++++++++++++
 dlls/kernelbase/locale.c     | 44 +++++++++++++++++++++--
 2 files changed, 110 insertions(+), 3 deletions(-)

diff --git a/dlls/kernel32/tests/locale.c b/dlls/kernel32/tests/locale.c
index 11111111111..11111111111 100644
--- a/dlls/kernel32/tests/locale.c
+++ b/dlls/kernel32/tests/locale.c
@@ -90,6 +90,7 @@ static void * (WINAPI *pNlsValidateLocale)(LCID*,ULONG);
 static LANGID (WINAPI *pSetThreadUILanguage)(LANGID);
 static LANGID (WINAPI *pGetThreadUILanguage)(VOID);
 static INT (WINAPI *pNormalizeString)(NORM_FORM, LPCWSTR, INT, LPWSTR, INT);
+static INT (WINAPI *pResolveLocaleName)(LPCWSTR, LPWSTR, INT);
 static INT (WINAPI *pFindStringOrdinal)(DWORD, LPCWSTR lpStringSource, INT, LPCWSTR, INT, BOOL);
 static BOOL (WINAPI *pGetNLSVersion)(NLS_FUNCTION,LCID,NLSVERSIONINFO*);
 static BOOL (WINAPI *pGetNLSVersionEx)(NLS_FUNCTION,LPCWSTR,NLSVERSIONINFOEX*);
@@ -140,6 +141,7 @@ static void InitFunctionPointers(void)
   X(SetThreadUILanguage);
   X(GetThreadUILanguage);
   X(NormalizeString);
+  X(ResolveLocaleName);
   X(FindStringOrdinal);
   X(GetNLSVersion);
   X(GetNLSVersionEx);
@@ -7122,6 +7124,72 @@ static void test_NormalizeString(void)
     }
 }
 
+static void test_ResolveLocaleName(void)
+{
+    INT ret;
+    WCHAR buffer[BUFFER_SIZE];
+    INT buffer_size = BUFFER_SIZE;
+
+    if (!pResolveLocaleName)
+    {
+        win_skip( "ResolveLocaleName not available\n" );
+        return;
+    }
+
+    /* already-valid cases */
+    ret = pResolveLocaleName(L"fr-FR", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"fr-FR");
+
+    ret = pResolveLocaleName(L"fr-BE", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"fr-FR");
+
+    /* just-resolve cases */
+    ret = pResolveLocaleName(L"fr", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"fr-FR");
+
+    /* truncate-and-resolve cases */
+    ret = pResolveLocaleName(L"fr-aaa-BE", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"fr-FR");
+
+    ret = pResolveLocaleName(L"fr-BE_aaa", buffer, ARRAY_SIZE(buffer));
+    ok(ret == lstrlenW("fr-BE"), "Expected Len %d, got %d\n", lstrlenW("fr-BE"), ret);
+    ok(wcsncmp(buffer, "fr-BE", lstrlenW("fr-BE")) == 0
+       || wcsncmp(buffer, "fr-FR", lstrlenW("fr-FR")) == 0,
+       "Bad conversion\n");
+
+    ret = pResolveLocaleName(L"fr-BE-x-y-z", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"fr-BE");
+
+    /* just-big-enough buffer size */
+    ret = pResolveLocaleName(L"fr", buffer, lstrlenW(L"fr-FR") + 1);
+    expect_wstr(ret, buffer, L"fr-FR");
+
+    /* unknown locales return empty string */
+    ret = pResolveLocaleName(L"xx-XX", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"");
+
+    ret = pResolveLocaleName(L"xx", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"");
+
+    ret = pResolveLocaleName(L"-en-US", buffer, ARRAY_SIZE(buffer));
+    expect_wstr(ret, buffer, L"");
+
+    /* when no output buffer, returns required buffer size */
+    ret = pResolveLocaleName(L"en-US", NULL, ARRAY_SIZE(buffer));
+    ok(ret == lstrlenW("en-US"), "Expected Len %d, got %d\n", lstrlenW("en-US"), ret);
+
+    ret = pResolveLocaleName(L"en-US-x-y-z", NULL, ARRAY_SIZE(buffer));
+    ok(ret == lstrlenW("en-US"), "Expected Len %d, got %d\n", lstrlenW("en-US"), ret);
+
+    /* buffer-size error cases */
+    ret = pResolveLocaleName(L"fr", buffer, 5); /* too small to hold "fr-FR\0" */
+    expect_werr(ret, buffer, ERROR_INSUFFICIENT_BUFFER);
+
+    /* null-input error cases */
+    ret = pResolveLocaleName(NULL, buffer, ARRAY_SIZE(buffer));
+    expect_werr(ret, buffer, ERROR_INSUFFICIENT_BUFFER);
+}
+
 static void test_SpecialCasing(void)
 {
     int ret, i;
@@ -7958,6 +8026,7 @@ START_TEST(locale)
   test_FindStringOrdinal();
   test_SetThreadUILanguage();
   test_NormalizeString();
+  test_ResolveLocaleName();
   test_SpecialCasing();
   test_NLSVersion();
   test_locale_nls();
diff --git a/dlls/kernelbase/locale.c b/dlls/kernelbase/locale.c
index 11111111111..11111111111 100644
--- a/dlls/kernelbase/locale.c
+++ b/dlls/kernelbase/locale.c
@@ -6596,10 +6596,48 @@ INT WINAPI DECLSPEC_HOTPATCH NormalizeString(NORM_FORM form, const WCHAR *src, I
  */
 INT WINAPI DECLSPEC_HOTPATCH ResolveLocaleName( LPCWSTR name, LPWSTR buffer, INT len )
 {
-    FIXME( "stub: %s, %p, %d\n", wine_dbgstr_w(name), buffer, len );
+    LCID lcid;
+    WCHAR local_buffer[LOCALE_NAME_MAX_LENGTH];
+    WCHAR *output_buffer = buffer ? buffer : local_buffer;
+    WCHAR *p = 0;
+    INT new_len;
 
-    SetLastError( ERROR_CALL_NOT_IMPLEMENTED );
-    return 0;
+    if (!name)
+    {
+        SetLastError( ERROR_INSUFFICIENT_BUFFER );
+        return 0;
+    }
+
+    TRACE( "(%s, %p, %d)\n", debugstr_w(name), buffer, len );
+
+    for (;;)
+    {
+        lcid = LocaleNameToLCID( p ? local_buffer : name, 0 );
+        if (lcid) break;
+
+        if (!p) /* first loop iteration */
+        {
+            lstrcpynW( local_buffer, name, LOCALE_NAME_MAX_LENGTH );
+            local_buffer[LOCALE_NAME_MAX_LENGTH - 1] = L'\0';
+            p = local_buffer + lstrlenW( local_buffer );
+        }
+        if (p == local_buffer)
+        {
+            /* fail-safe in case LocaleNameToLCID doesn't recognize "" */
+            SetLastError( ERROR_INVALID_PARAMETER );
+            return 0;
+        }
+
+        for (--p; p > local_buffer; --p)
+        {
+            if (*p == L'-' || *p == L'_') break;
+        }
+        *p = L'\0';
+    }
+    new_len = LCIDToLocaleName( lcid, output_buffer, len, 0 );
+
+    TRACE( "(%s, %p, %d) returning %d %s\n", debugstr_w(name), buffer, len, new_len, debugstr_w(output_buffer) );
+    return new_len;
 }
 
 

-- 
2.35.3

