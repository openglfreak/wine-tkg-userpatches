From 4ca21588be0ba96c213114bbcc129af3cbed713c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sun, 17 Oct 2021 18:46:32 +0200
Subject: [PATCH 16/25] user32: Move reading mode from registry out of graphics
 drivers.

---
 dlls/user32/driver.c        |  6 ++--
 dlls/user32/sysparams.c     | 52 ++++++++++++++++++++++++++-
 dlls/user32/user_private.h  |  2 +-
 dlls/wineandroid.drv/init.c |  6 ++--
 dlls/winemac.drv/display.c  | 70 ++++--------------------------------
 dlls/winex11.drv/settings.c | 71 +++----------------------------------
 6 files changed, 69 insertions(+), 138 deletions(-)

diff --git a/dlls/user32/driver.c b/dlls/user32/driver.c
index 77e3e82dcd8..26dd2f13739 100644
--- a/dlls/user32/driver.c
+++ b/dlls/user32/driver.c
@@ -553,7 +553,7 @@ static INT CDECL loaderdrv_EnumDisplayMonitors( HDC hdc, LPRECT rect, MONITORENU
     return load_driver()->pEnumDisplayMonitors( hdc, rect, proc, lp );
 }
 
-static BOOL CDECL loaderdrv_EnumDisplaySettingsEx( LPCWSTR name, DWORD num, LPDEVMODEW mode, DWORD flags )
+static INT CDECL loaderdrv_EnumDisplaySettingsEx( const WCHAR *name, DWORD num, DEVMODEW *mode, DWORD flags )
 {
     return load_driver()->pEnumDisplaySettingsEx( name, num, mode, flags );
 }
diff --git a/dlls/user32/sysparams.c b/dlls/user32/sysparams.c
index bb32dc6750d..6161b91efcc 100644
--- a/dlls/user32/sysparams.c
+++ b/dlls/user32/sysparams.c
@@ -3008,6 +3008,51 @@ HBRUSH SYSCOLOR_Get55AABrush(void)
     return brush_55aa;
 }
 
+static BOOL read_registry_settings( DISPLAY_DEVICEW *device, DEVMODEW *devmode )
+{
+    DWORD type, size;
+    BOOL ret = TRUE;
+    HANDLE mutex;
+    HKEY hkey;
+
+    mutex = get_display_device_init_mutex();
+
+    /* Skip \Registry\Machine\ prefix */
+    if (RegOpenKeyExW( HKEY_CURRENT_CONFIG, device->DeviceKey + 18, 0, KEY_READ, &hkey ))
+    {
+        release_display_device_init_mutex( mutex );
+        return FALSE;
+    }
+
+#define query_value( name, data )                                                                  \
+    size = sizeof(DWORD);                                                                          \
+    if (RegQueryValueExW( hkey, name, 0, &type, (LPBYTE)(data), &size ) || type != REG_DWORD ||    \
+        size != sizeof(DWORD)) ret = FALSE
+
+    query_value( L"DefaultSettings.BitsPerPel", &devmode->dmBitsPerPel );
+    devmode->dmFields |= DM_BITSPERPEL;
+    query_value( L"DefaultSettings.XResolution", &devmode->dmPelsWidth );
+    devmode->dmFields |= DM_PELSWIDTH;
+    query_value( L"DefaultSettings.YResolution", &devmode->dmPelsHeight );
+    devmode->dmFields |= DM_PELSHEIGHT;
+    query_value( L"DefaultSettings.VRefresh", &devmode->dmDisplayFrequency );
+    devmode->dmFields |= DM_DISPLAYFREQUENCY;
+    query_value( L"DefaultSettings.Flags", &devmode->u2.dmDisplayFlags );
+    devmode->dmFields |= DM_DISPLAYFLAGS;
+    query_value( L"DefaultSettings.XPanning", &devmode->u1.s2.dmPosition.x );
+    query_value( L"DefaultSettings.YPanning", &devmode->u1.s2.dmPosition.y );
+    devmode->dmFields |= DM_POSITION;
+    query_value( L"DefaultSettings.Orientation", &devmode->u1.s2.dmDisplayOrientation );
+    devmode->dmFields |= DM_DISPLAYORIENTATION;
+    query_value( L"DefaultSettings.FixedOutput", &devmode->u1.s2.dmDisplayFixedOutput );
+
+#undef query_value
+
+    RegCloseKey( hkey );
+    release_display_device_init_mutex( mutex );
+    return ret;
+}
+
 /***********************************************************************
  *		ChangeDisplaySettingsA (USER32.@)
  */
@@ -3319,7 +3364,12 @@ BOOL WINAPI EnumDisplaySettingsExW( const WCHAR *devname, DWORD index, DEVMODEW
     wcscpy( devmode->dmDeviceName, L"Wine Display Driver" );
     memset( &devmode->dmFields, 0, devmode->dmSize - FIELD_OFFSET( DEVMODEW, dmFields ) );
 
-    ret = USER_Driver->pEnumDisplaySettingsEx( device.DeviceName, index, devmode, flags );
+    if ((ret = USER_Driver->pEnumDisplaySettingsEx( device.DeviceName, index, devmode, flags )) < 0)
+    {
+        if (index == ENUM_REGISTRY_SETTINGS) ret = read_registry_settings( &device, devmode );
+        else ret = FALSE;
+    }
+
     if (!ret) WARN( "Failed to query %s display settings.\n", debugstr_w(device.DeviceName) );
     else TRACE( "x %d, y %d, width %u, height %u, frequency %u, depth, %u, orientation %#x.\n",
                 devmode->u1.s2.dmPosition.x, devmode->u1.s2.dmPosition.y, devmode->dmPelsWidth, devmode->dmPelsHeight,
diff --git a/dlls/win32u/driver.c b/dlls/win32u/driver.c
index 77e3e82dcd8..26dd2f13739 100644
--- a/dlls/win32u/driver.c
+++ b/dlls/win32u/driver.c
@@ -821,9 +821,9 @@ static BOOL CDECL nulldrv_EnumDisplayMonitors( HDC hdc, RECT *rect, MONITORENUMP
     return FALSE;
 }
 
-static BOOL CDECL nulldrv_EnumDisplaySettingsEx( LPCWSTR name, DWORD num, LPDEVMODEW mode, DWORD flags )
+static INT CDECL nulldrv_EnumDisplaySettingsEx( const WCHAR *name, DWORD num, DEVMODEW *mode, DWORD flags )
 {
-    return FALSE;
+    return -1; /* use default implementation */
 }
 
 static BOOL CDECL nulldrv_GetMonitorInfo( HMONITOR handle, MONITORINFO *info )
diff --git a/dlls/wineandroid.drv/init.c b/dlls/wineandroid.drv/init.c
index 85f18844222..8d29e0e18aa 100644
--- a/dlls/wineandroid.drv/init.c
+++ b/dlls/wineandroid.drv/init.c
@@ -229,7 +229,7 @@ INT CDECL ANDROID_EnumDisplayMonitors( HDC hdc, LPRECT rect, MONITORENUMPROC pro
 /***********************************************************************
  *           ANDROID_EnumDisplaySettingsEx
  */
-BOOL CDECL ANDROID_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmode, DWORD flags)
+INT CDECL ANDROID_EnumDisplaySettingsEx( const WCHAR *name, DWORD n, DEVMODEW *devmode, DWORD flags )
 {
     static const WCHAR dev_name[CCHDEVICENAME] =
         { 'W','i','n','e',' ','A','n','d','r','o','i','d',' ','d','r','i','v','e','r',0 };
@@ -253,11 +253,11 @@ BOOL CDECL ANDROID_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devm
         TRACE( "mode %d -- %dx%d %d bpp @%d Hz\n", n,
                devmode->dmPelsWidth, devmode->dmPelsHeight,
                devmode->dmBitsPerPel, devmode->dmDisplayFrequency );
-        return TRUE;
+        return 1;
     }
     TRACE( "mode %d -- not present\n", n );
     SetLastError( ERROR_NO_MORE_FILES );
-    return FALSE;
+    return 0;
 }
 
 
diff --git a/dlls/winemac.drv/display.c b/dlls/winemac.drv/display.c
index 29f34be6573..c315ab34474 100644
--- a/dlls/winemac.drv/display.c
+++ b/dlls/winemac.drv/display.c
@@ -51,7 +51,7 @@ struct display_mode_descriptor
 };
 
 
-BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode, LPDEVMODEW devmode, DWORD flags);
+INT CDECL macdrv_EnumDisplaySettingsEx(const WCHAR *devname, DWORD mode, DEVMODEW *devmode, DWORD flags);
 
 DEFINE_DEVPROPKEY(DEVPROPKEY_GPU_LUID, 0x60b193cb, 0x5276, 0x4d0f, 0x96, 0xfc, 0xf1, 0x73, 0xab, 0xad, 0x3e, 0xc6, 2);
 DEFINE_DEVPROPKEY(DEVPROPKEY_MONITOR_GPU_LUID, 0xca085853, 0x16ce, 0x48aa, 0xb1, 0x14, 0xde, 0x9c, 0x72, 0x33, 0x42, 0x23, 1);
@@ -184,60 +184,6 @@ static BOOL get_display_device_reg_key(const WCHAR *device_name, WCHAR *key, uns
 }
 
 
-static BOOL read_registry_settings(const WCHAR *device_name, DEVMODEW *dm)
-{
-    WCHAR wine_mac_reg_key[MAX_PATH];
-    HANDLE mutex;
-    HKEY hkey;
-    DWORD type, size;
-    BOOL ret = TRUE;
-
-    dm->dmFields = 0;
-
-    mutex = get_display_device_init_mutex();
-    if (!get_display_device_reg_key(device_name, wine_mac_reg_key, ARRAY_SIZE(wine_mac_reg_key)))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-    if (RegOpenKeyExW(HKEY_CURRENT_CONFIG, wine_mac_reg_key, 0, KEY_READ, &hkey))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-#define query_value(name, data) \
-    size = sizeof(DWORD); \
-    if (RegQueryValueExA(hkey, name, 0, &type, (LPBYTE)(data), &size) || \
-        type != REG_DWORD || size != sizeof(DWORD)) \
-        ret = FALSE
-
-    query_value("DefaultSettings.BitsPerPel", &dm->dmBitsPerPel);
-    dm->dmFields |= DM_BITSPERPEL;
-    query_value("DefaultSettings.XResolution", &dm->dmPelsWidth);
-    dm->dmFields |= DM_PELSWIDTH;
-    query_value("DefaultSettings.YResolution", &dm->dmPelsHeight);
-    dm->dmFields |= DM_PELSHEIGHT;
-    query_value("DefaultSettings.VRefresh", &dm->dmDisplayFrequency);
-    dm->dmFields |= DM_DISPLAYFREQUENCY;
-    query_value("DefaultSettings.Flags", &dm->dmDisplayFlags);
-    dm->dmFields |= DM_DISPLAYFLAGS;
-    query_value("DefaultSettings.XPanning", &dm->dmPosition.x);
-    query_value("DefaultSettings.YPanning", &dm->dmPosition.y);
-    dm->dmFields |= DM_POSITION;
-    query_value("DefaultSettings.Orientation", &dm->dmDisplayOrientation);
-    dm->dmFields |= DM_DISPLAYORIENTATION;
-    query_value("DefaultSettings.FixedOutput", &dm->dmDisplayFixedOutput);
-
-#undef query_value
-
-    RegCloseKey(hkey);
-    release_display_device_init_mutex(mutex);
-    return ret;
-}
-
-
 static BOOL write_registry_settings(const WCHAR *device_name, const DEVMODEW *dm)
 {
     WCHAR wine_mac_reg_key[MAX_PATH];
@@ -1034,8 +980,8 @@ better:
  *              EnumDisplaySettingsEx  (MACDRV.@)
  *
  */
-BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode,
-                                        LPDEVMODEW devmode, DWORD flags)
+INT CDECL macdrv_EnumDisplaySettingsEx(const WCHAR *devname, DWORD mode,
+                                       DEVMODEW *devmode, DWORD flags)
 {
     static const WCHAR dev_name[CCHDEVICENAME] =
         { 'W','i','n','e',' ','M','a','c',' ','d','r','i','v','e','r',0 };
@@ -1053,11 +999,7 @@ BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode,
 
     memcpy(devmode->dmDeviceName, dev_name, sizeof(dev_name));
 
-    if (mode == ENUM_REGISTRY_SETTINGS)
-    {
-        TRACE("mode %d (registry) -- getting default mode\n", mode);
-        return read_registry_settings(devname, devmode);
-    }
+    if (mode == ENUM_REGISTRY_SETTINGS) return -1; /* use default implementation */
 
     if (macdrv_get_displays(&displays, &num_displays))
         goto failed;
@@ -1215,13 +1157,13 @@ BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode,
         TRACE(" (synthesized)");
     TRACE("\n");
 
-    return TRUE;
+    return 1;
 
 failed:
     TRACE("mode %d -- not present\n", mode);
     if (displays) macdrv_free_displays(displays);
     SetLastError(ERROR_NO_MORE_FILES);
-    return FALSE;
+    return 0;
 }
 
 
diff --git a/dlls/winex11.drv/settings.c b/dlls/winex11.drv/settings.c
index 083fefa95af..1485283e6ed 100644
--- a/dlls/winex11.drv/settings.c
+++ b/dlls/winex11.drv/settings.c
@@ -254,59 +254,6 @@ static BOOL get_display_device_reg_key(const WCHAR *device_name, WCHAR *key, uns
     return TRUE;
 }
 
-static BOOL read_registry_settings(const WCHAR *device_name, DEVMODEW *dm)
-{
-    WCHAR wine_x11_reg_key[MAX_PATH];
-    HANDLE mutex;
-    HKEY hkey;
-    DWORD type, size;
-    BOOL ret = TRUE;
-
-    dm->dmFields = 0;
-
-    mutex = get_display_device_init_mutex();
-    if (!get_display_device_reg_key(device_name, wine_x11_reg_key, ARRAY_SIZE(wine_x11_reg_key)))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-    if (RegOpenKeyExW(HKEY_CURRENT_CONFIG, wine_x11_reg_key, 0, KEY_READ, &hkey))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-#define query_value(name, data) \
-    size = sizeof(DWORD); \
-    if (RegQueryValueExA(hkey, name, 0, &type, (LPBYTE)(data), &size) || \
-        type != REG_DWORD || size != sizeof(DWORD)) \
-        ret = FALSE
-
-    query_value("DefaultSettings.BitsPerPel", &dm->dmBitsPerPel);
-    dm->dmFields |= DM_BITSPERPEL;
-    query_value("DefaultSettings.XResolution", &dm->dmPelsWidth);
-    dm->dmFields |= DM_PELSWIDTH;
-    query_value("DefaultSettings.YResolution", &dm->dmPelsHeight);
-    dm->dmFields |= DM_PELSHEIGHT;
-    query_value("DefaultSettings.VRefresh", &dm->dmDisplayFrequency);
-    dm->dmFields |= DM_DISPLAYFREQUENCY;
-    query_value("DefaultSettings.Flags", &dm->u2.dmDisplayFlags);
-    dm->dmFields |= DM_DISPLAYFLAGS;
-    query_value("DefaultSettings.XPanning", &dm->u1.s2.dmPosition.x);
-    query_value("DefaultSettings.YPanning", &dm->u1.s2.dmPosition.y);
-    dm->dmFields |= DM_POSITION;
-    query_value("DefaultSettings.Orientation", &dm->u1.s2.dmDisplayOrientation);
-    dm->dmFields |= DM_DISPLAYORIENTATION;
-    query_value("DefaultSettings.FixedOutput", &dm->u1.s2.dmDisplayFixedOutput);
-
-#undef query_value
-
-    RegCloseKey(hkey);
-    release_display_device_init_mutex(mutex);
-    return ret;
-}
-
 static BOOL write_registry_settings(const WCHAR *device_name, const DEVMODEW *dm)
 {
     WCHAR wine_x11_reg_key[MAX_PATH];
@@ -467,7 +414,7 @@ static DWORD get_display_depth(ULONG_PTR display_id)
  *		EnumDisplaySettingsEx  (X11DRV.@)
  *
  */
-BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmode, DWORD flags)
+INT CDECL X11DRV_EnumDisplaySettingsEx( const WCHAR *name, DWORD n, DEVMODEW *devmode, DWORD flags )
 {
     static const WCHAR dev_name[CCHDEVICENAME] =
         { 'W','i','n','e',' ','X','1','1',' ','d','r','i','v','e','r',0 };
@@ -477,22 +424,14 @@ BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmo
 
     lstrcpyW( devmode->dmDeviceName, dev_name );
 
-    if (n == ENUM_REGISTRY_SETTINGS)
-    {
-        if (!read_registry_settings(name, devmode))
-        {
-            ERR("Failed to get %s registry display settings.\n", wine_dbgstr_w(name));
-            return FALSE;
-        }
-        return TRUE;
-    }
+    if (n == ENUM_REGISTRY_SETTINGS) return -1; /* use default implementation */
 
     if (n == ENUM_CURRENT_SETTINGS)
     {
         if (!handler.get_id(name, &id) || !handler.get_current_mode(id, devmode))
         {
             ERR("Failed to get %s current display settings.\n", wine_dbgstr_w(name));
-            return FALSE;
+            return 0;
         }
 
         if (!is_detached_mode(devmode))
@@ -508,7 +447,7 @@ BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmo
         {
             ERR("Failed to get %s supported display modes.\n", wine_dbgstr_w(name));
             LeaveCriticalSection(&modes_section);
-            return FALSE;
+            return 0;
         }
 
         qsort(modes, mode_count, sizeof(*modes) + modes[0].dmDriverExtra, mode_compare);
@@ -526,7 +465,7 @@ BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmo
         LeaveCriticalSection(&modes_section);
         WARN("handler:%s device:%s mode index:%#x not found.\n", handler.name, wine_dbgstr_w(name), n);
         SetLastError(ERROR_NO_MORE_FILES);
-        return FALSE;
+        return 0;
     }
 
     cached = (DEVMODEW *)((BYTE *)cached_modes + (sizeof(*cached_modes) + cached_modes[0].dmDriverExtra) * n);
diff --git a/include/wine/gdi_driver.h b/include/wine/gdi_driver.h
index 724fd20a897..4e372ae267e 100644
--- a/include/wine/gdi_driver.h
+++ b/include/wine/gdi_driver.h
@@ -256,7 +256,7 @@ struct user_driver_funcs
     /* display modes */
     LONG    (CDECL *pChangeDisplaySettingsEx)(LPCWSTR,LPDEVMODEW,HWND,DWORD,LPVOID);
     BOOL    (CDECL *pEnumDisplayMonitors)(HDC,LPRECT,MONITORENUMPROC,LPARAM);
-    BOOL    (CDECL *pEnumDisplaySettingsEx)(LPCWSTR,DWORD,LPDEVMODEW,DWORD);
+    INT     (CDECL *pEnumDisplaySettingsEx)(const WCHAR *,DWORD,DEVMODEW *,DWORD);
     BOOL    (CDECL *pGetMonitorInfo)(HMONITOR,MONITORINFO*);
     /* windowing functions */
     BOOL    (CDECL *pCreateDesktopWindow)(HWND);
-- 
2.34.0

