From 3cd8a753121c250fc0b3812a497e9b6f89678753 Mon Sep 17 00:00:00 2001
From: Joel Holdsworth <joel@airwebreathe.org.uk>
Date: Thu, 29 Dec 2022 23:09:31 +0000
Subject: [PATCH 1/3] ntdll/tests: Added tests for attributes access on
 read-only files.

This patch was inspired by the wine-staging patch:

server-File_Permissions/0006-ntdll-tests-Added-tests-for-open-behaviour-on-readon.patch

Co-authored-by: Qian Hong <qhong@codeweavers.com>
Signed-off-by: Joel Holdsworth <joel@airwebreathe.org.uk>
---
 dlls/ntdll/tests/file.c | 44 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -5774,6 +5774,7 @@ static void test_file_readonly_access(void)
     static const WCHAR fooW[] = {'f', 'o', 'o', 0};
     WCHAR path[MAX_PATH];
     OBJECT_ATTRIBUTES attr;
+    FILE_BASIC_INFORMATION fbi;
     UNICODE_STRING nameW;
     IO_STATUS_BLOCK io;
     HANDLE handle;
@@ -5798,6 +5799,49 @@ static void test_file_readonly_access(void)
     ok(status == STATUS_SUCCESS, "expected STATUS_SUCCESS, got %#lx.\n", status);
     CloseHandle(handle);
 
+    /* NtOpenFile FILE_READ_ATTRIBUTES */
+    status = pNtOpenFile(&handle, FILE_READ_ATTRIBUTES,  &attr, &io, default_sharing, FILE_NON_DIRECTORY_FILE);
+    ok(status == STATUS_SUCCESS, "got %#lx\n", status);
+
+    memset(&fbi, 0, sizeof(fbi));
+    status = pNtQueryInformationFile(handle, &io, &fbi, sizeof fbi, FileBasicInformation);
+    ok(status == STATUS_SUCCESS, "can't get attributes, status %#lx\n", status);
+    ok((fbi.FileAttributes & FILE_ATTRIBUTE_READONLY) == FILE_ATTRIBUTE_READONLY,
+       "attribute %lx not expected\n", fbi.FileAttributes );
+
+    CloseHandle(handle);
+
+    /* NtOpenFile FILE_WRITE_ATTRIBUTES */
+    status = pNtOpenFile(&handle, FILE_WRITE_ATTRIBUTES,  &attr, &io, default_sharing, FILE_NON_DIRECTORY_FILE);
+    todo_wine ok(status == STATUS_SUCCESS, "got %#lx\n", status);
+
+    if (status == STATUS_SUCCESS) {
+        memset(&fbi, 0, sizeof(fbi));
+        fbi.FileAttributes = FILE_ATTRIBUTE_NORMAL;
+        U(io).Status = 0xdeadbeef;
+        status = pNtSetInformationFile(handle, &io, &fbi, sizeof fbi, FileBasicInformation);
+        todo_wine ok(status == STATUS_SUCCESS, "can't set system attribute, NtSetInformationFile returned %#lx\n",
+                     status);
+        todo_wine ok(U(io).Status == STATUS_SUCCESS, "can't set system attribute, io.Status is %lx\n",
+                     U(io).Status);
+
+        fbi.FileAttributes = FILE_ATTRIBUTE_READONLY;
+        U(io).Status = 0xdeadbeef;
+        status = pNtSetInformationFile(handle, &io, &fbi, sizeof fbi, FileBasicInformation);
+        todo_wine ok(status == STATUS_SUCCESS, "can't set system attribute, NtSetInformationFile returned %#lx\n",
+                     status);
+        todo_wine ok(U(io).Status == STATUS_SUCCESS, "can't set system attribute, io.Status is %lx\n",
+                     U(io).Status);
+    }
+
+    CloseHandle(handle);
+
+    /* NtOpenFile FILE_READ_ATTRIBUTES and FILE_WRITE_ATTRIBUTES */
+    status = pNtOpenFile(&handle, FILE_READ_ATTRIBUTES|FILE_WRITE_ATTRIBUTES,  &attr, &io,
+                         default_sharing, FILE_NON_DIRECTORY_FILE);
+    todo_wine ok(status == STATUS_SUCCESS, "got %#lx\n", status);
+    CloseHandle(handle);
+
     /* NtCreateFile FILE_GENERIC_WRITE */
     status = pNtCreateFile(&handle, FILE_GENERIC_WRITE, &attr, &io, NULL, FILE_ATTRIBUTE_NORMAL, default_sharing,
                            FILE_OPEN, FILE_NON_DIRECTORY_FILE, NULL, 0);


