From 126522b2c955cf35b1ee56d184f8d15b179f7164 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 15 Oct 2021 11:08:27 +0200
Subject: [PATCH 4/7] server: Don't destroy child windows from live other
 threads.

---
 dlls/user32/tests/msg.c |  4 ++--
 dlls/user32/tests/win.c |  7 ------
 server/window.c         | 52 +++++++++++++++++++++++++++++++++++++----
 3 files changed, 50 insertions(+), 13 deletions(-)

diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
index ea41b7999a2..a7f8e2914d0 100644
--- a/dlls/user32/tests/msg.c
+++ b/dlls/user32/tests/msg.c
@@ -9118,7 +9118,7 @@ static DWORD CALLBACK create_grand_child_thread( void *param )
     ok( !ret, "WaitForSingleObject returned %x, error: %u\n", ret, GetLastError() );
     ok( IsWindow( hchild ), "Child window already destroyed\n" );
     flush_events();
-    todo_wine ok( !IsWindow( hchild ), "Child window not destroyed\n" );
+    ok( !IsWindow( hchild ), "Child window not destroyed\n" );
 
     return 0;
 }
@@ -9305,7 +9305,7 @@ static void test_interthread_messages(void)
     CloseHandle( wnd_event.stop_event );
     CloseHandle( wnd_event.ready_event );
     flush_events();
-    ok_sequence( WmExitThreadSeq, "destroy child on thread exit", TRUE );
+    ok_sequence( WmExitThreadSeq, "destroy child on thread exit", FALSE );
     log_all_parent_messages--;
     DestroyWindow( wnd_event.hwnd );
 
diff --git a/dlls/user32/tests/win.c b/dlls/user32/tests/win.c
index b5aa020ae02..32aca792893 100644
--- a/dlls/user32/tests/win.c
+++ b/dlls/user32/tests/win.c
@@ -877,7 +877,6 @@ static void test_thread_exit_destroy(void)
     ok( GetActiveWindow() == adopter, "GetActiveWindow %p, expected %p\n", GetActiveWindow(), adopter );
     todo_wine
     ok( GetFocus() == adopter, "GetFocus %p, expected %p\n", GetFocus(), adopter );
-    todo_wine
     ok( GetCapture() == child1, "GetCapture %p, expected %p\n", GetCapture(), child1 );
 
     SetActiveWindow( child1 );
@@ -888,7 +887,6 @@ static void test_thread_exit_destroy(void)
     ok( GetActiveWindow() == adopter, "GetActiveWindow %p, expected %p\n", GetActiveWindow(), adopter );
     todo_wine
     ok( GetFocus() == adopter, "GetFocus %p, expected %p\n", GetFocus(), adopter );
-    todo_wine
     ok( GetCapture() == child1, "GetCapture %p, expected %p\n", GetCapture(), child1 );
 
     SetLastError( 0xdeadbeef );
@@ -932,10 +930,8 @@ static void test_thread_exit_destroy(void)
     ok( wndproc == old_wndproc, "GetWindowLongPtrW GWLP_WNDPROC returned %p\n", wndproc );
 
     tmp = GetPropW( child1, L"myprop" );
-    todo_wine
     ok( HandleToULong(tmp) == 0xdeadbeef, "GetPropW returned %p\n", tmp );
     tmp = GetPropW( child2, L"myprop" );
-    todo_wine
     ok( HandleToULong(tmp) == 0xdeadbeef, "GetPropW returned %p\n", tmp );
 
     /* destroying child1 ourselves succeeds */
@@ -967,7 +963,6 @@ static void test_thread_exit_destroy(void)
     rgn = CreateRectRgn( 5, 5, 15, 15 );
     SetLastError( 0xdeadbeef );
     ret = SetWindowRgn( child2, rgn, TRUE );
-    todo_wine
     ok( ret, "SetWindowRgn failed, error %u\n", GetLastError() );
     DeleteObject( rgn );
 
@@ -992,13 +987,11 @@ static void test_thread_exit_destroy(void)
     ok( HandleToULong(tmp) == 0, "GetPropW returned %p\n", tmp );
 
     ret = IsWindow( child2 );
-    todo_wine
     ok( !ret, "IsWindow returned %u\n", ret );
     ret = IsWindow( child3 );
     todo_wine
     ok( !ret, "IsWindow returned %u\n", ret );
     ret = DestroyWindow( child2 );
-    todo_wine
     ok( !ret, "DestroyWindow returned %u\n", ret );
 
     DestroyWindow( adopter );
diff --git a/server/window.c b/server/window.c
index 18ae5d800bf..4c8ef0bd7f1 100644
--- a/server/window.c
+++ b/server/window.c
@@ -148,6 +148,12 @@ static inline int is_desktop_window( const struct window *win )
     return win && !win->parent && win->is_desktop;
 }
 
+/* check if window has lost its parent */
+static inline int is_orphan_window( const struct window *win )
+{
+    return !win->parent && !win->is_desktop;
+}
+
 /* get next window in Z-order list */
 static inline struct window *get_next_window( struct window *win )
 {
@@ -727,6 +733,7 @@ static int is_visible( const struct window *win )
 {
     while (win)
     {
+        if (is_orphan_window( win )) return 0;
         if (!(win->style & WS_VISIBLE)) return 0;
         win = win->parent;
         /* if parent is minimized children are not visible */
@@ -1254,6 +1261,7 @@ static int get_window_visible_rect( struct window *win, rectangle_t *rect, int f
     *rect = frame ? win->window_rect : win->client_rect;
 
     if (!(win->style & WS_VISIBLE)) return 0;
+    if (is_orphan_window( win )) return 0;
     if (is_desktop_window( win )) return 1;
 
     while (!is_desktop_window( win->parent ))
@@ -1959,9 +1967,25 @@ void destroy_window( struct window *win )
 
     /* destroy all children */
     while (!list_empty(&win->children))
-        destroy_window( LIST_ENTRY( list_head(&win->children), struct window, entry ));
+    {
+        struct window *child = LIST_ENTRY( list_head( &win->children ), struct window, entry );
+        if (!child->thread || child->thread == win->thread) destroy_window( child );
+        else
+        {
+            list_remove( &child->entry );
+            child->parent = NULL;
+        }
+    }
     while (!list_empty(&win->unlinked))
-        destroy_window( LIST_ENTRY( list_head(&win->unlinked), struct window, entry ));
+    {
+        struct window *child = LIST_ENTRY( list_head( &win->unlinked ), struct window, entry );
+        if (!child->thread || child->thread == win->thread) destroy_window( child );
+        else
+        {
+            list_remove( &child->entry );
+            child->parent = NULL;
+        }
+    }
 
     /* reset global window pointers, if the corresponding window is destroyed */
     if (win == shell_window) shell_window = NULL;
@@ -2005,6 +2029,11 @@ DECL_HANDLER(create_window)
 
     reply->handle = 0;
     if (req->parent && !(parent = get_window( req->parent ))) return;
+    if (parent && is_orphan_window( parent ))
+    {
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
 
     if (req->owner)
     {
@@ -2057,8 +2086,7 @@ DECL_HANDLER(set_parent)
 
     if (!(win = get_window( req->handle ))) return;
     if (req->parent && !(parent = get_window( req->parent ))) return;
-
-    if (is_desktop_window(win))
+    if (!win->parent)
     {
         set_error( STATUS_INVALID_PARAMETER );
         return;
@@ -2180,6 +2208,12 @@ DECL_HANDLER(set_window_info)
     struct window *win = get_window( req->handle );
 
     if (!win) return;
+    if (is_orphan_window( win ))
+    {
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
+
     if (req->flags && is_desktop_window(win) && win->thread != current)
     {
         set_error( STATUS_ACCESS_DENIED );
@@ -2435,6 +2469,11 @@ DECL_HANDLER(set_window_pos)
     unsigned int flags = req->swp_flags;
 
     if (!win) return;
+    if (is_orphan_window( win ))
+    {
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
     if (is_desktop_window(win)) flags |= SWP_NOZORDER;  /* no Z order for the desktop */
 
     if (!(flags & SWP_NOZORDER))
@@ -2625,6 +2664,11 @@ DECL_HANDLER(get_visible_region)
     struct window *top, *win = get_window( req->window );
 
     if (!win) return;
+    if (is_orphan_window( win ))
+    {
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
 
     top = get_top_clipping_window( win );
     if ((region = get_visible_region( win, req->flags )))
-- 
2.35.1

