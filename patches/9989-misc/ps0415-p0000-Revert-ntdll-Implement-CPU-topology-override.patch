From 66d938b565e85698227b164745eb5b34cb46398e Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Tue, 3 May 2022 19:09:39 -0500
Subject: [PATCH 0/6] Revert "ntdll: Implement CPU topology override."

CW-Bug-Id: #20584

This reverts commit c9d5405bd91bc5bdd89869f26bdecda2462fc685,
5381caf1be5fb176f623ca96b3cd72f7a1154f9e and
ec795b741d316ae18ab68dc0b75b2df91855fd04.
---
 dlls/ntdll/unix/server.c       |   3 -
 dlls/ntdll/unix/system.c       | 169 ++++-----------------------------
 dlls/ntdll/unix/thread.c       |  15 +--
 dlls/ntdll/unix/unix_private.h |   1 -
 server/process.c               |   7 --
 server/process.h               |   1 -
 server/protocol.def            |   6 --
 server/thread.c                |  15 +--
 server/trace.c                 |  18 ----
 9 files changed, 19 insertions(+), 216 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -1645,7 +1645,6 @@ size_t server_init_process(void)
 void server_init_process_done(void)
 {
     void *entry, *teb;
-    struct cpu_topology_override *cpu_override = get_cpu_topology_override();
     NTSTATUS status;
     int suspend;
     FILE_FS_DEVICE_INFORMATION info;
@@ -1671,8 +1670,6 @@ void server_init_process_done(void)
     /* Signal the parent process to continue */
     SERVER_START_REQ( init_process_done )
     {
-        if (cpu_override)
-            wine_server_add_data( req, cpu_override, sizeof(*cpu_override) );
         req->teb      = wine_server_client_ptr( teb );
         req->peb      = NtCurrentTeb64() ? NtCurrentTeb64()->Peb : wine_server_client_ptr( peb );
 #ifdef __i386__
diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/system.c
+++ b/dlls/ntdll/unix/system.c
@@ -33,7 +33,6 @@
 #include <sys/types.h>
 #include <unistd.h>
 #include <errno.h>
-#include <assert.h>
 #include <sys/time.h>
 #include <time.h>
 #include <dirent.h>
@@ -236,12 +235,6 @@ static SYSTEM_LOGICAL_PROCESSOR_INFORMATION *logical_proc_info;
 static unsigned int logical_proc_info_len, logical_proc_info_alloc_len;
 static SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX *logical_proc_info_ex;
 static unsigned int logical_proc_info_ex_size, logical_proc_info_ex_alloc_size;
-static struct
-{
-    struct cpu_topology_override mapping;
-    BOOL smt;
-}
-cpu_override;
 
 static int get_possible_cpus(void)
 {
@@ -577,88 +570,6 @@ static void get_cpuinfo( SYSTEM_CPU_INFORMATION *info )
 
 #endif /* End architecture specific feature detection for CPUs */
 
-static void fill_cpu_override(unsigned int host_cpu_count)
-{
-    const char *env_override = getenv("WINE_CPU_TOPOLOGY");
-    unsigned int i;
-    char *s;
-
-    if (!env_override)
-        return;
-
-    cpu_override.mapping.cpu_count = strtol(env_override, &s, 10);
-    if (s == env_override)
-        goto error;
-
-    if (!cpu_override.mapping.cpu_count || cpu_override.mapping.cpu_count > MAXIMUM_PROCESSORS)
-    {
-        ERR("Invalid logical CPU count %u, limit %u.\n", cpu_override.mapping.cpu_count, MAXIMUM_PROCESSORS);
-        goto error;
-    }
-
-    if (tolower(*s) == 's')
-    {
-        cpu_override.mapping.cpu_count *= 2;
-        if (cpu_override.mapping.cpu_count > MAXIMUM_PROCESSORS)
-        {
-            ERR("Logical CPU count exceeds limit %u.\n", MAXIMUM_PROCESSORS);
-            goto error;
-        }
-        cpu_override.smt = TRUE;
-        ++s;
-    }
-    if (*s != ':')
-        goto error;
-    ++s;
-    for (i = 0; i < cpu_override.mapping.cpu_count; ++i)
-    {
-        char *next;
-
-        if (i)
-        {
-            if (*s != ',')
-            {
-                if (!*s)
-                    ERR("Incomplete host CPU mapping string, %u CPUs mapping required.\n",
-                            cpu_override.mapping.cpu_count);
-                goto error;
-            }
-            ++s;
-        }
-
-        cpu_override.mapping.host_cpu_id[i] = strtol(s, &next, 10);
-        if (next == s)
-            goto error;
-        if (cpu_override.mapping.host_cpu_id[i] >= host_cpu_count)
-        {
-            ERR("Invalid host CPU index %u (host_cpu_count %u).\n",
-                    cpu_override.mapping.host_cpu_id[i], host_cpu_count);
-            goto error;
-        }
-        s = next;
-    }
-    if (*s)
-        goto error;
-
-    ERR("Overriding CPU configuration, %u logical CPUs, host CPUs ", cpu_override.mapping.cpu_count);
-    for (i = 0; i < cpu_override.mapping.cpu_count; ++i)
-    {
-        if (i)
-            ERR(",");
-        ERR("%u", cpu_override.mapping.host_cpu_id[i]);
-    }
-    ERR("\n");
-    return;
-error:
-    cpu_override.mapping.cpu_count = 0;
-    ERR("Invalid WINE_CPU_TOPOLOGY string %s (%s).\n", debugstr_a(env_override), debugstr_a(s));
-}
-
-struct cpu_topology_override *get_cpu_topology_override(void)
-{
-    return cpu_override.mapping.cpu_count ? &cpu_override.mapping : NULL;
-}
-
 #ifdef linux
 
 static BOOL grow_logical_proc_buf(void)
@@ -946,8 +857,7 @@ static NTSTATUS create_logical_proc_info(void)
     static const char core_info[] = "/sys/devices/system/cpu/cpu%u/topology/%s";
     static const char cache_info[] = "/sys/devices/system/cpu/cpu%u/cache/index%u/%s";
     static const char numa_info[] = "/sys/devices/system/node/node%u/cpumap";
-    const char *env_fake_logical_cores = getenv("WINE_LOGICAL_CPUS_AS_CORES");
-    BOOL fake_logical_cpus_as_cores = env_fake_logical_cores && atoi(env_fake_logical_cores);
+
     FILE *fcpu_list, *fnuma_list, *f;
     DWORD beg, end, i, j, r, num_cpus = 0, max_cpus = 0;
     char op, name[MAX_PATH];
@@ -976,12 +886,6 @@ static NTSTATUS create_logical_proc_info(void)
         if (op == '-') fscanf(fcpu_list, "%u%c ", &end, &op);
         else end = beg;
 
-        if (cpu_override.mapping.cpu_count)
-        {
-            beg = 0;
-            end = cpu_override.mapping.cpu_count - 1;
-        }
-
         for(i = beg; i <= end; i++)
         {
             DWORD phys_core = 0;
@@ -993,9 +897,7 @@ static NTSTATUS create_logical_proc_info(void)
                 continue;
             }
 
-            sprintf(name, core_info, cpu_override.mapping.cpu_count ? cpu_override.mapping.host_cpu_id[i] : i,
-                    "physical_package_id");
-
+            sprintf(name, core_info, i, "physical_package_id");
             f = fopen(name, "r");
             if (f)
             {
@@ -1022,34 +924,19 @@ static NTSTATUS create_logical_proc_info(void)
 
             /* Mask of logical threads sharing same physical core in kernel core numbering. */
             sprintf(name, core_info, i, "thread_siblings");
-
-            if (cpu_override.mapping.cpu_count)
-            {
-                thread_mask = cpu_override.smt ? (ULONG_PTR)0x3 << (i & ~1) : (ULONG_PTR)1 << i;
-            }
-            else
-            {
-                if(fake_logical_cpus_as_cores || !sysfs_parse_bitmap(name, &thread_mask)) thread_mask = (ULONG_PTR)1<<i;
-            }
+            if(!sysfs_parse_bitmap(name, &thread_mask)) thread_mask = 1<<i;
 
             /* Needed later for NumaNode and Group. */
             all_cpus_mask |= thread_mask;
 
-            if (cpu_override.mapping.cpu_count)
-            {
-                phys_core = cpu_override.smt ? i / 2 : i;
-            }
-            else
+            sprintf(name, core_info, i, "thread_siblings_list");
+            f = fopen(name, "r");
+            if (f)
             {
-               sprintf(name, core_info, i, "thread_siblings_list");
-               f = fake_logical_cpus_as_cores ? NULL : fopen(name, "r");
-               if (f)
-               {
-                   fscanf(f, "%d%c", &phys_core, &op);
-                   fclose(f);
-               }
-               else phys_core = i;
+               fscanf(f, "%d%c", &phys_core, &op);
+               fclose(f);
             }
+            else phys_core = i;
 
             if (!logical_proc_info_add_by_id( RelationProcessorCore, phys_core, thread_mask ))
             {
@@ -1057,40 +944,36 @@ static NTSTATUS create_logical_proc_info(void)
                 return STATUS_NO_MEMORY;
             }
 
-            unsigned int cpu_id;
-
-            cpu_id = cpu_override.mapping.cpu_count ? cpu_override.mapping.host_cpu_id[i] : i;
-
             for (j = 0; j < 4; j++)
             {
                 CACHE_DESCRIPTOR cache;
                 ULONG_PTR mask = 0;
 
-                sprintf(name, cache_info, cpu_id, j, "shared_cpu_map");
+                sprintf(name, cache_info, i, j, "shared_cpu_map");
                 if(!sysfs_parse_bitmap(name, &mask)) continue;
 
-                sprintf(name, cache_info, cpu_id, j, "level");
+                sprintf(name, cache_info, i, j, "level");
                 f = fopen(name, "r");
                 if(!f) continue;
                 fscanf(f, "%u", &r);
                 fclose(f);
                 cache.Level = r;
 
-                sprintf(name, cache_info, cpu_id, j, "ways_of_associativity");
+                sprintf(name, cache_info, i, j, "ways_of_associativity");
                 f = fopen(name, "r");
                 if(!f) continue;
                 fscanf(f, "%u", &r);
                 fclose(f);
                 cache.Associativity = r;
 
-                sprintf(name, cache_info, cpu_id, j, "coherency_line_size");
+                sprintf(name, cache_info, i, j, "coherency_line_size");
                 f = fopen(name, "r");
                 if(!f) continue;
                 fscanf(f, "%u", &r);
                 fclose(f);
                 cache.LineSize = r;
 
-                sprintf(name, cache_info, cpu_id, j, "size");
+                sprintf(name, cache_info, i, j, "size");
                 f = fopen(name, "r");
                 if(!f) continue;
                 fscanf(f, "%u%c", &r, &op);
@@ -1099,7 +982,7 @@ static NTSTATUS create_logical_proc_info(void)
                     WARN("unknown cache size %u%c\n", r, op);
                 cache.Size = (op=='K' ? r*1024 : r);
 
-                sprintf(name, cache_info, cpu_id, j, "type");
+                sprintf(name, cache_info, i, j, "type");
                 f = fopen(name, "r");
                 if(!f) continue;
                 fscanf(f, "%s", name);
@@ -1111,19 +994,6 @@ static NTSTATUS create_logical_proc_info(void)
                 else
                     cache.Type = CacheUnified;
 
-                if (cpu_override.mapping.cpu_count)
-                {
-                    ULONG_PTR host_mask = mask;
-                    unsigned int id;
-
-                    mask = 0;
-                    for (id = 0; id < cpu_override.mapping.cpu_count; ++id)
-                        if (host_mask & ((ULONG_PTR)1 << cpu_override.mapping.host_cpu_id[id]))
-                            mask |= (ULONG_PTR)1 << id;
-
-                    assert(mask);
-                }
-
                 if (!logical_proc_info_add_cache( mask, &cache ))
                 {
                     fclose(fcpu_list);
@@ -1131,9 +1001,6 @@ static NTSTATUS create_logical_proc_info(void)
                 }
             }
         }
-
-        if (cpu_override.mapping.cpu_count)
-            break;
     }
     fclose(fcpu_list);
 
@@ -1353,11 +1220,7 @@ void init_cpu_info(void)
     num = 1;
     FIXME("Detecting the number of processors is not supported.\n");
 #endif
-
-    fill_cpu_override(num);
-
-    peb->NumberOfProcessors = cpu_override.mapping.cpu_count
-            ? cpu_override.mapping.cpu_count : num;
+    peb->NumberOfProcessors = num;
     get_cpuinfo( &cpu_info );
     TRACE( "<- CPU arch %d, level %d, rev %d, features 0x%x\n",
            cpu_info.ProcessorArchitecture, cpu_info.ProcessorLevel, cpu_info.ProcessorRevision,
diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -2342,20 +2342,7 @@ ULONG WINAPI NtGetCurrentProcessorNumber(void)
 
 #if defined(__linux__) && defined(__NR_getcpu)
     int res = syscall(__NR_getcpu, &processor, NULL, NULL);
-    if (res != -1)
-    {
-        struct cpu_topology_override *override = get_cpu_topology_override();
-        unsigned int i;
-
-        if (!override)
-            return processor;
-
-        for (i = 0; i < override->cpu_count; ++i)
-            if (override->host_cpu_id[i] == processor)
-                return i;
-
-        WARN("Thread is running on processor which is not in the defined override.\n");
-    }
+    if (res != -1) return processor;
 #endif
 
     if (peb->NumberOfProcessors > 1)
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -293,7 +293,6 @@ extern NTSTATUS open_unix_file( HANDLE *handle, const char *unix_name, ACCESS_MA
 extern NTSTATUS get_device_info( int fd, struct _FILE_FS_DEVICE_INFORMATION *info ) DECLSPEC_HIDDEN;
 extern void init_files(void) DECLSPEC_HIDDEN;
 extern void init_cpu_info(void) DECLSPEC_HIDDEN;
-extern struct cpu_topology_override *get_cpu_topology_override(void) DECLSPEC_HIDDEN;
 extern void add_completion( HANDLE handle, ULONG_PTR value, NTSTATUS status, ULONG info, BOOL async ) DECLSPEC_HIDDEN;
 extern void set_async_direct_result( HANDLE *optional_handle, NTSTATUS status, ULONG_PTR information, BOOL mark_pending );
 
diff --git a/server/process.c b/server/process.c
index 11111111111..11111111111 100644
--- a/server/process.c
+++ b/server/process.c
@@ -101,7 +101,6 @@ static void process_destroy( struct object *obj );
 static int process_get_esync_fd( struct object *obj, enum esync_type *type );
 static unsigned int process_get_fsync_idx( struct object *obj, enum fsync_type *type );
 static void terminate_process( struct process *process, struct thread *skip, int exit_code, int force );
-static void set_process_affinity( struct process *process, affinity_t affinity );
 
 static const struct object_ops process_ops =
 {
@@ -715,7 +714,6 @@ struct process *create_process( int fd, struct process *parent, unsigned int fla
     process->fast_sync       = NULL;
     process->esync_fd        = -1;
     process->fsync_idx       = 0;
-    process->cpu_override.cpu_count = 0;
     list_init( &process->kernel_object );
     list_init( &process->thread_list );
     list_init( &process->locks );
@@ -1485,8 +1483,6 @@ DECL_HANDLER(get_startup_info)
 DECL_HANDLER(init_process_done)
 {
     struct process *process = current->process;
-    const struct cpu_topology_override *cpu_override = get_req_data();
-    unsigned int have_cpu_override = get_req_data_size() / sizeof(*cpu_override);
     struct memory_view *view;
     client_ptr_t base;
     const pe_image_info_t *image_info;
@@ -1519,9 +1515,6 @@ DECL_HANDLER(init_process_done)
     if (process->debug_obj) set_process_debug_flag( process, 1 );
     reply->entry = current->entry_point;
     reply->suspend = (current->suspend || process->suspend);
-
-    if (have_cpu_override)
-        process->cpu_override = *cpu_override;
 }
 
 /* open a handle to a process */
diff --git a/server/process.h b/server/process.h
index 11111111111..11111111111 100644
--- a/server/process.h
+++ b/server/process.h
@@ -93,7 +93,6 @@ struct process
     struct fast_sync    *fast_sync;       /* fast synchronization object */
     int                  esync_fd;        /* esync file descriptor (signaled on exit) */
     unsigned int         fsync_idx;
-    struct cpu_topology_override cpu_override; /* Overridden CPUs to host CPUs mapping. */
 };
 
 /* process functions */
diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -847,12 +847,6 @@ typedef struct
     lparam_t info;
 } cursor_pos_t;
 
-struct cpu_topology_override
-{
-    unsigned int cpu_count;
-    unsigned char host_cpu_id[64];
-};
-
 struct shared_cursor
 {
     int                  x;                /* cursor position */
diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -797,19 +797,8 @@ int set_thread_affinity( struct thread *thread, affinity_t affinity )
 
         CPU_ZERO( &set );
         for (i = 0, mask = 1; mask; i++, mask <<= 1)
-            if (affinity & mask)
-            {
-                if (thread->process->cpu_override.cpu_count)
-                {
-                    if (i >= thread->process->cpu_override.cpu_count)
-                        break;
-                    CPU_SET( thread->process->cpu_override.host_cpu_id[i], &set );
-                }
-                else
-                {
-                    CPU_SET( i, &set );
-                }
-            }
+            if (affinity & mask) CPU_SET( i, &set );
+
         ret = sched_setaffinity( thread->unix_tid, sizeof(set), &set );
     }
 #endif
diff --git a/server/trace.c b/server/trace.c
index 11111111111..11111111111 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -1337,24 +1337,6 @@ static void dump_varargs_handle_infos( const char *prefix, data_size_t size )
     fprintf( stderr, "%s", prefix );
 }
 
-static void dump_varargs_cpu_topology_override( const char *prefix, data_size_t size )
-{
-    const struct cpu_topology_override *cpu_topology = cur_data;
-    unsigned int i;
-
-    if (size < sizeof(*cpu_topology))
-        return;
-
-    fprintf( stderr,"%s{", prefix );
-    for (i = 0; i < cpu_topology->cpu_count; ++i)
-    {
-        if (i) fputc( ',', stderr );
-        fprintf( stderr, "%u", cpu_topology->host_cpu_id[i] );
-    }
-    fputc( '}', stderr );
-    remove_data( size );
-}
-
 static void dump_varargs_directory_entries( const char *prefix, data_size_t size )
 {
     fprintf( stderr, "%s{", prefix );
