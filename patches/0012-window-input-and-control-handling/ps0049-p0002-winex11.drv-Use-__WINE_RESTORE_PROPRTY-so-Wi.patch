From 276b6c6a4a77bd4fcecb1479ed32fc11a77f38bb Mon Sep 17 00:00:00 2001
From: Arkadiusz Hiler <ahiler@codeweavers.com>
Date: Fri, 2 Jul 2021 16:01:29 +0300
Subject: [PATCH 2/2] winex11.drv: Use __WINE_RESTORE_PROPRTY so Window is
 un-minimized on FocusIn.

On X11 / XWayland the PropertyNotify for WM_STATE change from
IconicState to NormalState arrives before the WM_TAKE_FOCUS
ClientMessage and the FocusIn events.

Converting that state change too early to a WM_SYSCOMMAND SC_RESTORE
results in it (and the ACTIVATE events because of the previous HAX)
arriving without the window being set to foregrounds first.

This breaks the expectations of Project CARS 3. The game tries to
re-acquire DirectInput devices with cooperative level set to
DISCL_FOREGROUND, which fails.

Signed-off-by: Arkadiusz Hiler <ahiler@codeweavers.com>

CW-Bug-Id: #19011
---
 dlls/winex11.drv/event.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -77,6 +77,8 @@ WINE_DECLARE_DEBUG_CHANNEL(xdnd);
 #define XEMBED_UNREGISTER_ACCELERATOR 13
 #define XEMBED_ACTIVATE_ACCELERATOR   14
 
+static const WCHAR restore_window_propW[] = {'_','_','W','I','N','E','_','R','E','S','T','O','R','E','_','W','I','N','D','O','W',0};
+
 Bool (*pXGetEventData)( Display *display, XEvent /*XGenericEventCookie*/ *event ) = NULL;
 void (*pXFreeEventData)( Display *display, XEvent /*XGenericEventCookie*/ *event ) = NULL;
 
@@ -545,7 +547,8 @@ static inline BOOL can_activate_window( HWND hwnd )
 
     if (!(style & WS_VISIBLE)) return FALSE;
     if ((style & (WS_POPUP|WS_CHILD)) == WS_CHILD) return FALSE;
-    if (style & (WS_MINIMIZE | WS_DISABLED)) return FALSE;
+    if (style & WS_DISABLED) return FALSE;
+    if ((style & WS_MINIMIZE) && !NtUserGetProp( hwnd, restore_window_propW )) return FALSE;
     if (NtUserGetWindowLongW( hwnd, GWL_EXSTYLE ) & WS_EX_NOACTIVATE) return FALSE;
     if (hwnd == NtUserGetDesktopWindow()) return FALSE;
     if (NtUserGetWindowRect( hwnd, &rect ) && IsRectEmpty( &rect )) return FALSE;
@@ -1411,12 +1414,15 @@ static void handle_wm_state_notify( HWND hwnd, XPropertyEvent *event, BOOL updat
                 release_win_data( data );
                 if ((style & (WS_MINIMIZE | WS_VISIBLE)) == (WS_MINIMIZE | WS_VISIBLE))
                     set_foreground_window( hwnd, x11drv_time_to_ticks( event->time ) );
-                send_message( hwnd, WM_SYSCOMMAND, SC_RESTORE, 0 );
                 if (keep_state && (data = get_win_data( hwnd )))
                 {
                     data->keep_fs_state = FALSE;
                     release_win_data( data );
                 }
+                if ((style & (WS_MINIMIZE | WS_VISIBLE)) == (WS_MINIMIZE | WS_VISIBLE) && NtUserGetForegroundWindow() != hwnd)
+                    NtUserSetProp( hwnd, restore_window_propW, (HANDLE) TRUE );
+                else
+                    send_message( hwnd, WM_SYSCOMMAND, SC_RESTORE, 0 );
                 return;
             }
             TRACE( "not restoring win %p/%lx style %08x\n", data->hwnd, data->whole_window, style );
