From 5ba367cab886f2a0eb24fc3d61f7ded2027ec874 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sun, 14 Nov 2021 14:40:55 +0100
Subject: [PATCH 7/9] winex11.drv: Support XInput2 events for individual
 windows.

This will allow us to listen to the XInput version of several events,
which can bring additional information.
---
 dlls/winex11.drv/desktop.c |   1 +
 dlls/winex11.drv/event.c   |  12 ++++
 dlls/winex11.drv/mouse.c   | 113 +++++++++++++++++++++++++++----------
 dlls/winex11.drv/window.c  |   3 +
 dlls/winex11.drv/x11drv.h  |   1 +
 5 files changed, 100 insertions(+), 30 deletions(-)

diff --git a/dlls/winex11.drv/desktop.c b/dlls/winex11.drv/desktop.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/desktop.c
+++ b/dlls/winex11.drv/desktop.c
@@ -86,6 +86,7 @@ BOOL X11DRV_CreateDesktop( const WCHAR *name, UINT width, UINT height )
                          0, 0, width, height, 0, default_visual.depth, InputOutput,
                          default_visual.visual, CWEventMask | CWCursor | CWColormap, &win_attr );
     if (!win) return FALSE;
+    X11DRV_XInput2_Enable( display, win, win_attr.event_mask );
     XFlush( display );
 
     X11DRV_init_desktop( win, width, height );
diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -235,6 +235,18 @@ static Bool filter_event( Display *display, XEvent *event, char *arg )
         return (mask & QS_MOUSEBUTTON) != 0;
 #ifdef GenericEvent
     case GenericEvent:
+#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
+        if (event->xcookie.extension == xinput2_opcode)
+        {
+            switch (event->xcookie.evtype)
+            {
+            case XI_RawMotion:
+            case XI_DeviceChanged:
+                return (mask & QS_MOUSEMOVE) != 0;
+            }
+        }
+#endif
+        return (mask & QS_SENDMESSAGE) != 0;
 #endif
     case MotionNotify:
     case EnterNotify:
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -326,6 +326,7 @@ static void update_relative_valuators(XIAnyClassInfo **valuators, int n_valuator
     thread_data->x_valuator.value = 0;
     thread_data->y_valuator.value = 0;
 }
+#endif
 
 
 /***********************************************************************
@@ -350,47 +351,50 @@ void X11DRV_XInput2_Init(void)
 
 
 /***********************************************************************
- *              enable_xinput2
+ *              X11DRV_XInput2_Enable
  */
-static void enable_xinput2(void)
+void X11DRV_XInput2_Enable( Display *display, Window window, long event_mask )
 {
-    struct x11drv_thread_data *data = x11drv_thread_data();
-    XIEventMask mask;
-    XIDeviceInfo *pointer_info;
+#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
+    struct x11drv_thread_data *data = x11drv_init_thread_data();
     unsigned char mask_bits[XIMaskLen(XI_LASTEVENT)];
+    BOOL raw = (window == None);
+    XIDeviceInfo *pointer_info;
+    XIEventMask mask;
     int count;
 
+    if (data->xi2_rawinput_only && !event_mask) return;
+
     mask.mask     = mask_bits;
     mask.mask_len = sizeof(mask_bits);
     mask.deviceid = XIAllMasterDevices;
     memset( mask_bits, 0, sizeof(mask_bits) );
-    XISetMask( mask_bits, XI_DeviceChanged );
-    XISetMask( mask_bits, XI_RawMotion );
-    XISetMask( mask_bits, XI_ButtonPress );
 
-    pXISelectEvents( data->display, DefaultRootWindow( data->display ), &mask, 1 );
+    if (event_mask & PointerMotionMask)
+    {
+        event_mask &= ~PointerMotionMask;
+        XISetMask( mask_bits, XI_DeviceChanged );
+        XISetMask( mask_bits, raw ? XI_RawMotion : XI_Motion );
+    }
+    if (event_mask & ButtonPressMask)
+    {
+        event_mask &= ~ButtonPressMask;
+        XISetMask( mask_bits, XI_DeviceChanged );
+        XISetMask( mask_bits, raw ? XI_RawButtonPress : XI_ButtonPress );
+    }
+    if (event_mask & ButtonReleaseMask)
+    {
+        event_mask &= ~ButtonReleaseMask;
+        XISetMask( mask_bits, XI_DeviceChanged );
+        XISetMask( mask_bits, raw ? XI_RawButtonRelease : XI_ButtonRelease );
+    }
+
+    pXISelectEvents( display, raw ? DefaultRootWindow( display ) : window, &mask, 1 );
+    if (!raw) XSelectInput( display, window, event_mask );
 
     pointer_info = pXIQueryDevice( data->display, data->xi2_core_pointer, &count );
     update_relative_valuators( pointer_info->classes, pointer_info->num_classes );
     pXIFreeDeviceInfo( pointer_info );
-}
-
-#endif
-
-/***********************************************************************
- *              disable_xinput2
- */
-static void disable_xinput2(void)
-{
-#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
-    struct x11drv_thread_data *data = x11drv_thread_data();
-    XIEventMask mask;
-
-    mask.mask = NULL;
-    mask.mask_len = 0;
-    mask.deviceid = XIAllMasterDevices;
-
-    pXISelectEvents( data->display, DefaultRootWindow( data->display ), &mask, 1 );
 #endif
 }
 
@@ -424,7 +428,7 @@ static BOOL grab_clipping_window( const RECT *clip )
     }
 
     /* enable XInput2 unless we are already clipping */
-    if (!data->clipping_cursor) enable_xinput2();
+    if (!data->clipping_cursor) X11DRV_XInput2_Enable( data->display, None, PointerMotionMask );
 
     TRACE( "clipping to %s win %lx\n", wine_dbgstr_rect(clip), clip_window );
 
@@ -467,7 +471,7 @@ static BOOL grab_clipping_window( const RECT *clip )
 
     if (!clipping_cursor)
     {
-        disable_xinput2();
+        X11DRV_XInput2_Enable( data->display, None, 0 );
         return FALSE;
     }
     clip_rect = *clip;
@@ -496,7 +500,6 @@ void ungrab_clipping_window(void)
     if (clipping_cursor) XUngrabPointer( data->display, CurrentTime );
     clipping_cursor = FALSE;
     data->clipping_cursor = FALSE;
-    disable_xinput2();
 }
 
 /***********************************************************************
@@ -1792,6 +1795,52 @@ static BOOL X11DRV_RawMotion( XGenericEventCookie *xev )
     return TRUE;
 }
 
+static BOOL X11DRV_XIDeviceEvent( XIDeviceEvent *event )
+{
+    DWORD button = event->detail - 1;
+    INPUT input;
+    HWND hwnd;
+
+    if (XFindContext( event->display, event->event, winContext, (char **)&hwnd ) != 0)
+        hwnd = 0;  /* not for a registered window */
+    if (!hwnd && event->event == root_window) hwnd = NtUserGetDesktopWindow();
+
+    TRACE( "evtype %u hwnd %p/%lx pos %f,%f detail %u flags %#x serial %lu\n",
+           event->evtype, hwnd, event->event, event->event_x, event->event_y, event->detail, event->flags, event->serial );
+
+    if (!hwnd && is_old_motion_event( event->serial ))
+    {
+        TRACE( "pos %d,%d old serial %lu, ignoring\n", input.mi.dx, input.mi.dy, event->serial );
+        return FALSE;
+    }
+
+    input.mi.dx          = event->event_x;
+    input.mi.dy          = event->event_y;
+    input.mi.mouseData   = 0;
+    input.mi.dwFlags     = MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE;
+    input.mi.time        = x11drv_time_to_ticks( event->time );
+    input.mi.dwExtraInfo = 0;
+
+    switch (event->evtype)
+    {
+    case XI_ButtonPress:
+        if (button >= NB_BUTTONS) return FALSE;
+        set_window_user_time( event->display, event->event, event->time );
+        input.mi.mouseData = button_down_data[button];
+        input.mi.dwFlags |= button_down_flags[button];
+        break;
+    case XI_ButtonRelease:
+        if (button >= NB_BUTTONS) return FALSE;
+        input.mi.mouseData = button_up_data[button];
+        input.mi.dwFlags |= button_up_flags[button];
+        break;
+    }
+
+    map_event_coords( hwnd, event->event, event->root, event->root_x, event->root_y, &input );
+    send_mouse_input( hwnd, event->event, event->detail, &input );
+    return TRUE;
+}
+
 #endif /* HAVE_X11_EXTENSIONS_XINPUT2_H */
 
 /***********************************************************************
@@ -1863,6 +1912,10 @@ BOOL X11DRV_GenericEvent( HWND hwnd, XEvent *xev )
     case XI_RawMotion:
         ret = X11DRV_RawMotion( event );
         break;
+    case XI_Motion:
+    case XI_ButtonPress:
+    case XI_ButtonRelease:
+        return X11DRV_XIDeviceEvent( event->data );
 
     default:
         TRACE( "Unhandled event %#x\n", event->evtype );
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -374,6 +374,7 @@ static void sync_window_style( struct x11drv_win_data *data )
         int mask = get_window_attributes( data, &attr );
 
         XChangeWindowAttributes( data->display, data->whole_window, mask, &attr );
+        X11DRV_XInput2_Enable( data->display, data->whole_window, attr.event_mask );
     }
 }
 
@@ -1750,6 +1751,7 @@ static void create_whole_window( struct x11drv_win_data *data )
                                         data->vis.visual, mask, &attr );
     if (!data->whole_window) goto done;
 
+    X11DRV_XInput2_Enable( data->display, data->whole_window, attr.event_mask );
     set_initial_wm_hints( data->display, data->whole_window );
     set_wm_hints( data );
 
@@ -2104,6 +2106,7 @@ BOOL X11DRV_CreateWindow( HWND hwnd )
         data->clip_window = XCreateWindow( data->display, root_window, 0, 0, 1, 1, 0, 0,
                                            InputOnly, default_visual.visual,
                                            CWOverrideRedirect | CWEventMask, &attr );
+        X11DRV_XInput2_Enable( data->display, data->clip_window, attr.event_mask );
         XFlush( data->display );
         NtUserSetProp( hwnd, clip_window_prop, (HANDLE)data->clip_window );
         X11DRV_DisplayDevices_RegisterEventHandlers();
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -265,6 +265,7 @@ extern void X11DRV_ThreadDetach(void) DECLSPEC_HIDDEN;
 extern void X11DRV_Xcursor_Init(void) DECLSPEC_HIDDEN;
 extern void X11DRV_XInput2_Load(void) DECLSPEC_HIDDEN;
 extern void X11DRV_XInput2_Init(void) DECLSPEC_HIDDEN;
+extern void X11DRV_XInput2_Enable( Display *display, Window window, long event_mask ) DECLSPEC_HIDDEN;
 
 extern DWORD copy_image_bits( BITMAPINFO *info, BOOL is_r8g8b8, XImage *image,
                               const struct gdi_image_bits *src_bits, struct gdi_image_bits *dst_bits,
-- 
0.0.0

