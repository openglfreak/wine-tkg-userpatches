From 858f32f31996f18f51372214e0320df740300269 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 1 Jun 2022 15:27:25 +0200
Subject: [PATCH 06/18] user32/tests: Use CRT allocation functions.

---
 dlls/user32/tests/clipboard.c  |  8 +++---
 dlls/user32/tests/cursoricon.c | 45 +++++++++++++++++-----------------
 dlls/user32/tests/dde.c        |  9 ++++---
 dlls/user32/tests/input.c      |  4 +--
 dlls/user32/tests/listbox.c    | 16 ++++++------
 dlls/user32/tests/monitor.c    | 11 ++++-----
 dlls/user32/tests/msg.c        | 28 +++++++++------------
 7 files changed, 58 insertions(+), 63 deletions(-)

diff --git a/dlls/user32/tests/clipboard.c b/dlls/user32/tests/clipboard.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/clipboard.c
+++ b/dlls/user32/tests/clipboard.c
@@ -1531,10 +1531,10 @@ static void test_handles( HWND hwnd )
 
     if (0)  /* crashes on vista64 */
     {
-        ptr = HeapAlloc( GetProcessHeap(), 0, 0 );
+        ptr = malloc( 0 );
         h = SetClipboardData( format_id2, ptr );
         ok( !h, "got %p\n", h );
-        HeapFree( GetProcessHeap(), 0, ptr );
+        free( ptr );
     }
 
     h = SetClipboardData( format_id2, empty_fixed );
@@ -1547,12 +1547,12 @@ static void test_handles( HWND hwnd )
     ok( h == hmoveable, "got %p\n", h );
     ok( is_moveable( h ), "expected moveable mem %p\n", h );
 
-    ptr = HeapAlloc( GetProcessHeap(), 0, 37 );
+    ptr = malloc( 37 );
     h = SetClipboardData( 0xdeadfade, ptr );
     ok( h == ptr || !h, "got %p\n", h );
     if (!h)  /* heap blocks are rejected on >= win8 */
     {
-        HeapFree( GetProcessHeap(), 0, ptr );
+        free( ptr );
         ptr = NULL;
     }
 
diff --git a/dlls/user32/tests/cursoricon.c b/dlls/user32/tests/cursoricon.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/cursoricon.c
+++ b/dlls/user32/tests/cursoricon.c
@@ -608,7 +608,7 @@ static void do_test_copy_image(UINT type, UINT depth)
     unsigned int i;
 
     /* Create a device-independent bitmap (DIB) */
-    info = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(BITMAPINFOHEADER) + 256 * sizeof(RGBQUAD));
+    info = calloc( 1, sizeof(BITMAPINFOHEADER) + 256 * sizeof(RGBQUAD) );
     info->bmiHeader.biSize = sizeof(info->bmiHeader);
     info->bmiHeader.biWidth = 2;
     info->bmiHeader.biHeight = 2;
@@ -748,7 +748,7 @@ static void do_test_copy_image(UINT type, UINT depth)
         }
     }
 
-    HeapFree(GetProcessHeap(), 0, info);
+    free( info );
 }
 
 static void test_initial_cursor(void)
@@ -994,7 +994,7 @@ static void test_CreateIcon(void)
 
     /* test creating an icon from a DIB section */
 
-    bmpinfo = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, FIELD_OFFSET(BITMAPINFO,bmiColors[256]));
+    bmpinfo = calloc( 1, FIELD_OFFSET( BITMAPINFO, bmiColors[256] ) );
     bmpinfo->bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
     bmpinfo->bmiHeader.biWidth = 32;
     bmpinfo->bmiHeader.biHeight = 32;
@@ -1060,7 +1060,7 @@ static void test_CreateIcon(void)
 
     DeleteObject(hbmMask);
     DeleteObject(hbmColor);
-    HeapFree( GetProcessHeap(), 0, bmpinfo );
+    free( bmpinfo );
 
     ReleaseDC(0, hdc);
 }
@@ -1262,7 +1262,7 @@ static void create_ico_file(const char *filename, const test_icon_entries_t *tes
     for(i=0; i<entry_cnt; i++)
         icon_size += icon_bpp * test_icon_entries[i].width * test_icon_entries[i].height / 8;
 
-    buf = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, icon_size);
+    buf = calloc( 1, icon_size );
     dir = (CURSORICONFILEDIR*)buf;
 
     dir->idReserved = 0;
@@ -1301,7 +1301,7 @@ static void create_ico_file(const char *filename, const test_icon_entries_t *tes
     ok(ret && bytes_written == icon_size, "icon.ico created improperly.\n");
     CloseHandle(file);
 
-    HeapFree(GetProcessHeap(), 0, buf);
+    free( buf );
 }
 
 static void create_bitmap_file(const char *filename, const BITMAPINFO *bmi, const unsigned char *bits)
@@ -1584,7 +1584,7 @@ static void test_CreateIconFromResource(void)
 #define CRSR_RES_SIZE (2*sizeof(INT16) + ICON_RES_SIZE)
 
     /* Set icon data. */
-    hotspot = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, CRSR_RES_SIZE);
+    hotspot = calloc( 1, CRSR_RES_SIZE );
 
     /* Cursor resources have an extra hotspot, icon resources not. */
     hotspot[0] = 3;
@@ -1718,7 +1718,7 @@ static void test_CreateIconFromResource(void)
     ok(handle != NULL, "Create icon failed, error %lu.\n", GetLastError());
     ok(handle != old_handle, "Expect a different handle.\n");
 
-    HeapFree(GetProcessHeap(), 0, hotspot);
+    free( hotspot );
 
     /* Get icon resource bits */
     user32 = GetModuleHandleA("user32.dll");
@@ -1767,7 +1767,7 @@ static int check_cursor_data( HDC hdc, HCURSOR hCursor, void *data, int length)
     ok(ret, "GetIconInfo() failed\n");
     if (!ret) return 0;
     ret = 0;
-    info = HeapAlloc( GetProcessHeap(), 0, FIELD_OFFSET( BITMAPINFO, bmiColors[256] ));
+    info = malloc( FIELD_OFFSET( BITMAPINFO, bmiColors[256] ) );
     ok(info != NULL, "HeapAlloc() failed\n");
     if (!info) return 0;
 
@@ -1782,7 +1782,7 @@ static int check_cursor_data( HDC hdc, HCURSOR hCursor, void *data, int length)
     info->bmiHeader.biYPelsPerMeter = 0;
     info->bmiHeader.biClrUsed = 0;
     info->bmiHeader.biClrImportant = 0;
-    image = HeapAlloc( GetProcessHeap(), 0, info->bmiHeader.biSizeImage );
+    image = malloc( info->bmiHeader.biSizeImage );
     ok(image != NULL, "HeapAlloc() failed\n");
     if (!image) goto cleanup;
     ret = GetDIBits( hdc, iinfo.hbmColor, 0, 32, image, info, DIB_RGB_COLORS );
@@ -1793,8 +1793,8 @@ static int check_cursor_data( HDC hdc, HCURSOR hCursor, void *data, int length)
         ok(ret, "%04x: Expected 0x%lx, actually 0x%lx\n", i, ((COLORREF *)data)[i], ((COLORREF *)image)[i] );
     }
 cleanup:
-    HeapFree( GetProcessHeap(), 0, image );
-    HeapFree( GetProcessHeap(), 0, info );
+    free( image );
+    free( info );
     return ret;
 }
 
@@ -1847,7 +1847,7 @@ static void test_GetCursorFrameInfo(void)
 #define CRSR_RES_SIZE (2*sizeof(INT16) + ICON_RES_SIZE)
 
     /* Set icon data. */
-    hotspot = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, CRSR_RES_SIZE);
+    hotspot = calloc( 1, CRSR_RES_SIZE );
 
     /* Cursor resources have an extra hotspot, icon resources not. */
     hotspot[0] = 3;
@@ -2039,7 +2039,7 @@ static void test_GetCursorFrameInfo(void)
     ret = DestroyCursor(h1);
     ok(ret, "DestroyCursor() failed (error = %ld).\n", GetLastError());
 
-    HeapFree(GetProcessHeap(), 0, hotspot);
+    free( hotspot );
 cleanup:
     if(bmpOld) SelectObject(hdc, bmpOld);
     if(bmp) DeleteObject(bmp);
@@ -2844,8 +2844,7 @@ static void test_monochrome_icon(void)
     ULONG icon_size;
     BOOL monochrome, use_core_info;
 
-    icon_data = HeapAlloc(GetProcessHeap(), 0, sizeof(CURSORICONFILEDIR) + sizeof(BITMAPINFOHEADER) +
-                                               2 * sizeof(RGBQUAD) + sizeof(ULONG));
+    icon_data = malloc( sizeof(CURSORICONFILEDIR) + sizeof(BITMAPINFOHEADER) + 2 * sizeof(RGBQUAD) + sizeof(ULONG) );
 
     for (monochrome = FALSE; monochrome <= TRUE; monochrome++)
     for (use_core_info = FALSE; use_core_info <= TRUE; use_core_info++)
@@ -2945,7 +2944,7 @@ static void test_monochrome_icon(void)
         DeleteFileA("icon.ico");
     }
 
-    HeapFree(GetProcessHeap(), 0, icon_data);
+    free( icon_data );
 }
 
 static COLORREF get_color_from_bits(const unsigned char *bits, const BITMAPINFO *bmi,
@@ -2983,7 +2982,7 @@ static void compare_bitmap_bits_(unsigned int line, HDC hdc, HBITMAP bitmap, BIT
     unsigned int row, column;
     int ret;
 
-    result_bits = HeapAlloc(GetProcessHeap(), 0, result_bits_size);
+    result_bits = malloc( result_bits_size );
     ret = GetDIBits(hdc, bitmap, 0, bmi->bmiHeader.biHeight,
             result_bits, bmi, DIB_RGB_COLORS);
     ok(ret == bmi->bmiHeader.biHeight, "Unexpected GetDIBits result %d, GetLastError() %lu.\n",
@@ -3002,7 +3001,7 @@ static void compare_bitmap_bits_(unsigned int line, HDC hdc, HBITMAP bitmap, BIT
                     "Colors do not match, got 0x%06lx, expected 0x%06lx, test_index %u, row %u, column %u.\n",
                     result, expected, test_index, row, column);
         }
-    HeapFree(GetProcessHeap(), 0, result_bits);
+    free( result_bits );
 }
 
 static void test_Image_StretchMode(void)
@@ -3104,8 +3103,8 @@ static void test_Image_StretchMode(void)
     HDC hdc;
 
     bmi_size = sizeof(BITMAPINFOHEADER) + 256 * sizeof(RGBQUAD);
-    bmi = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, bmi_size);
-    bmi_output = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, bmi_size);
+    bmi = calloc( 1, bmi_size );
+    bmi_output = calloc( 1, bmi_size );
     bmi->bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
     bmi->bmiHeader.biPlanes = 1;
     bmi->bmiHeader.biCompression = BI_RGB;
@@ -3154,8 +3153,8 @@ static void test_Image_StretchMode(void)
         DeleteObject(bitmap);
     }
     ReleaseDC(0, hdc);
-    HeapFree(GetProcessHeap(), 0, bmi_output);
-    HeapFree(GetProcessHeap(), 0, bmi);
+    free( bmi_output );
+    free( bmi );
 }
 
 static void test_copy_image(void)
diff --git a/dlls/user32/tests/dde.c b/dlls/user32/tests/dde.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/dde.c
+++ b/dlls/user32/tests/dde.c
@@ -776,7 +776,7 @@ static HDDEDATA CALLBACK server_ddeml_callback(UINT uType, UINT uFmt, HCONV hcon
 
             size = DdeGetData(hdata, NULL, 0, 0);
             ok(size == 17, "DdeGetData should have returned 17 not %ld\n", size);
-            ptr = HeapAlloc(GetProcessHeap(), 0, size);
+            ptr = malloc( size );
             ok(ptr != NULL,"HeapAlloc should have returned ptr not NULL\n");
             rsize = DdeGetData(hdata, (LPBYTE)ptr, size, 0);
             ok(rsize == size, "DdeGetData did not return %ld bytes but %ld\n", size, rsize);
@@ -785,7 +785,7 @@ static HDDEDATA CALLBACK server_ddeml_callback(UINT uType, UINT uFmt, HCONV hcon
             ok(size == 17, "Expected 17, got %ld\n", size);
             ret = (HDDEDATA)DDE_FACK;
 
-            HeapFree(GetProcessHeap(), 0, ptr);
+            free( ptr );
         }
 
         return ret;
@@ -2423,7 +2423,8 @@ static HDDEDATA CALLBACK server_end_to_end_callback(UINT uType, UINT uFmt, HCONV
         ok(size == 12, "Expected 12, got %ld, msg_index=%d\n", size, msg_index);
 
         size = DdeGetData(hdata, NULL, 0, 0);
-        ok((buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, size)) != NULL, "should not be null\n");
+        buffer = calloc( 1, size );
+        ok( buffer != NULL, "should not be null\n" );
         rsize = DdeGetData(hdata, buffer, size, 0);
         ok(rsize == size, "Incorrect size returned, expected %ld got %ld, msg_index=%d\n",
            size, rsize, msg_index);
@@ -2543,7 +2544,7 @@ static HDDEDATA CALLBACK server_end_to_end_callback(UINT uType, UINT uFmt, HCONV
             ok( 0, "Invalid message %u\n", msg_index );
             break;
         }
-        HeapFree(GetProcessHeap(), 0, buffer);
+        free( buffer );
         return (HDDEDATA) DDE_FACK;
     }
     case XTYP_DISCONNECT:
diff --git a/dlls/user32/tests/input.c b/dlls/user32/tests/input.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/input.c
+++ b/dlls/user32/tests/input.c
@@ -2032,7 +2032,7 @@ static void test_GetRawInputDeviceList(void)
                 (info.dwType != RIM_TYPEHID && sz == 0),
                 "Got wrong PPD size for type 0x%lx: %u\n", info.dwType, sz);
 
-        ppd = HeapAlloc(GetProcessHeap(), 0, sz);
+        ppd = malloc( sz );
         ret = pGetRawInputDeviceInfoW(devices[i].hDevice, RIDI_PREPARSEDDATA, ppd, &sz);
         ok(ret == sz, "GetRawInputDeviceInfo gave wrong return: %u, should be %u\n", ret, sz);
 
@@ -2059,7 +2059,7 @@ static void test_GetRawInputDeviceList(void)
                 HidD_FreePreparsedData(preparsed);
         }
 
-        HeapFree(GetProcessHeap(), 0, ppd);
+        free( ppd );
 
         CloseHandle(file);
     }
diff --git a/dlls/user32/tests/listbox.c b/dlls/user32/tests/listbox.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/listbox.c
+++ b/dlls/user32/tests/listbox.c
@@ -178,18 +178,18 @@ check (DWORD style, const struct listbox_test test)
 	WCHAR *txtw;
 	int resA, resW;
 
-	txt = HeapAlloc (GetProcessHeap(), HEAP_ZERO_MEMORY, size+1);
-	resA=SendMessageA(hLB, LB_GETTEXT, i, (LPARAM)txt);
-        ok(!strcmp (txt, strings[i]), "returned string for item %d does not match %s vs %s\n", i, txt, strings[i]);
+    txt = calloc( 1, size + 1 );
+    resA=SendMessageA(hLB, LB_GETTEXT, i, (LPARAM)txt);
+    ok(!strcmp (txt, strings[i]), "returned string for item %d does not match %s vs %s\n", i, txt, strings[i]);
 
-	txtw = HeapAlloc (GetProcessHeap(), HEAP_ZERO_MEMORY, 2*size+2);
-	resW=SendMessageW(hLB, LB_GETTEXT, i, (LPARAM)txtw);
+    txtw = calloc( 1, 2 * size + 2 );
+    resW=SendMessageW(hLB, LB_GETTEXT, i, (LPARAM)txtw);
 	ok(resA == resW, "Unexpected text length.\n");
 	WideCharToMultiByte( CP_ACP, 0, txtw, -1, txt, size, NULL, NULL );
-        ok(!strcmp (txt, strings[i]), "returned string for item %d does not match %s vs %s\n", i, txt, strings[i]);
+    ok(!strcmp (txt, strings[i]), "returned string for item %d does not match %s vs %s\n", i, txt, strings[i]);
 
-	HeapFree (GetProcessHeap(), 0, txtw);
-	HeapFree (GetProcessHeap(), 0, txt);
+    free( txtw );
+    free( txt );
   }
   
   /* Confirm the count of items, and that an invalid delete does not remove anything */
diff --git a/dlls/user32/tests/monitor.c b/dlls/user32/tests/monitor.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/monitor.c
+++ b/dlls/user32/tests/monitor.c
@@ -471,9 +471,8 @@ static void test_ChangeDisplaySettingsEx(void)
 
     /* Save the original mode for all devices so that they can be restored at the end of tests */
     device_count = 0;
-    device_size = 2;
-    devices = heap_calloc(device_size, sizeof(*devices));
-    ok(devices != NULL, "Failed to allocate memory.\n");
+    device_size = 0;
+    devices = NULL;
 
     primary = 0;
     memset(&dd, 0, sizeof(dd));
@@ -494,8 +493,8 @@ static void test_ChangeDisplaySettingsEx(void)
 
         if (device_count >= device_size)
         {
-            device_size *= 2;
-            devices = heap_realloc(devices, device_size * sizeof(*devices));
+            device_size = max( 2, device_size * 3 / 2 );
+            devices = realloc( devices, device_size * sizeof(*devices) );
             ok(devices != NULL, "Failed to reallocate memory.\n");
         }
 
@@ -1141,7 +1140,7 @@ static void test_ChangeDisplaySettingsEx(void)
     for (device = 0; device < device_count; ++device)
         expect_dm(&devices[device].original_mode, devices[device].name, 0);
 
-    heap_free(devices);
+    free( devices );
 }
 
 static void test_monitors(void)
diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/msg.c
+++ b/dlls/user32/tests/msg.c
@@ -2416,15 +2416,11 @@ static void add_message_(int line, const struct recvd_message *msg)
     struct recvd_message *seq;
 
     EnterCriticalSection( &sequence_cs );
-    if (!sequence)
-    {
-	sequence_size = 10;
-	sequence = HeapAlloc( GetProcessHeap(), 0, sequence_size * sizeof(*sequence) );
-    }
     if (sequence_cnt == sequence_size) 
     {
-	sequence_size *= 2;
-	sequence = HeapReAlloc( GetProcessHeap(), 0, sequence, sequence_size * sizeof(*sequence) );
+        sequence_size = max( 10, sequence_size * 3 / 2 );
+        sequence = realloc( sequence, sequence_size * sizeof(*sequence) );
+        ok( !!sequence, "Failed to allocate memory\n" );
     }
 
     seq = &sequence[sequence_cnt++];
@@ -2625,7 +2621,7 @@ static void flush_events(void)
 static void flush_sequence(void)
 {
     EnterCriticalSection( &sequence_cs );
-    HeapFree(GetProcessHeap(), 0, sequence);
+    free( sequence );
     sequence = 0;
     sequence_cnt = sequence_size = 0;
     LeaveCriticalSection( &sequence_cs );
@@ -8196,13 +8192,13 @@ void dump_region(HRGN hrgn)
         return;
     }
     if (!(size = GetRegionData( hrgn, 0, NULL ))) return;
-    if (!(data = HeapAlloc( GetProcessHeap(), 0, size ))) return;
+    if (!(data = malloc( size ))) return;
     GetRegionData( hrgn, size, data );
     printf("%ld rects:", data->rdh.nCount );
     for (i = 0, rect = (RECT *)data->Buffer; i < data->rdh.nCount; i++, rect++)
         printf( " %s", wine_dbgstr_rect( rect ));
     printf("\n");
-    HeapFree( GetProcessHeap(), 0, data );
+    free( data );
 }
 
 #define check_update_rgn( hwnd, hrgn ) check_update_rgn_( __LINE__, hwnd, hrgn )
@@ -17958,9 +17954,9 @@ static void test_broadcast(void)
     HWND hwnd;
     HWND *hwnd_sub;
 
-    hwnd_sub = HeapAlloc( GetProcessHeap(), 0, ARRAY_SIZE(bcast_expect) * sizeof(*hwnd_sub) );
-    g_oldproc_sub = HeapAlloc( GetProcessHeap(), 0, ARRAY_SIZE(bcast_expect) * sizeof(*g_oldproc_sub) );
-    g_broadcast_sub_wparam = HeapAlloc( GetProcessHeap(), 0, ARRAY_SIZE(bcast_expect) * sizeof(*g_broadcast_sub_wparam) );
+    hwnd_sub = malloc( ARRAY_SIZE(bcast_expect) *sizeof(*hwnd_sub) );
+    g_oldproc_sub = malloc( ARRAY_SIZE(bcast_expect) *sizeof(*g_oldproc_sub) );
+    g_broadcast_sub_wparam = malloc( ARRAY_SIZE(bcast_expect) *sizeof(*g_broadcast_sub_wparam) );
 
     hwnd = CreateWindowExA(0, "static", NULL, WS_POPUP, 0, 0, 0, 0, 0, 0, 0, NULL);
     ok(hwnd != NULL, "got %p\n", hwnd);
@@ -18062,9 +18058,9 @@ static void test_broadcast(void)
     for (j = 0; j < ARRAY_SIZE(bcast_expect); j++)
         DestroyWindow(hwnd_sub[j]);
 
-    HeapFree(GetProcessHeap(), 0, g_broadcast_sub_wparam);
-    HeapFree(GetProcessHeap(), 0, g_oldproc_sub);
-    HeapFree(GetProcessHeap(), 0, hwnd_sub);
+    free( g_broadcast_sub_wparam );
+    free( g_oldproc_sub );
+    free( hwnd_sub );
 
     DestroyWindow(hwnd);
 }
-- 
0.0.0

