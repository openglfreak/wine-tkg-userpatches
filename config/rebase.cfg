#!/hint/bash
# shellcheck disable=SC2034,SC2120

if ! [ "${_frogminer_rebase:-}" = true ]; then
    return
fi

check_has_output() {
    grep '.'
}

# parameter 1 or input: output file of grep -n
grep_extract_line_nr() {
    sed -n 's/^\([0-9][0-9]*\):.*$/\1/p' -- ${1+"$1"} |\
    check_has_output
}

# parameter 1 or input: patch file
find_diff_start() {
    grep -e '^diff --git ' -e '^--- .*/' -n -- ${1+"$1"} |\
    head -n1 |\
    grep_extract_line_nr
}

# parameter 1 or input: git format-patch output file
postprocess_diff() {
    sed '
        0,/^diff --git/{/^diff --git/!d};
        /^-- \{,1\}$/{
            :nextline;
            n;
            /^$/b nextline;
            /^ $/b nextline;
            s/^[0-9][0-9]*\(\.[0-9][0-9]*\)\{1,\}$/0.0.0/;
            t;
        };
        /^index [0-9a-f][0-9a-f]*\.\.[0-9a-f][0-9a-f]*\( .*\)\{0,1\}$/!b;
        /^index 00*\.\.00*\( .*\)\{0,1\}$/b;
        /^index 00*\.\./b loop2;
        :loop1;
        s/^\(index 1*\)[02-9a-f]/\11/;
        t loop1;
        /^index [^.]*\.\.00*\( .*\)\{0,1\}$/b;
        :loop2;
        s/^\(index [^.]*\.\.1*\)[02-9a-f]/\11/g;
        t loop2;
    ' -- ${1+"$1"}
}

generate_diff() {
    # shellcheck disable=SC2016
    git format-patch -1 --stdout | postprocess_diff
}

# parameter 1 or input: patch file
find_git_version_start() {
    awk -- '
        /[^ ]/ {
            line = null;
        }
        /^[^ +-]/ {
            if (prev_line ~ /^-- ?$/)
                line = NR;
        }
        { prev_line=$0; }
        END { if (line) print line - 1; else exit 1; }
    ' ${1+"$1"}
}

# parameter 1 or input: patch file
remove_empty_hunks() {
    awk -- '
        BEGIN { printed = 0; buffer = ""; }
        function print_buffer() {
            if (!printed || buffer ~ /\n-(--([^ ]|$)|-([^-]|$)|([^-]|$))/ || buffer ~ /\n\+(\+\+([^ ]|$)|\+([^+]|$)|([^+]|$))/)
                print buffer;
            printed = 1;
            buffer = "";
        }
        /^@@ / { print_buffer() }
        END { print_buffer() }
        {
            if (buffer != "")
                buffer = buffer "\n" $0;
            else
                buffer = $0;
        }
    ' ${1+"$1"}
}

# parameter 1: patch file
update_diff() (
    tmpdir="$(mktemp -d)" || return
    [ -n "$tmpdir" ] || return
    trap 'rm -rf -- "${tmpdir:?}"' EXIT #"

    diff_start="$(find_diff_start "$1")" || return
    head -n"$((diff_start - 1))" -- "$1" >"${tmpdir}"/new.patch || return
    generate_diff >>"${tmpdir}"/new.patch || return

    if ! find_git_version_start "$1" >/dev/null; then
        git_version_start="$(find_git_version_start "${tmpdir}"/new.patch)" || return
        head -n"$((git_version_start - 1))" -- "${tmpdir}"/new.patch >"${tmpdir}"/new.patch2 || return
        mv -- "${tmpdir}"/new.patch2 "${tmpdir}"/new.patch || return
    fi

    git diff --no-index -- "$1" "${tmpdir}"/new.patch >"${tmpdir}"/new.patch.diff
    if [ "$(wc -l -- "${tmpdir}"/new.patch.diff | cut -d' ' -f1)" -ne 0 ]; then
        sed -e 's/^-#/ #/' -e 's/^-$/ /' -- "${tmpdir}"/new.patch.diff | remove_empty_hunks >"${tmpdir}"/new.patch.diff2 || return
        rediff -- "${tmpdir}"/new.patch.diff "${tmpdir}"/new.patch.diff2 >"${tmpdir}"/new.patch.diff3 || return
        patch -N -i "${tmpdir}"/new.patch.diff3 -- "$1" || return
        rm -f -- "$1".orig ||:
    fi
)

# parameter 1 or input: patch file
find_diffstat_end() {
    grep -E -e '^ [0-9]+ files? changed(, [0-9]+ insertions?\(\+\))?(, [0-9]+ deletions?\(-\))?$' \
            -e '^ create mode [0-7]+ .+$' \
            -e '^ delete mode [0-7]+ .+$' \
            -n -- ${1+"$1"} |\
    tail -n1 |\
    grep_extract_line_nr
}

_find_diffstat_before_start() {
    grep -E -e '^ .* +\| +[0-9]+( \+*-*)?$' \
            -e '^ [0-9]+ files? changed(, [0-9]+ insertions?\(\+\))?(, [0-9]+ deletions?\(-\))?$' \
            -e '^ create mode [0-7]+ .+$' \
            -e '^ delete mode [0-7]+ .+$' \
            -v -n -- ${1+"$1"} |\
    tail -n1 |\
    grep_extract_line_nr
}
# parameter 1 or input: patch file up to the end of the diffstat
find_diffstat_start() {
    printf '%d\n' "$(($(_find_diffstat_before_start ${1+"$1"}) + 1))"
}

generate_diffstat() {
    git diff --stat=72 --summary 'HEAD~1..HEAD'
}

# parameter 1: patch file
update_diffstat() (
    if ! diffstat_end="$(find_diffstat_end "$1")"; then
        return 0
    fi
    if ! diffstat_start="$(head -n"$diffstat_end" -- "$1" | find_diffstat_start)"; then
        return 0
    fi
    tmpfile="$(mktemp)" || return
    [ -n "$tmpfile" ] || return
    trap 'rm -f -- "${tmpfile:?}"' EXIT #"
    {
        head -n"$((diffstat_start - 1))" -- "$1" || return
        generate_diffstat || return
        tail -n"+$((diffstat_end + 1))" -- "$1" || return
    } >"$tmpfile"
    cat -- "$tmpfile" >"$1" || return
)

# parameter 1: patch file
update_patch() {
    set -- "$(realpath -- "$1"; echo x)"
    set -- "${1%?x}"
    update_diff "$1" || return
    update_diffstat "$1" || return
}

verify_patch() {
    set -- "$(realpath -- "$1"; echo x)"
    set -- "${1%?x}"

    patch_before="$(git diff --full-index 'HEAD~1..HEAD')" || return
    git checkout --detach --quiet 'HEAD~1' || return
    if ! patch -Np1 < "$1"; then
        return 1
    fi
    rm -f ./**/*.orig 2>/dev/null ||:
    git add . >/dev/null || return
    patch_after="$(git diff --full-index --staged)" || return
    if ! [ "${patch_before}" = "${patch_after}" ]; then
        error "Patch result was changed by rebase."
        printf '%s\n' "${patch_before}" >/tmp/before.diff
        printf '%s\n' "${patch_after}" >/tmp/after.diff
        return 1
    fi
    git reset --hard >/dev/null || return
    git clean -df >/dev/null || return
    git checkout - >/dev/null || return
}

rebase() (
    globstar_state="$(shopt -q globstar; echo $?)" ||:
    rm -f ./**/*.orig 2>/dev/null ||:
    git init
    git config gc.auto 0
    git add .
    git commit -m 'base' --no-gpg-sign
    old_commit="$(git rev-parse HEAD)"
    # shellcheck disable=SC2154
    for _f in "${_patches[@]}"; do
        [ -e "${_f}" ] || continue

        do_rebase=false
        _f_real="${basedir}/${_f##*/}"
        if [ -e "${_f_real}" ]; then
            _f_real="$(realpath -- "$_f_real")"
            case "$_f_real" in "${basedir}/"*)
                do_rebase=true
            esac
        fi

        msg2 "######################################################"
        msg2 ""
        if [ "${do_rebase}" = true ]; then
            msg2 "Rebasing patch ${_f}"
        else
            msg2 "Applying patch ${_f}"
        fi
        msg2 ""
        msg2 "######################################################"

        while :; do
        echo -e "\nApplying your own patch ${_f##*/}" >> "$_where"/prepare.log
        if ! patch -Np1 < "${_f}" >> "$_where"/prepare.log; then
            error "Patch application has failed. The error was logged to $_where/prepare.log for your convenience."
            return 1
        fi

        rm -f ./**/*.orig 2>/dev/null ||:
        git add .
        git commit -m "patch ${_f##*/}" --no-gpg-sign

        if [ "${do_rebase}" = true ]; then
            if ! update_patch "${_f_real}"; then
                error "Patch update has failed. Fix the error and press enter to continue"
                IFS='' read -r _dummy </dev/tty || return
                rm -f -- "${_f_real}".orig ||:
                rm -f -- "${_f_real}".rej ||:
                git reset --hard 'HEAD^'
                continue
            fi
            if ! verify_patch "${_f_real}"; then
                error "Patch verification has failed. Fix the error and press enter to continue"
                IFS='' read -r _dummy </dev/tty || return
                rm -f -- "${_f_real}".orig ||:
                rm -f -- "${_f_real}".rej ||:
                git reset --hard 'HEAD^'
                continue
            fi
        fi
        break
        done
    done
    git reset --hard "$old_commit"
    git reset --soft HEAD~1

    msg2 "######################################################"
    msg2 ""
    msg2 "Patch rebase finished"
    msg2 ""
    msg2 "######################################################"
)

if [ "${_frogminer_rebase_tmpfs:-true}" = true ]; then
    pre_rebase() (
        tmp_rebase_dir="$(mktemp -d)" || exit
        trap 'rm -rf "${tmp_rebase_dir:?}"' EXIT
        cp -a -t "$tmp_rebase_dir" ./. || exit
        cd "$tmp_rebase_dir" || exit
        rebase "$@"
    )
else
    pre_rebase() {
        rebase "$@"
    }
fi

firstpatch() {
    local patchfile
    local globstar_state
    globstar_state="$(shopt -q globstar; echo $?)" ||:
    shopt -qs globstar
    # shellcheck disable=SC2154
    for patchfile in "${patchdir}"/**/*.*patch "${patchdir}"/**/*.*revert; do
        case "${patchfile}" in "${patchdir}"/*_/*) continue; esac
        [ -e "${patchfile}" ] || continue
        local patchfilename="${patchfile##*/}"
        firstpatch="${basedir}/0000-${patchfilename%.*}.my${patchfilename##*.}"
        break
    done
    if ! [ "$globstar_state" -eq 0 ]; then
        shopt -qu globstar
    fi
}
firstpatch
unset -f firstpatch

patch() {
    local file
    if file="$(readlink /proc/self/fd/0)" && [ "${file##*/}" = "${firstpatch##*/}" ]; then
        unset -f patch
        unset file firstpatch
        pre_rebase >/dev/tty 2>&1
        exit
    fi
    command patch "$@"
}
