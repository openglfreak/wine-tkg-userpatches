From 1139cc01518d0701fb5440754f8c60a907359940 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Tue, 29 Mar 2022 05:06:55 +0200
Subject: [PATCH 48/44] HACK: server, win32u: Move active_hooks bitmap into shared
 memory.

---
 dlls/win32u/hook.c  | 20 ++++++++++++++-
 server/hook.c       | 59 +++++++++++++++++++++++++++++++++++++++++++++
 server/protocol.def |  2 ++
 server/queue.c      | 16 ++++++++++++
 server/user.h       |  4 +++
 5 files changed, 100 insertions(+), 1 deletion(-)

diff --git a/dlls/win32u/hook.c b/dlls/win32u/hook.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/hook.c
+++ b/dlls/win32u/hook.c
@@ -70,7 +70,25 @@ static UINT get_active_hooks(void)
 
     if (!thread_info->active_hooks)
     {
-        SERVER_START_REQ( get_active_hooks )
+        volatile struct desktop_shared_memory *desktop_shared = get_desktop_shared_memory();
+        volatile struct queue_shared_memory *queue_shared = get_queue_shared_memory();
+        unsigned int desktop_active_hooks, queue_active_hooks;
+        BOOL skip = TRUE;
+
+        SHARED_READ_BEGIN( &desktop_shared->seq )
+        {
+            desktop_active_hooks = desktop_shared->active_hooks;
+        }
+        SHARED_READ_END( &desktop_shared->seq );
+        SHARED_READ_BEGIN( &queue_shared->seq )
+        {
+            skip = queue_shared->created;
+            queue_active_hooks = queue_shared->active_hooks;
+        }
+        SHARED_READ_END( &queue_shared->seq );
+
+        if (skip) thread_info->active_hooks = desktop_active_hooks | queue_active_hooks;
+        else SERVER_START_REQ( get_active_hooks )
         {
             if (!wine_server_call( req )) thread_info->active_hooks = reply->active_hooks;
         }
diff --git a/server/hook.c b/server/hook.c
index 11111111111..11111111111 100644
--- a/server/hook.c
+++ b/server/hook.c
@@ -43,11 +43,13 @@ struct hook
 {
     struct list         chain;    /* hook chain entry */
     user_handle_t       handle;   /* user handle for this hook */
+    struct desktop     *desktop;  /* desktop that the hook is set on */
     struct process     *process;  /* process the hook is set to */
     struct thread      *thread;   /* thread the hook is set to */
     struct thread      *owner;    /* owner of the out of context hook */
     struct hook_table  *table;    /* hook table that contains this hook */
     int                 index;    /* hook table index */
+    int                 is_global; /* whether this hook is global */
     int                 event_min;
     int                 event_max;
     int                 flags;
@@ -148,9 +150,11 @@ static struct hook *add_hook( struct desktop *desktop, struct thread *thread, in
         free( hook );
         return NULL;
     }
+    hook->desktop = (struct desktop *)grab_object( desktop );
     hook->thread = thread ? (struct thread *)grab_object( thread ) : NULL;
     hook->table  = table;
     hook->index  = index;
+    hook->is_global = global;
     list_add_head( &table->hooks[index], &hook->chain );
     if (thread) thread->desktop_users++;
     return hook;
@@ -168,6 +172,7 @@ static void free_hook( struct hook *hook )
         release_object( hook->thread );
     }
     if (hook->process) release_object( hook->process );
+    release_object( hook->desktop );
     release_object( hook->owner );
     list_remove( &hook->chain );
     free( hook );
@@ -297,10 +302,22 @@ static void hook_table_destroy( struct object *obj )
 /* remove a hook, freeing it if the chain is not in use */
 static void remove_hook( struct hook *hook )
 {
+    int global = hook->is_global;
+    struct desktop *desktop = (struct desktop *)grab_object( hook->desktop );
+    struct thread *thread = hook->thread ? (struct thread *)grab_object( hook->thread ) : NULL;
+
     if (hook->table->counts[hook->index])
         hook->proc = 0; /* chain is in use, just mark it and return */
     else
         free_hook( hook );
+
+    if (global)
+        update_global_active_hooks( desktop );
+    else
+        update_queue_active_hooks( thread );
+
+    release_object( desktop );
+    if (thread) release_object( thread );
 }
 
 /* release a hook chain, removing deleted hooks if the use count drops to 0 */
@@ -357,6 +374,44 @@ static int is_hook_active( struct hook_table *table, int index )
     return 0;
 }
 
+void update_global_active_hooks( struct desktop *desktop )
+{
+    struct hook_table *global_hooks = desktop->global_hooks;
+    unsigned int active_hooks = 1u << 31;  /* set high bit to indicate that the bitmap is valid */
+
+    if (global_hooks)
+    {
+        int id;
+        for (id = WH_MINHOOK; id <= WH_WINEVENT; id++)
+        {
+            if (is_hook_active( global_hooks, id - WH_MINHOOK ))
+                active_hooks |= 1 << (id - WH_MINHOOK);
+        }
+    }
+
+    write_global_active_hooks( desktop, active_hooks );
+}
+
+void update_queue_active_hooks( struct thread *thread )
+{
+    struct hook_table *queue_hooks = get_queue_hooks( thread );
+    unsigned int active_hooks = 1u << 31;  /* set high bit to indicate that the bitmap is valid */
+
+    if (!thread->queue) return;
+
+    if (queue_hooks)
+    {
+        int id;
+        for (id = WH_MINHOOK; id <= WH_WINEVENT; id++)
+        {
+            if (is_hook_active( queue_hooks, id - WH_MINHOOK ))
+                active_hooks |= 1 << (id - WH_MINHOOK);
+        }
+    }
+
+    write_queue_active_hooks( thread, active_hooks );
+}
+
 /* get a bitmap of all active hooks for the current thread */
 static unsigned int get_active_hooks(void)
 {
@@ -471,6 +526,10 @@ DECL_HANDLER(set_hook)
         hook->unicode     = req->unicode;
         hook->module      = module;
         hook->module_size = module_size;
+        if (global)
+            update_global_active_hooks( desktop );
+        else
+            update_queue_active_hooks( thread );
         reply->handle = hook->handle;
         reply->active_hooks = get_active_hooks();
     }
diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -886,6 +886,7 @@ struct desktop_shared_memory
     struct shared_cursor cursor;           /* global cursor information */
     unsigned char        keystate[256];    /* asynchronous key state */
     thread_id_t          foreground_tid;   /* tid of the foreground thread */
+    unsigned int         active_hooks;     /* desktop active hooks */
 };
 
 struct queue_shared_memory
@@ -897,6 +898,7 @@ struct queue_shared_memory
     unsigned int         wake_mask;
     unsigned int         changed_mask;
     thread_id_t          input_tid;
+    unsigned int         active_hooks;     /* thread active hooks */
 };
 
 struct input_shared_memory
diff --git a/server/queue.c b/server/queue.c
index 11111111111..11111111111 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -608,6 +608,22 @@ void set_queue_hooks( struct thread *thread, struct hook_table *hooks )
     queue->hooks = hooks;
 }
 
+void write_global_active_hooks( struct desktop *desktop, unsigned int active_hooks )
+{
+    SHARED_WRITE_BEGIN( &desktop->shared->seq );
+    desktop->shared->active_hooks = active_hooks;
+    SHARED_WRITE_END( &desktop->shared->seq );
+}
+
+void write_queue_active_hooks( struct thread *thread, unsigned int active_hooks )
+{
+    struct msg_queue *queue = thread->queue;
+    if (!queue && !(queue = create_msg_queue( thread, NULL ))) return;
+    SHARED_WRITE_BEGIN( &queue->shared->seq );
+    queue->shared->active_hooks = active_hooks;
+    SHARED_WRITE_END( &queue->shared->seq );
+}
+
 /* check the queue status */
 static inline int is_signaled( struct msg_queue *queue )
 {
diff --git a/server/user.h b/server/user.h
index 11111111111..11111111111 100644
--- a/server/user.h
+++ b/server/user.h
@@ -90,6 +90,8 @@ extern void cleanup_clipboard_thread( struct thread *thread );
 /* hook functions */
 
 extern void remove_thread_hooks( struct thread *thread );
+extern void update_global_active_hooks( struct desktop *desktop );
+extern void update_queue_active_hooks( struct thread *thread );
 extern struct thread *get_first_global_hook( int id );
 
 /* queue functions */
@@ -97,6 +99,8 @@ extern struct thread *get_first_global_hook( int id );
 extern void free_msg_queue( struct thread *thread );
 extern struct hook_table *get_queue_hooks( struct thread *thread );
 extern void set_queue_hooks( struct thread *thread, struct hook_table *hooks );
+extern void write_global_active_hooks( struct desktop *desktop, unsigned int active_hooks );
+extern void write_queue_active_hooks( struct thread *thread, unsigned int active_hooks );
 extern void inc_queue_paint_count( struct thread *thread, int incr );
 extern void queue_cleanup_window( struct thread *thread, user_handle_t win );
 extern int init_thread_queue( struct thread *thread );
-- 
2.39.0

