From 33ecbaae1b38d45477425fbb22bb8a8f0330d6f9 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Tue, 22 Nov 2022 18:18:20 +0100
Subject: [PATCH 03/11] winevulkan: Route kernel callbacks through user32.

Signed-off-by: Torge Matthies <tmatthies@codeweavers.com>
---
 dlls/winevulkan/loader.c         | 42 ++++++++++++++++++--------------
 dlls/winevulkan/vulkan.c         | 13 +++++++---
 dlls/winevulkan/vulkan_loader.h  | 16 ++++++++++++
 dlls/winevulkan/vulkan_private.h |  1 +
 dlls/wow64win/user.c             | 15 ------------
 include/ntuser.h                 |  3 ---
 6 files changed, 50 insertions(+), 40 deletions(-)

diff --git a/dlls/winevulkan/loader.c b/dlls/winevulkan/loader.c
index 11111111111..11111111111 100644
--- a/dlls/winevulkan/loader.c
+++ b/dlls/winevulkan/loader.c
@@ -230,9 +230,32 @@ VkResult WINAPI vk_icdNegotiateLoaderICDInterfaceVersion(uint32_t *supported_ver
     return VK_SUCCESS;
 }
 
+static NTSTATUS WINAPI call_vulkan_debug_report_callback( void *args, ULONG len )
+{
+    struct wine_vk_debug_report_params *params =
+        CONTAINING_RECORD( args, struct wine_vk_debug_report_params, cbparams );
+    return params->user_callback(params->flags, params->object_type, params->object_handle, params->location,
+                                 params->code, params->layer_prefix, params->message, params->user_data);
+}
+
+static NTSTATUS WINAPI call_vulkan_debug_utils_callback( void *args, ULONG len )
+{
+    struct wine_vk_debug_utils_params *params =
+        CONTAINING_RECORD( args, struct wine_vk_debug_utils_params, cbparams );
+    return params->user_callback(params->severity, params->message_types, &params->data, params->user_data);
+}
+
 static BOOL WINAPI wine_vk_init(INIT_ONCE *once, void *param, void **context)
 {
-    return !__wine_init_unix_call() && !UNIX_CALL(init, NULL);
+    struct vk_callback_funcs callback_funcs =
+    {
+        (ULONG_PTR)call_vulkan_debug_report_callback,
+        (ULONG_PTR)call_vulkan_debug_utils_callback,
+    };
+    struct init_vulkan_params params;
+
+    params.callback_funcs = &callback_funcs;
+    return !__wine_init_unix_call() && !UNIX_CALL(init, &params);
 }
 
 static BOOL  wine_vk_init_once(void)
@@ -635,21 +658,8 @@ VkResult WINAPI vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestamp
     return VK_SUCCESS;
 }
 
-static BOOL WINAPI call_vulkan_debug_report_callback( struct wine_vk_debug_report_params *params, ULONG size )
-{
-    return params->user_callback(params->flags, params->object_type, params->object_handle, params->location,
-                                 params->code, params->layer_prefix, params->message, params->user_data);
-}
-
-static BOOL WINAPI call_vulkan_debug_utils_callback( struct wine_vk_debug_utils_params *params, ULONG size )
-{
-    return params->user_callback(params->severity, params->message_types, &params->data, params->user_data);
-}
-
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
 {
-    void **kernel_callback_table;
-
     TRACE("%p, %lu, %p\n", hinst, reason, reserved);
 
     switch (reason)
@@ -657,10 +667,6 @@ BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
         case DLL_PROCESS_ATTACH:
             hinstance = hinst;
             DisableThreadLibraryCalls(hinst);
-
-            kernel_callback_table = NtCurrentTeb()->Peb->KernelCallbackTable;
-            kernel_callback_table[NtUserCallVulkanDebugReportCallback] = call_vulkan_debug_report_callback;
-            kernel_callback_table[NtUserCallVulkanDebugUtilsCallback]  = call_vulkan_debug_utils_callback;
             break;
     }
     return TRUE;
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 11111111111..11111111111 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -131,6 +131,7 @@ static VkBool32 debug_utils_callback_conversion(VkDebugUtilsMessageSeverityFlagB
     }
 
     /* FIXME: we should pack all referenced structs instead of passing pointers */
+    params.cbparams.func = callback_funcs.call_vulkan_debug_utils_callback;
     params.user_callback = object->user_callback;
     params.user_data = object->user_data;
     params.severity = severity;
@@ -165,8 +166,7 @@ static VkBool32 debug_utils_callback_conversion(VkDebugUtilsMessageSeverityFlagB
     params.data.pObjects = object_name_infos;
 
     /* applications should always return VK_FALSE */
-    result = KeUserModeCallback( NtUserCallVulkanDebugUtilsCallback, &params, sizeof(params),
-                                 &ret_ptr, &ret_len );
+    result = KeUserModeCallback( NtUserDispatchCallback, &params.cbparams, sizeof(params), &ret_ptr, &ret_len );
 
     free(object_name_infos);
 
@@ -193,6 +193,7 @@ static VkBool32 debug_report_callback_conversion(VkDebugReportFlagsEXT flags, Vk
     }
 
     /* FIXME: we should pack all referenced structs instead of passing pointers */
+    params.cbparams.func = callback_funcs.call_vulkan_debug_report_callback;
     params.user_callback = object->user_callback;
     params.user_data = object->user_data;
     params.flags = flags;
@@ -206,8 +207,7 @@ static VkBool32 debug_report_callback_conversion(VkDebugReportFlagsEXT flags, Vk
     if (!params.object_handle)
         params.object_type = VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT;
 
-    return KeUserModeCallback( NtUserCallVulkanDebugReportCallback, &params, sizeof(params),
-                               &ret_ptr, &ret_len );
+    return KeUserModeCallback( NtUserDispatchCallback, &params.cbparams, sizeof(params), &ret_ptr, &ret_len );
 }
 
 static void wine_vk_physical_device_free(struct wine_phys_dev *phys_dev)
@@ -459,8 +459,12 @@ static void wine_vk_device_free(struct wine_device *device)
     free(device);
 }
 
+struct vk_callback_funcs callback_funcs;
+
 NTSTATUS init_vulkan(void *args)
 {
+    struct init_vulkan_params *params = args;
+
     vk_funcs = __wine_get_vulkan_driver(WINE_VULKAN_DRIVER_VERSION);
     if (!vk_funcs)
     {
@@ -476,6 +480,7 @@ NTSTATUS init_vulkan(void *args)
         zero_bits = (ULONG_PTR)info.HighestUserAddress | 0x7fffffff;
     }
 
+    callback_funcs = *params->callback_funcs;
     return STATUS_SUCCESS;
 }
 
diff --git a/dlls/winevulkan/vulkan_loader.h b/dlls/winevulkan/vulkan_loader.h
index 11111111111..11111111111 100644
--- a/dlls/winevulkan/vulkan_loader.h
+++ b/dlls/winevulkan/vulkan_loader.h
@@ -28,6 +28,7 @@
 #include "windef.h"
 #include "winbase.h"
 #include "winternl.h"
+#include "ntuser.h"
 #include "wine/debug.h"
 #include "wine/vulkan.h"
 #include "wine/unixlib.h"
@@ -107,10 +108,23 @@ void *wine_vk_get_device_proc_addr(const char *name) DECLSPEC_HIDDEN;
 void *wine_vk_get_phys_dev_proc_addr(const char *name) DECLSPEC_HIDDEN;
 void *wine_vk_get_instance_proc_addr(const char *name) DECLSPEC_HIDDEN;
 
+struct vk_callback_funcs
+{
+    UINT64 call_vulkan_debug_report_callback;
+    UINT64 call_vulkan_debug_utils_callback;
+};
+
+struct init_vulkan_params
+{
+    const struct vk_callback_funcs *callback_funcs;
+};
+
 /* debug callbacks params */
 
 struct wine_vk_debug_utils_params
 {
+    struct user32_callback_params cbparams;
+
     PFN_vkDebugUtilsMessengerCallbackEXT user_callback;
     void *user_data;
 
@@ -121,6 +135,8 @@ struct wine_vk_debug_utils_params
 
 struct wine_vk_debug_report_params
 {
+    struct user32_callback_params cbparams;
+
     PFN_vkDebugReportCallbackEXT user_callback;
     void *user_data;
 
diff --git a/dlls/winevulkan/vulkan_private.h b/dlls/winevulkan/vulkan_private.h
index 11111111111..11111111111 100644
--- a/dlls/winevulkan/vulkan_private.h
+++ b/dlls/winevulkan/vulkan_private.h
@@ -242,6 +242,7 @@ BOOL wine_vk_instance_extension_supported(const char *name) DECLSPEC_HIDDEN;
 
 BOOL wine_vk_is_type_wrapped(VkObjectType type) DECLSPEC_HIDDEN;
 
+extern struct vk_callback_funcs callback_funcs;
 NTSTATUS init_vulkan(void *args) DECLSPEC_HIDDEN;
 
 NTSTATUS vk_is_available_instance_function(void *arg) DECLSPEC_HIDDEN;
diff --git a/dlls/wow64win/user.c b/dlls/wow64win/user.c
index 11111111111..11111111111 100644
--- a/dlls/wow64win/user.c
+++ b/dlls/wow64win/user.c
@@ -1444,18 +1444,6 @@ static NTSTATUS WINAPI wow64_NtUserThunkLock( void *arg, ULONG size )
     return dispatch_callback( NtUserThunkLock, arg, size );
 }
 
-static NTSTATUS WINAPI wow64_NtUserCallVulkanDebugReportCallback( void *arg, ULONG size )
-{
-    FIXME( "\n" );
-    return 0;
-}
-
-static NTSTATUS WINAPI wow64_NtUserCallVulkanDebugUtilsCallback( void *arg, ULONG size )
-{
-    FIXME( "\n" );
-    return 0;
-}
-
 static NTSTATUS WINAPI wow64_NtUserCallOpenGLDebugMessageCallback( void *arg, ULONG size )
 {
     FIXME( "\n" );
@@ -1538,9 +1526,6 @@ user_callback user_callbacks[] =
     /* win16 hooks */
     wow64_NtUserCallFreeIcon,
     wow64_NtUserThunkLock,
-    /* Vulkan support */
-    wow64_NtUserCallVulkanDebugReportCallback,
-    wow64_NtUserCallVulkanDebugUtilsCallback,
     /* OpenGL support */
     wow64_NtUserCallOpenGLDebugMessageCallback,
     /* Driver-specific callbacks */
diff --git a/include/ntuser.h b/include/ntuser.h
index 11111111111..11111111111 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -52,9 +52,6 @@ enum
     /* win16 hooks */
     NtUserCallFreeIcon,
     NtUserThunkLock,
-    /* Vulkan support */
-    NtUserCallVulkanDebugReportCallback,
-    NtUserCallVulkanDebugUtilsCallback,
     /* OpenGL support */
     NtUserCallOpenGLDebugMessageCallback,
     /* Driver-specific callbacks */
-- 
0.0.0

