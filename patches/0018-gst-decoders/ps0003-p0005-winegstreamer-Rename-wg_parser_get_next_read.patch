From 536542763db2f8f2d8abdbe20f932e050a8d448a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 6 Jun 2022 20:53:36 +0200
Subject: [PATCH 05/30] winegstreamer: Rename wg_parser_get_next_read_offset to
 wg_parser_wait_request.

Wrapping the request in a more general structure so we can later emit
buffer pool allocation request to the reader thread.
---
 dlls/winegstreamer/gst_private.h   |   2 +-
 dlls/winegstreamer/main.c          |  11 ++-
 dlls/winegstreamer/media_source.c  |  86 ++++++++++++++---------
 dlls/winegstreamer/quartz_parser.c |  61 +++++++++++------
 dlls/winegstreamer/unixlib.h       |  25 +++++--
 dlls/winegstreamer/wg_parser.c     |  25 +++----
 dlls/winegstreamer/wm_reader.c     | 106 ++++++++++++++++++-----------
 7 files changed, 203 insertions(+), 113 deletions(-)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -76,7 +76,7 @@ void wg_parser_destroy(struct wg_parser *parser);
 HRESULT wg_parser_connect(struct wg_parser *parser, uint64_t file_size);
 void wg_parser_disconnect(struct wg_parser *parser);
 
-bool wg_parser_get_next_read_offset(struct wg_parser *parser, uint64_t *offset, uint32_t *size);
+bool wg_parser_wait_request(struct wg_parser *parser, struct wg_request *request);
 void wg_parser_push_data(struct wg_parser *parser, struct wg_sample *sample,
         struct wg_sample_queue *queue);
 
diff --git a/dlls/winegstreamer/main.c b/dlls/winegstreamer/main.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/main.c
+++ b/dlls/winegstreamer/main.c
@@ -107,19 +107,18 @@ void wg_parser_disconnect(struct wg_parser *parser)
     __wine_unix_call(unix_handle, unix_wg_parser_disconnect, parser);
 }
 
-bool wg_parser_get_next_read_offset(struct wg_parser *parser, uint64_t *offset, uint32_t *size)
+bool wg_parser_wait_request(struct wg_parser *parser, struct wg_request *wg_request)
 {
-    struct wg_parser_get_next_read_offset_params params =
+    struct wg_parser_wait_request_params params =
     {
         .parser = parser,
     };
 
-    TRACE("parser %p, offset %p, size %p.\n", parser, offset, size);
+    TRACE("parser %p, wg_request %p.\n", parser, wg_request);
 
-    if (__wine_unix_call(unix_handle, unix_wg_parser_get_next_read_offset, &params))
+    if (__wine_unix_call(unix_handle, unix_wg_parser_wait_request, &params))
         return false;
-    *offset = params.offset;
-    *size = params.size;
+    *wg_request = params.request;
     return true;
 }
 
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -595,11 +595,47 @@ static const IMFAsyncCallbackVtbl source_async_commands_callback_vtbl =
     source_async_commands_Invoke,
 };
 
+static void handle_read_request(struct media_source *source, IMFByteStream *byte_stream,
+        uint64_t offset, uint32_t size)
+{
+    struct wg_sample *wg_sample;
+    ULONG ret_size = 0;
+    HRESULT hr;
+
+    if (FAILED(hr = wg_sample_create_raw(size, &wg_sample)))
+    {
+        ERR("Failed to create wg_sample, hr %#lx\n", hr);
+        wg_parser_push_data(source->wg_parser, NULL, NULL);
+        return;
+    }
+
+    /* Some IMFByteStreams (including the standard file-based stream) return
+     * an error when reading past the file size. */
+
+    if (!size)
+        hr = S_OK;
+    else if (SUCCEEDED(hr = IMFByteStream_SetCurrentPosition(byte_stream, offset)))
+        hr = IMFByteStream_Read(byte_stream, wg_sample->data, size, &ret_size);
+
+    if (FAILED(hr))
+    {
+        ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
+        wg_sample->data = NULL;
+    }
+    else if (ret_size != size)
+    {
+        ERR("Unexpected short read: requested %u bytes, got %lu.\n", size, ret_size);
+        size = ret_size;
+    }
+
+    wg_sample->size = size;
+    wg_parser_push_data(source->wg_parser, wg_sample, source->wg_sample_queue);
+}
+
 static DWORD CALLBACK read_thread(void *arg)
 {
     struct media_source *source = arg;
     IMFByteStream *byte_stream = source->byte_stream;
-    struct wg_sample *wg_sample;
     uint64_t file_size;
 
     IMFByteStream_GetLength(byte_stream, &file_size);
@@ -608,43 +644,31 @@ static DWORD CALLBACK read_thread(void *arg)
 
     while (!source->read_thread_shutdown)
     {
-        ULONG ret_size = 0;
-        uint64_t offset;
-        uint32_t size;
-        HRESULT hr;
+        struct wg_request request;
 
-        if (!wg_parser_get_next_read_offset(source->wg_parser, &offset, &size))
+        if (!wg_parser_wait_request(source->wg_parser, &request))
             continue;
 
-        if (offset >= file_size)
-            size = 0;
-        else if (offset + size >= file_size)
-            size = file_size - offset;
-
-        if (FAILED(wg_sample_create_raw(size, &wg_sample)))
-            break;
+        switch (request.type)
+        {
+            case WG_REQUEST_READ:
+            {
+                uint64_t offset = request.u.read.offset;
+                uint32_t size = request.u.read.size;
 
-        /* Some IMFByteStreams (including the standard file-based stream) return
-         * an error when reading past the file size. */
+                if (offset >= file_size)
+                    size = 0;
+                else if (offset + size >= file_size)
+                    size = file_size - offset;
 
-        if (!size)
-            hr = S_OK;
-        else if (SUCCEEDED(hr = IMFByteStream_SetCurrentPosition(byte_stream, offset)))
-            hr = IMFByteStream_Read(byte_stream, wg_sample->data, size, &ret_size);
+                handle_read_request(source, byte_stream, offset, size);
+                break;
+            }
 
-        if (FAILED(hr))
-        {
-            ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
-            wg_sample->data = NULL;
-        }
-        else if (ret_size != size)
-        {
-            ERR("Unexpected short read: requested %u bytes, got %lu.\n", size, ret_size);
-            size = ret_size;
+            default:
+                FIXME("Ingoring unknown request %u\n", request.type);
+                continue;
         }
-
-        wg_sample->size = size;
-        wg_parser_push_data(source->wg_parser, wg_sample, source->wg_sample_queue);
     }
 
     TRACE("Media source is shutting down; exiting.\n");
diff --git a/dlls/winegstreamer/quartz_parser.c b/dlls/winegstreamer/quartz_parser.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/quartz_parser.c
+++ b/dlls/winegstreamer/quartz_parser.c
@@ -868,10 +868,32 @@ static DWORD CALLBACK stream_thread(void *arg)
     return 0;
 }
 
+static void handle_read_request(struct parser *filter, uint64_t offset, uint32_t size)
+{
+    struct wg_sample *wg_sample;
+    HRESULT hr;
+
+    if (FAILED(hr = wg_sample_create_raw(size, &wg_sample)))
+    {
+        ERR("Failed to create wg_sample, hr %#lx\n", hr);
+        wg_parser_push_data(filter->wg_parser, NULL, NULL);
+        return;
+    }
+
+    hr = IAsyncReader_SyncRead(filter->reader, offset, size, wg_sample->data);
+    if (FAILED(hr))
+    {
+        ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
+        wg_sample->data = NULL;
+    }
+
+    wg_sample->size = size;
+    wg_parser_push_data(filter->wg_parser, wg_sample, filter->wg_sample_queue);
+}
+
 static DWORD CALLBACK read_thread(void *arg)
 {
     struct parser *filter = arg;
-    struct wg_sample *wg_sample;
     LONGLONG file_size, unused;
 
     IAsyncReader_Length(filter->reader, &file_size, &unused);
@@ -880,30 +902,31 @@ static DWORD CALLBACK read_thread(void *arg)
 
     while (filter->sink_connected)
     {
-        uint64_t offset;
-        uint32_t size;
-        HRESULT hr;
+        struct wg_request request;
 
-        if (!wg_parser_get_next_read_offset(filter->wg_parser, &offset, &size))
+        if (!wg_parser_wait_request(filter->wg_parser, &request))
             continue;
 
-        if (offset >= file_size)
-            size = 0;
-        else if (offset + size >= file_size)
-            size = file_size - offset;
+        switch (request.type)
+        {
+            case WG_REQUEST_READ:
+            {
+                uint64_t offset = request.u.read.offset;
+                uint32_t size = request.u.read.size;
 
-        if (FAILED(wg_sample_create_raw(size, &wg_sample)))
-            break;
+                if (offset >= file_size)
+                    size = 0;
+                else if (offset + size >= file_size)
+                    size = file_size - offset;
 
-        hr = IAsyncReader_SyncRead(filter->reader, offset, size, wg_sample->data);
-        if (FAILED(hr))
-        {
-            ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
-            wg_sample->data = NULL;
-        }
+                handle_read_request(filter, offset, size);
+                break;
+            }
 
-        wg_sample->size = size;
-        wg_parser_push_data(filter->wg_parser, wg_sample, filter->wg_sample_queue);
+            default:
+                FIXME("Ingoring unknown request %u\n", request.type);
+                continue;
+        }
     }
 
     TRACE("Streaming stopped; exiting.\n");
diff --git a/dlls/winegstreamer/unixlib.h b/dlls/winegstreamer/unixlib.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/unixlib.h
+++ b/dlls/winegstreamer/unixlib.h
@@ -135,6 +135,24 @@ struct wg_sample
     BYTE *data;
 };
 
+struct wg_request
+{
+    enum wg_request_type
+    {
+        WG_REQUEST_NONE = 0,
+        WG_REQUEST_READ = 1,
+    } type;
+
+    union
+    {
+        struct
+        {
+            UINT32 size;
+            UINT64 offset;
+        } read;
+    } u;
+};
+
 struct wg_parser_buffer
 {
     /* pts and duration are in 100-nanosecond units. */
@@ -165,11 +183,10 @@ struct wg_parser_connect_params
     UINT64 file_size;
 };
 
-struct wg_parser_get_next_read_offset_params
+struct wg_parser_wait_request_params
 {
     struct wg_parser *parser;
-    UINT32 size;
-    UINT64 offset;
+    struct wg_request request;
 };
 
 struct wg_parser_push_data_params
@@ -276,7 +293,7 @@ enum unix_funcs
     unix_wg_parser_connect,
     unix_wg_parser_disconnect,
 
-    unix_wg_parser_get_next_read_offset,
+    unix_wg_parser_wait_request,
     unix_wg_parser_push_data,
 
     unix_wg_parser_get_stream_count,
diff --git a/dlls/winegstreamer/wg_parser.c b/dlls/winegstreamer/wg_parser.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_parser.c
+++ b/dlls/winegstreamer/wg_parser.c
@@ -77,7 +77,7 @@ struct wg_parser
     pthread_cond_t init_cond;
     bool no_more_pads, has_duration, error;
 
-    pthread_cond_t read_cond, read_done_cond;
+    pthread_cond_t request_cond, read_done_cond;
     struct
     {
         GstBuffer *buffer;
@@ -126,15 +126,15 @@ static NTSTATUS wg_parser_get_stream(void *args)
     return S_OK;
 }
 
-static NTSTATUS wg_parser_get_next_read_offset(void *args)
+static NTSTATUS wg_parser_wait_request(void *args)
 {
-    struct wg_parser_get_next_read_offset_params *params = args;
+    struct wg_parser_wait_request_params *params = args;
     struct wg_parser *parser = params->parser;
 
     pthread_mutex_lock(&parser->mutex);
 
     while (parser->sink_connected && !parser->read_request.size)
-        pthread_cond_wait(&parser->read_cond, &parser->mutex);
+        pthread_cond_wait(&parser->request_cond, &parser->mutex);
 
     if (!parser->sink_connected)
     {
@@ -142,8 +142,9 @@ static NTSTATUS wg_parser_get_next_read_offset(void *args)
         return VFW_E_WRONG_STATE;
     }
 
-    params->offset = parser->read_request.offset;
-    params->size = parser->read_request.size;
+    params->request.type = WG_REQUEST_READ;
+    params->request.u.read.offset = parser->read_request.offset;
+    params->request.u.read.size = parser->read_request.size;
 
     pthread_mutex_unlock(&parser->mutex);
     return S_OK;
@@ -899,7 +900,7 @@ static GstFlowReturn src_getrange_cb(GstPad *pad, GstObject *parent,
     parser->read_request.offset = offset;
     parser->read_request.size = size;
     parser->read_request.done = false;
-    pthread_cond_signal(&parser->read_cond);
+    pthread_cond_signal(&parser->request_cond);
 
     /* Note that we don't unblock this wait on GST_EVENT_FLUSH_START. We expect
      * the upstream pin to flush if necessary. We should never be blocked on
@@ -1338,7 +1339,7 @@ out:
     pthread_mutex_lock(&parser->mutex);
     parser->sink_connected = false;
     pthread_mutex_unlock(&parser->mutex);
-    pthread_cond_signal(&parser->read_cond);
+    pthread_cond_signal(&parser->request_cond);
 
     return E_FAIL;
 }
@@ -1365,7 +1366,7 @@ static NTSTATUS wg_parser_disconnect(void *args)
     pthread_mutex_lock(&parser->mutex);
     parser->sink_connected = false;
     pthread_mutex_unlock(&parser->mutex);
-    pthread_cond_signal(&parser->read_cond);
+    pthread_cond_signal(&parser->request_cond);
 
     for (i = 0; i < parser->stream_count; ++i)
         free_stream(parser->streams[i]);
@@ -1567,7 +1568,7 @@ static NTSTATUS wg_parser_create(void *args)
 
     pthread_mutex_init(&parser->mutex, NULL);
     pthread_cond_init(&parser->init_cond, NULL);
-    pthread_cond_init(&parser->read_cond, NULL);
+    pthread_cond_init(&parser->request_cond, NULL);
     pthread_cond_init(&parser->read_done_cond, NULL);
     parser->init_gst = init_funcs[params->type];
     parser->unlimited_buffering = params->unlimited_buffering;
@@ -1589,7 +1590,7 @@ static NTSTATUS wg_parser_destroy(void *args)
 
     pthread_mutex_destroy(&parser->mutex);
     pthread_cond_destroy(&parser->init_cond);
-    pthread_cond_destroy(&parser->read_cond);
+    pthread_cond_destroy(&parser->request_cond);
     pthread_cond_destroy(&parser->read_done_cond);
 
     free(parser);
@@ -1605,7 +1606,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     X(wg_parser_connect),
     X(wg_parser_disconnect),
 
-    X(wg_parser_get_next_read_offset),
+    X(wg_parser_wait_request),
     X(wg_parser_push_data),
 
     X(wg_parser_get_stream_count),
diff --git a/dlls/winegstreamer/wm_reader.c b/dlls/winegstreamer/wm_reader.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wm_reader.c
+++ b/dlls/winegstreamer/wm_reader.c
@@ -526,11 +526,58 @@ static const IWMMediaPropsVtbl stream_props_vtbl =
     stream_props_SetMediaType,
 };
 
+static void handle_read_request(struct wm_reader *reader, IStream *stream,
+        uint64_t offset, uint32_t size)
+{
+    struct wg_sample *wg_sample;
+    LARGE_INTEGER large_offset;
+    HANDLE file = reader->file;
+    ULONG ret_size = 0;
+    HRESULT hr;
+
+    if (FAILED(hr = wg_sample_create_raw(size, &wg_sample)))
+    {
+        ERR("Failed to create wg_sample, hr %#lx\n", hr);
+        wg_parser_push_data(reader->wg_parser, NULL, NULL);
+        return;
+    }
+
+    large_offset.QuadPart = offset;
+    if (!size)
+        hr = S_OK;
+    else if (file)
+    {
+        if (!SetFilePointerEx(file, large_offset, NULL, FILE_BEGIN)
+                || !ReadFile(file, wg_sample->data, size, &ret_size, NULL))
+            hr = HRESULT_FROM_WIN32(GetLastError());
+        else
+            hr = S_OK;
+    }
+    else
+    {
+        if (SUCCEEDED(hr = IStream_Seek(stream, large_offset, STREAM_SEEK_SET, NULL)))
+            hr = IStream_Read(stream, wg_sample->data, size, &ret_size);
+    }
+
+    if (FAILED(hr))
+    {
+        ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
+        wg_sample->data = NULL;
+    }
+    else if (ret_size != size)
+    {
+        ERR("Unexpected short read: requested %u bytes, got %lu.\n", size, ret_size);
+        size = ret_size;
+    }
+
+    wg_sample->size = size;
+    wg_parser_push_data(reader->wg_parser, wg_sample, reader->wg_sample_queue);
+}
+
 static DWORD CALLBACK read_thread(void *arg)
 {
     struct wm_reader *reader = arg;
     IStream *stream = reader->source_stream;
-    struct wg_sample *wg_sample;
     HANDLE file = reader->file;
     uint64_t file_size;
 
@@ -553,53 +600,32 @@ static DWORD CALLBACK read_thread(void *arg)
 
     while (!reader->read_thread_shutdown)
     {
-        LARGE_INTEGER large_offset;
-        ULONG ret_size = 0;
-        uint64_t offset;
-        uint32_t size;
-        HRESULT hr;
+        struct wg_request request;
 
-        if (!wg_parser_get_next_read_offset(reader->wg_parser, &offset, &size))
+        if (!wg_parser_wait_request(reader->wg_parser, &request))
             continue;
 
-        if (offset >= file_size)
-            size = 0;
-        else if (offset + size >= file_size)
-            size = file_size - offset;
+        switch (request.type)
+        {
+            case WG_REQUEST_READ:
+            {
+                uint64_t offset = request.u.read.offset;
+                uint32_t size = request.u.read.size;
 
-        if (FAILED(wg_sample_create_raw(size, &wg_sample)))
-            break;
+                if (offset >= file_size)
+                    size = 0;
+                else if (offset + size >= file_size)
+                    size = file_size - offset;
 
-        large_offset.QuadPart = offset;
-        if (!size)
-            hr = S_OK;
-        else if (file)
-        {
-            if (!SetFilePointerEx(file, large_offset, NULL, FILE_BEGIN)
-                    || !ReadFile(file, wg_sample->data, size, &ret_size, NULL))
-                hr = HRESULT_FROM_WIN32(GetLastError());
-            else
-                hr = S_OK;
-        }
-        else
-        {
-            if (SUCCEEDED(hr = IStream_Seek(stream, large_offset, STREAM_SEEK_SET, NULL)))
-                hr = IStream_Read(stream, wg_sample->data, size, &ret_size);
-        }
+                handle_read_request(reader, stream, offset, size);
+                break;
+            }
 
-        if (FAILED(hr))
-        {
-            ERR("Failed to read %u bytes at offset %I64u, hr %#lx.\n", size, offset, hr);
-            wg_sample->data = NULL;
-        }
-        else if (ret_size != size)
-        {
-            ERR("Unexpected short read: requested %u bytes, got %lu.\n", size, ret_size);
-            size = ret_size;
+            default:
+                FIXME("Ingoring unknown request %u\n", request.type);
+                continue;
         }
 
-        wg_sample->size = size;
-        wg_parser_push_data(reader->wg_parser, wg_sample, reader->wg_sample_queue);
     }
 
     TRACE("Reader is shutting down; exiting.\n");
-- 
2.37.1

