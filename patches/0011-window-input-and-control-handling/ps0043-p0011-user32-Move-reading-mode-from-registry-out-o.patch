From fc936aed4014952f951202057bb644aef04ee9e8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 9 Nov 2021 19:50:19 +0100
Subject: [PATCH 11/14] user32: Move reading mode from registry out of graphics
 drivers.

---
 dlls/win32u/driver.c        |   4 +-
 dlls/win32u/sysparams.c     | 136 +++++++++++++++++++++++++++++++++++-
 dlls/wineandroid.drv/init.c |   6 +-
 dlls/winemac.drv/display.c  |  70 ++-----------------
 dlls/winex11.drv/settings.c |  71 ++-----------------
 include/wine/gdi_driver.h   |   2 +-
 6 files changed, 151 insertions(+), 138 deletions(-)

diff --git a/dlls/win32u/driver.c b/dlls/win32u/driver.c
index adffdaca8d2..96a4a749375 100644
--- a/dlls/win32u/driver.c
+++ b/dlls/win32u/driver.c
@@ -804,9 +804,9 @@ static LONG CDECL nulldrv_ChangeDisplaySettingsEx( LPCWSTR name, LPDEVMODEW mode
     return DISP_CHANGE_FAILED;
 }
 
-static BOOL CDECL nulldrv_EnumDisplaySettingsEx( LPCWSTR name, DWORD num, LPDEVMODEW mode, DWORD flags )
+static INT CDECL nulldrv_EnumDisplaySettingsEx( LPCWSTR name, DWORD num, LPDEVMODEW mode, DWORD flags )
 {
-    return FALSE;
+    return -1; /* use default implementation */
 }
 
 static void CDECL nulldrv_UpdateDisplayDevices( const struct gdi_device_manager *manager,
diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index 71fc1bd0003..3d7d46d8cce 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -186,6 +186,52 @@ static const WCHAR guid_devinterface_monitorW[] =
     {'{','E','6','F','0','7','B','5','F','-','E','E','9','7','-','4','A','9','0','-',
      'B','0','7','6','-','3','3','F','5','7','B','F','4','E','A','A','7','}',0};
 
+static const WCHAR default_bits_per_pel_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','B','i','t','s','P','e','r','P','e','l',0
+};
+static const WCHAR default_x_resolution_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','X','R','e','s','o','l','u','t','i','o','n',0
+};
+static const WCHAR default_y_resolution_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','Y','R','e','s','o','l','u','t','i','o','n',0
+};
+static const WCHAR default_v_refresh_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','V','R','e','f','r','e','s','h',0
+};
+static const WCHAR default_flags_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','F','l','a','g','s',0
+};
+static const WCHAR default_x_panning_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','X','P','a','n','n','i','n','g',0
+};
+static const WCHAR default_y_panning_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','Y','P','a','n','n','i','n','g',0
+};
+static const WCHAR default_orientation_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','O','r','i','e','n','t','a','t','i','o','n',0
+};
+static const WCHAR default_fixed_output_w[] =
+{
+    'D','e','f','a','u','l','t','S','e','t','t','i','n','g','s',
+    '.','F','i','x','e','d','O','u','t','p','u','t',0
+};
+
 #define NULLDRV_DEFAULT_HMONITOR ((HMONITOR)(UINT_PTR)(0x10000 + 1))
 
 /* Cached display device information */
@@ -1425,6 +1471,82 @@ static BOOL is_detached_mode( const DEVMODEW *mode )
            mode->dmPelsHeight == 0;
 }
 
+static BOOL read_registry_settings( const WCHAR *path, DEVMODEW *dev_mode )
+{
+    char buffer[offsetof(KEY_VALUE_PARTIAL_INFORMATION, Data[sizeof(DWORD)])];
+    KEY_VALUE_PARTIAL_INFORMATION *value = (void *)buffer;
+    BOOL ret = TRUE;
+    HANDLE mutex;
+    HKEY key;
+
+    mutex = get_display_device_init_mutex();
+
+    if (!config_key && !(config_key = reg_open_key( NULL, config_keyW, sizeof(config_keyW) )))
+        return FALSE;
+
+    if (!(key = reg_open_key( config_key, path, lstrlenW( path ) * sizeof(WCHAR) )))
+    {
+        release_display_device_init_mutex( mutex );
+        return FALSE;
+    }
+
+    if (ret && (ret = query_reg_value( key, default_bits_per_pel_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmBitsPerPel = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_BITSPERPEL;
+    }
+    if (ret && (ret = query_reg_value( key, default_x_resolution_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmPelsWidth = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_PELSWIDTH;
+    }
+    if (ret && (ret = query_reg_value( key, default_y_resolution_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmPelsHeight = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_PELSHEIGHT;
+    }
+    if (ret && (ret = query_reg_value( key, default_v_refresh_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmDisplayFrequency = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_DISPLAYFREQUENCY;
+    }
+    if (ret && (ret = query_reg_value( key, default_flags_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmDisplayFlags = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_DISPLAYFLAGS;
+    }
+    if (ret && (ret = query_reg_value( key, default_x_panning_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmPosition.x = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_POSITION;
+    }
+    if (ret && (ret = query_reg_value( key, default_y_panning_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmPosition.y = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_POSITION;
+    }
+    if (ret && (ret = query_reg_value( key, default_orientation_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+    {
+        dev_mode->dmDisplayOrientation = *(DWORD *)value->Data;
+        dev_mode->dmFields |= DM_DISPLAYORIENTATION;
+    }
+    if (ret && (ret = query_reg_value( key, default_fixed_output_w, value, sizeof(buffer) )) &&
+        value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
+        dev_mode->dmDisplayFixedOutput = *(DWORD *)value->Data;
+
+    NtClose( key );
+    release_display_device_init_mutex( mutex );
+    return ret;
+}
+
 /***********************************************************************
  *	     NtUserChangeDisplaySettingsExW    (win32u.@)
  */
@@ -1523,13 +1645,18 @@ BOOL WINAPI NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD mode,
     static const WCHAR wine_display_driver_w[] = {'W','i','n','e',' ','D','i','s','p','l','a','y',' ','D','r','i','v','e','r',0};
 
     WCHAR device_name[CCHDEVICENAME];
+    WCHAR registry_path[MAX_PATH];
     struct adapter *adapter;
     BOOL ret;
 
     TRACE( "%s %#x %p %#x\n", debugstr_us(device), mode, dev_mode, flags );
 
     if (!lock_display_devices()) return FALSE;
-    if ((adapter = find_adapter( device ))) lstrcpyW( device_name, adapter->dev.device_name );
+    if ((adapter = find_adapter( device )))
+    {
+        lstrcpyW( device_name, adapter->dev.device_name );
+        lstrcpynW( registry_path, adapter->config_key, MAX_PATH );
+    }
     unlock_display_devices();
     if (!adapter)
     {
@@ -1545,7 +1672,12 @@ BOOL WINAPI NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD mode,
     lstrcpynW( dev_mode->dmDeviceName, wine_display_driver_w, ARRAY_SIZE(dev_mode->dmDeviceName) );
     memset( &dev_mode->dmFields, 0, dev_mode->dmSize - FIELD_OFFSET( DEVMODEW, dmFields ) );
 
-    ret = user_driver->pEnumDisplaySettingsEx( device_name, mode, dev_mode, flags );
+    if ((ret = user_driver->pEnumDisplaySettingsEx( device_name, mode, dev_mode, flags )) < 0)
+    {
+        if (mode == ENUM_REGISTRY_SETTINGS) ret = read_registry_settings( registry_path, dev_mode );
+        else ret = FALSE;
+    }
+
     if (ret)
         TRACE( "device:%s mode index:%#x position:(%d,%d) resolution:%ux%u frequency:%uHz "
                "depth:%ubits orientation:%#x.\n", debugstr_w(device_name), mode,
diff --git a/dlls/wineandroid.drv/init.c b/dlls/wineandroid.drv/init.c
index 25028f2f91f..76c08d2d61d 100644
--- a/dlls/wineandroid.drv/init.c
+++ b/dlls/wineandroid.drv/init.c
@@ -222,7 +222,7 @@ void CDECL ANDROID_UpdateDisplayDevices( const struct gdi_device_manager *device
 /***********************************************************************
  *           ANDROID_EnumDisplaySettingsEx
  */
-BOOL CDECL ANDROID_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmode, DWORD flags)
+INT CDECL ANDROID_EnumDisplaySettingsEx( const WCHAR *name, DWORD n, DEVMODEW *devmode, DWORD flags )
 {
     static const WCHAR dev_name[CCHDEVICENAME] =
         { 'W','i','n','e',' ','A','n','d','r','o','i','d',' ','d','r','i','v','e','r',0 };
@@ -246,11 +246,11 @@ BOOL CDECL ANDROID_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devm
         TRACE( "mode %d -- %dx%d %d bpp @%d Hz\n", n,
                devmode->dmPelsWidth, devmode->dmPelsHeight,
                devmode->dmBitsPerPel, devmode->dmDisplayFrequency );
-        return TRUE;
+        return 1;
     }
     TRACE( "mode %d -- not present\n", n );
     SetLastError( ERROR_NO_MORE_FILES );
-    return FALSE;
+    return 0;
 }
 
 
diff --git a/dlls/winemac.drv/display.c b/dlls/winemac.drv/display.c
index 402428554c6..76cff80c056 100644
--- a/dlls/winemac.drv/display.c
+++ b/dlls/winemac.drv/display.c
@@ -44,7 +44,7 @@ struct display_mode_descriptor
 };
 
 
-BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode, LPDEVMODEW devmode, DWORD flags);
+INT CDECL macdrv_EnumDisplaySettingsEx(const WCHAR *devname, DWORD mode, DEVMODEW *devmode, DWORD flags);
 
 static const char initial_mode_key[] = "Initial Display Mode";
 static const WCHAR pixelencodingW[] = {'P','i','x','e','l','E','n','c','o','d','i','n','g',0};
@@ -117,60 +117,6 @@ static BOOL get_display_device_reg_key(const WCHAR *device_name, WCHAR *key, uns
 }
 
 
-static BOOL read_registry_settings(const WCHAR *device_name, DEVMODEW *dm)
-{
-    WCHAR wine_mac_reg_key[MAX_PATH];
-    HANDLE mutex;
-    HKEY hkey;
-    DWORD type, size;
-    BOOL ret = TRUE;
-
-    dm->dmFields = 0;
-
-    mutex = get_display_device_init_mutex();
-    if (!get_display_device_reg_key(device_name, wine_mac_reg_key, ARRAY_SIZE(wine_mac_reg_key)))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-    if (RegOpenKeyExW(HKEY_CURRENT_CONFIG, wine_mac_reg_key, 0, KEY_READ, &hkey))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-#define query_value(name, data) \
-    size = sizeof(DWORD); \
-    if (RegQueryValueExA(hkey, name, 0, &type, (LPBYTE)(data), &size) || \
-        type != REG_DWORD || size != sizeof(DWORD)) \
-        ret = FALSE
-
-    query_value("DefaultSettings.BitsPerPel", &dm->dmBitsPerPel);
-    dm->dmFields |= DM_BITSPERPEL;
-    query_value("DefaultSettings.XResolution", &dm->dmPelsWidth);
-    dm->dmFields |= DM_PELSWIDTH;
-    query_value("DefaultSettings.YResolution", &dm->dmPelsHeight);
-    dm->dmFields |= DM_PELSHEIGHT;
-    query_value("DefaultSettings.VRefresh", &dm->dmDisplayFrequency);
-    dm->dmFields |= DM_DISPLAYFREQUENCY;
-    query_value("DefaultSettings.Flags", &dm->dmDisplayFlags);
-    dm->dmFields |= DM_DISPLAYFLAGS;
-    query_value("DefaultSettings.XPanning", &dm->dmPosition.x);
-    query_value("DefaultSettings.YPanning", &dm->dmPosition.y);
-    dm->dmFields |= DM_POSITION;
-    query_value("DefaultSettings.Orientation", &dm->dmDisplayOrientation);
-    dm->dmFields |= DM_DISPLAYORIENTATION;
-    query_value("DefaultSettings.FixedOutput", &dm->dmDisplayFixedOutput);
-
-#undef query_value
-
-    RegCloseKey(hkey);
-    release_display_device_init_mutex(mutex);
-    return ret;
-}
-
-
 static BOOL write_registry_settings(const WCHAR *device_name, const DEVMODEW *dm)
 {
     WCHAR wine_mac_reg_key[MAX_PATH];
@@ -966,8 +912,8 @@ better:
  *              EnumDisplaySettingsEx  (MACDRV.@)
  *
  */
-BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode,
-                                        LPDEVMODEW devmode, DWORD flags)
+INT CDECL macdrv_EnumDisplaySettingsEx(const WCHAR *devname, DWORD mode,
+                                       DEVMODEW *devmode, DWORD flags)
 {
     static const WCHAR dev_name[CCHDEVICENAME] =
         { 'W','i','n','e',' ','M','a','c',' ','d','r','i','v','e','r',0 };
@@ -985,11 +931,7 @@ BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode,
 
     memcpy(devmode->dmDeviceName, dev_name, sizeof(dev_name));
 
-    if (mode == ENUM_REGISTRY_SETTINGS)
-    {
-        TRACE("mode %d (registry) -- getting default mode\n", mode);
-        return read_registry_settings(devname, devmode);
-    }
+    if (mode == ENUM_REGISTRY_SETTINGS) return -1; /* use default implementation */
 
     if (macdrv_get_displays(&displays, &num_displays))
         goto failed;
@@ -1147,13 +1089,13 @@ BOOL CDECL macdrv_EnumDisplaySettingsEx(LPCWSTR devname, DWORD mode,
         TRACE(" (synthesized)");
     TRACE("\n");
 
-    return TRUE;
+    return 1;
 
 failed:
     TRACE("mode %d -- not present\n", mode);
     if (displays) macdrv_free_displays(displays);
     SetLastError(ERROR_NO_MORE_FILES);
-    return FALSE;
+    return 0;
 }
 
 
diff --git a/dlls/winex11.drv/settings.c b/dlls/winex11.drv/settings.c
index 083fefa95af..1485283e6ed 100644
--- a/dlls/winex11.drv/settings.c
+++ b/dlls/winex11.drv/settings.c
@@ -254,59 +254,6 @@ static BOOL get_display_device_reg_key(const WCHAR *device_name, WCHAR *key, uns
     return TRUE;
 }
 
-static BOOL read_registry_settings(const WCHAR *device_name, DEVMODEW *dm)
-{
-    WCHAR wine_x11_reg_key[MAX_PATH];
-    HANDLE mutex;
-    HKEY hkey;
-    DWORD type, size;
-    BOOL ret = TRUE;
-
-    dm->dmFields = 0;
-
-    mutex = get_display_device_init_mutex();
-    if (!get_display_device_reg_key(device_name, wine_x11_reg_key, ARRAY_SIZE(wine_x11_reg_key)))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-    if (RegOpenKeyExW(HKEY_CURRENT_CONFIG, wine_x11_reg_key, 0, KEY_READ, &hkey))
-    {
-        release_display_device_init_mutex(mutex);
-        return FALSE;
-    }
-
-#define query_value(name, data) \
-    size = sizeof(DWORD); \
-    if (RegQueryValueExA(hkey, name, 0, &type, (LPBYTE)(data), &size) || \
-        type != REG_DWORD || size != sizeof(DWORD)) \
-        ret = FALSE
-
-    query_value("DefaultSettings.BitsPerPel", &dm->dmBitsPerPel);
-    dm->dmFields |= DM_BITSPERPEL;
-    query_value("DefaultSettings.XResolution", &dm->dmPelsWidth);
-    dm->dmFields |= DM_PELSWIDTH;
-    query_value("DefaultSettings.YResolution", &dm->dmPelsHeight);
-    dm->dmFields |= DM_PELSHEIGHT;
-    query_value("DefaultSettings.VRefresh", &dm->dmDisplayFrequency);
-    dm->dmFields |= DM_DISPLAYFREQUENCY;
-    query_value("DefaultSettings.Flags", &dm->u2.dmDisplayFlags);
-    dm->dmFields |= DM_DISPLAYFLAGS;
-    query_value("DefaultSettings.XPanning", &dm->u1.s2.dmPosition.x);
-    query_value("DefaultSettings.YPanning", &dm->u1.s2.dmPosition.y);
-    dm->dmFields |= DM_POSITION;
-    query_value("DefaultSettings.Orientation", &dm->u1.s2.dmDisplayOrientation);
-    dm->dmFields |= DM_DISPLAYORIENTATION;
-    query_value("DefaultSettings.FixedOutput", &dm->u1.s2.dmDisplayFixedOutput);
-
-#undef query_value
-
-    RegCloseKey(hkey);
-    release_display_device_init_mutex(mutex);
-    return ret;
-}
-
 static BOOL write_registry_settings(const WCHAR *device_name, const DEVMODEW *dm)
 {
     WCHAR wine_x11_reg_key[MAX_PATH];
@@ -467,7 +414,7 @@ static DWORD get_display_depth(ULONG_PTR display_id)
  *		EnumDisplaySettingsEx  (X11DRV.@)
  *
  */
-BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmode, DWORD flags)
+INT CDECL X11DRV_EnumDisplaySettingsEx( const WCHAR *name, DWORD n, DEVMODEW *devmode, DWORD flags )
 {
     static const WCHAR dev_name[CCHDEVICENAME] =
         { 'W','i','n','e',' ','X','1','1',' ','d','r','i','v','e','r',0 };
@@ -477,22 +424,14 @@ BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmo
 
     lstrcpyW( devmode->dmDeviceName, dev_name );
 
-    if (n == ENUM_REGISTRY_SETTINGS)
-    {
-        if (!read_registry_settings(name, devmode))
-        {
-            ERR("Failed to get %s registry display settings.\n", wine_dbgstr_w(name));
-            return FALSE;
-        }
-        return TRUE;
-    }
+    if (n == ENUM_REGISTRY_SETTINGS) return -1; /* use default implementation */
 
     if (n == ENUM_CURRENT_SETTINGS)
     {
         if (!handler.get_id(name, &id) || !handler.get_current_mode(id, devmode))
         {
             ERR("Failed to get %s current display settings.\n", wine_dbgstr_w(name));
-            return FALSE;
+            return 0;
         }
 
         if (!is_detached_mode(devmode))
@@ -508,7 +447,7 @@ BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmo
         {
             ERR("Failed to get %s supported display modes.\n", wine_dbgstr_w(name));
             LeaveCriticalSection(&modes_section);
-            return FALSE;
+            return 0;
         }
 
         qsort(modes, mode_count, sizeof(*modes) + modes[0].dmDriverExtra, mode_compare);
@@ -526,7 +465,7 @@ BOOL CDECL X11DRV_EnumDisplaySettingsEx( LPCWSTR name, DWORD n, LPDEVMODEW devmo
         LeaveCriticalSection(&modes_section);
         WARN("handler:%s device:%s mode index:%#x not found.\n", handler.name, wine_dbgstr_w(name), n);
         SetLastError(ERROR_NO_MORE_FILES);
-        return FALSE;
+        return 0;
     }
 
     cached = (DEVMODEW *)((BYTE *)cached_modes + (sizeof(*cached_modes) + cached_modes[0].dmDriverExtra) * n);
diff --git a/include/wine/gdi_driver.h b/include/wine/gdi_driver.h
index f76170f5a16..0d3c6a3100c 100644
--- a/include/wine/gdi_driver.h
+++ b/include/wine/gdi_driver.h
@@ -291,7 +291,7 @@ struct user_driver_funcs
     void    (CDECL *pUpdateClipboard)(void);
     /* display modes */
     LONG    (CDECL *pChangeDisplaySettingsEx)(LPCWSTR,LPDEVMODEW,HWND,DWORD,LPVOID);
-    BOOL    (CDECL *pEnumDisplaySettingsEx)(LPCWSTR,DWORD,LPDEVMODEW,DWORD);
+    INT     (CDECL *pEnumDisplaySettingsEx)(LPCWSTR,DWORD,LPDEVMODEW,DWORD);
     void    (CDECL *pUpdateDisplayDevices)(const struct gdi_device_manager *,BOOL,void*);
     /* windowing functions */
     BOOL    (CDECL *pCreateDesktopWindow)(HWND);
-- 
2.34.1

