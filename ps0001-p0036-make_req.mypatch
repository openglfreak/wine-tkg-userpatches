From 94bbd34be195ff745de0b094f1583d2aa7474e7a Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Fri, 12 Mar 2021 18:27:36 -0600
Subject: [PATCH 36/38] make_req

---
 include/wine/server_protocol.h | 100 +++++++++++++++++++++++++++++++++++++++--
 server/request.h               |  27 +++++++++--
 server/trace.c                 |  47 ++++++++++++++++++-
 3 files changed, 165 insertions(+), 9 deletions(-)

diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 18551a2d448..90afd91e7ba 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -467,6 +467,7 @@ enum apc_type
     APC_MAP_VIEW,
     APC_UNMAP_VIEW,
     APC_CREATE_THREAD,
+    APC_DUP_HANDLE,
     APC_BREAK_PROCESS
 };
 
@@ -577,6 +578,15 @@ typedef union
         mem_size_t       reserve;
         mem_size_t       commit;
     } create_thread;
+    struct
+    {
+        enum apc_type    type;
+        obj_handle_t     src_handle;
+        obj_handle_t     dst_process;
+        unsigned int     access;
+        unsigned int     attributes;
+        unsigned int     options;
+    } dup_handle;
 } apc_call_t;
 
 typedef union
@@ -668,6 +678,12 @@ typedef union
     {
         enum apc_type    type;
         unsigned int     status;
+        obj_handle_t     handle;
+    } dup_handle;
+    struct
+    {
+        enum apc_type    type;
+        unsigned int     status;
     } break_process;
 } apc_result_t;
 
@@ -1255,9 +1271,7 @@ struct dup_handle_reply
 {
     struct reply_header __header;
     obj_handle_t handle;
-    int          self;
-    int          closed;
-    char __pad_20[4];
+    char __pad_12[4];
 };
 
 
@@ -5388,6 +5402,72 @@ struct resume_process_reply
 };
 
 
+enum fast_sync_type
+{
+    FAST_SYNC_SEMAPHORE = 1,
+    FAST_SYNC_MUTEX,
+    FAST_SYNC_EVENT,
+    FAST_SYNC_SERVER,
+    FAST_SYNC_QUEUE,
+};
+
+
+
+struct get_fast_sync_device_request
+{
+    struct request_header __header;
+    char __pad_12[4];
+};
+struct get_fast_sync_device_reply
+{
+    struct reply_header __header;
+    obj_handle_t handle;
+    char __pad_12[4];
+};
+
+
+
+struct get_fast_sync_obj_request
+{
+    struct request_header __header;
+    obj_handle_t handle;
+};
+struct get_fast_sync_obj_reply
+{
+    struct reply_header __header;
+    obj_handle_t handle;
+    int          obj;
+    int          type;
+    unsigned int access;
+};
+
+
+
+struct fast_select_queue_request
+{
+    struct request_header __header;
+    obj_handle_t handle;
+};
+struct fast_select_queue_reply
+{
+    struct reply_header __header;
+};
+
+
+
+struct fast_unselect_queue_request
+{
+    struct request_header __header;
+    obj_handle_t handle;
+    int          signaled;
+    char __pad_20[4];
+};
+struct fast_unselect_queue_reply
+{
+    struct reply_header __header;
+};
+
+
 enum request
 {
     REQ_new_process,
@@ -5664,6 +5744,10 @@ enum request
     REQ_get_esync_fd,
     REQ_esync_msgwait,
     REQ_get_esync_apc_fd,
+    REQ_get_fast_sync_device,
+    REQ_get_fast_sync_obj,
+    REQ_fast_select_queue,
+    REQ_fast_unselect_queue,
     REQ_NB_REQUESTS
 };
 
@@ -5945,6 +6029,10 @@ union generic_request
     struct get_esync_fd_request get_esync_fd_request;
     struct esync_msgwait_request esync_msgwait_request;
     struct get_esync_apc_fd_request get_esync_apc_fd_request;
+    struct get_fast_sync_device_request get_fast_sync_device_request;
+    struct get_fast_sync_obj_request get_fast_sync_obj_request;
+    struct fast_select_queue_request fast_select_queue_request;
+    struct fast_unselect_queue_request fast_unselect_queue_request;
 };
 union generic_reply
 {
@@ -6224,11 +6312,15 @@ union generic_reply
     struct get_esync_fd_reply get_esync_fd_reply;
     struct esync_msgwait_reply esync_msgwait_reply;
     struct get_esync_apc_fd_reply get_esync_apc_fd_reply;
+    struct get_fast_sync_device_reply get_fast_sync_device_reply;
+    struct get_fast_sync_obj_reply get_fast_sync_obj_reply;
+    struct fast_select_queue_reply fast_select_queue_reply;
+    struct fast_unselect_queue_reply fast_unselect_queue_reply;
 };
 
 /* ### protocol_version begin ### */
 
-#define SERVER_PROTOCOL_VERSION 685
+#define SERVER_PROTOCOL_VERSION 686
 
 /* ### protocol_version end ### */
 
diff --git a/server/request.h b/server/request.h
index 23308ed49e6..7268716965d 100644
--- a/server/request.h
+++ b/server/request.h
@@ -393,6 +393,10 @@ DECL_HANDLER(get_job_info);
 DECL_HANDLER(get_esync_fd);
 DECL_HANDLER(esync_msgwait);
 DECL_HANDLER(get_esync_apc_fd);
+DECL_HANDLER(get_fast_sync_device);
+DECL_HANDLER(get_fast_sync_obj);
+DECL_HANDLER(fast_select_queue);
+DECL_HANDLER(fast_unselect_queue);
 
 #ifdef WANT_REQUEST_HANDLERS
 
@@ -673,6 +677,10 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
     (req_handler)req_get_esync_fd,
     (req_handler)req_esync_msgwait,
     (req_handler)req_get_esync_apc_fd,
+    (req_handler)req_get_fast_sync_device,
+    (req_handler)req_get_fast_sync_obj,
+    (req_handler)req_fast_select_queue,
+    (req_handler)req_fast_unselect_queue,
 };
 
 C_ASSERT( sizeof(abstime_t) == 8 );
@@ -879,9 +887,7 @@ C_ASSERT( FIELD_OFFSET(struct dup_handle_request, attributes) == 28 );
 C_ASSERT( FIELD_OFFSET(struct dup_handle_request, options) == 32 );
 C_ASSERT( sizeof(struct dup_handle_request) == 40 );
 C_ASSERT( FIELD_OFFSET(struct dup_handle_reply, handle) == 8 );
-C_ASSERT( FIELD_OFFSET(struct dup_handle_reply, self) == 12 );
-C_ASSERT( FIELD_OFFSET(struct dup_handle_reply, closed) == 16 );
-C_ASSERT( sizeof(struct dup_handle_reply) == 24 );
+C_ASSERT( sizeof(struct dup_handle_reply) == 16 );
 C_ASSERT( FIELD_OFFSET(struct make_temporary_request, handle) == 12 );
 C_ASSERT( sizeof(struct make_temporary_request) == 16 );
 C_ASSERT( FIELD_OFFSET(struct open_process_request, pid) == 12 );
@@ -2237,6 +2243,21 @@ C_ASSERT( FIELD_OFFSET(struct suspend_process_request, handle) == 12 );
 C_ASSERT( FIELD_OFFSET(struct esync_msgwait_request, in_msgwait) == 12 );
 C_ASSERT( sizeof(struct esync_msgwait_request) == 16 );
 C_ASSERT( sizeof(struct get_esync_apc_fd_request) == 16 );
+C_ASSERT( sizeof(struct get_fast_sync_device_request) == 16 );
+C_ASSERT( FIELD_OFFSET(struct get_fast_sync_device_reply, handle) == 8 );
+C_ASSERT( sizeof(struct get_fast_sync_device_reply) == 16 );
+C_ASSERT( FIELD_OFFSET(struct get_fast_sync_obj_request, handle) == 12 );
+C_ASSERT( sizeof(struct get_fast_sync_obj_request) == 16 );
+C_ASSERT( FIELD_OFFSET(struct get_fast_sync_obj_reply, handle) == 8 );
+C_ASSERT( FIELD_OFFSET(struct get_fast_sync_obj_reply, obj) == 12 );
+C_ASSERT( FIELD_OFFSET(struct get_fast_sync_obj_reply, type) == 16 );
+C_ASSERT( FIELD_OFFSET(struct get_fast_sync_obj_reply, access) == 20 );
+C_ASSERT( sizeof(struct get_fast_sync_obj_reply) == 24 );
+C_ASSERT( FIELD_OFFSET(struct fast_select_queue_request, handle) == 12 );
+C_ASSERT( sizeof(struct fast_select_queue_request) == 16 );
+C_ASSERT( FIELD_OFFSET(struct fast_unselect_queue_request, handle) == 12 );
+C_ASSERT( FIELD_OFFSET(struct fast_unselect_queue_request, signaled) == 16 );
+C_ASSERT( sizeof(struct fast_unselect_queue_request) == 24 );
 
 #endif  /* WANT_REQUEST_HANDLERS */
 
diff --git a/server/trace.c b/server/trace.c
index f7c792b326d..4f2aa7bbf46 100644
--- a/server/trace.c
+++ b/server/trace.c
@@ -1687,8 +1687,6 @@ static void dump_dup_handle_request( const struct dup_handle_request *req )
 static void dump_dup_handle_reply( const struct dup_handle_reply *req )
 {
     fprintf( stderr, " handle=%04x", req->handle );
-    fprintf( stderr, ", self=%d", req->self );
-    fprintf( stderr, ", closed=%d", req->closed );
 }
 
 static void dump_make_temporary_request( const struct make_temporary_request *req )
@@ -4462,6 +4460,39 @@ static void dump_resume_process_request( const struct resume_process_request *re
     fprintf( stderr, " handle=%04x", req->handle );
 }
 
+static void dump_get_fast_sync_device_request( const struct get_fast_sync_device_request *req )
+{
+}
+
+static void dump_get_fast_sync_device_reply( const struct get_fast_sync_device_reply *req )
+{
+    fprintf( stderr, " handle=%04x", req->handle );
+}
+
+static void dump_get_fast_sync_obj_request( const struct get_fast_sync_obj_request *req )
+{
+    fprintf( stderr, " handle=%04x", req->handle );
+}
+
+static void dump_get_fast_sync_obj_reply( const struct get_fast_sync_obj_reply *req )
+{
+    fprintf( stderr, " handle=%04x", req->handle );
+    fprintf( stderr, ", obj=%d", req->obj );
+    fprintf( stderr, ", type=%d", req->type );
+    fprintf( stderr, ", access=%08x", req->access );
+}
+
+static void dump_fast_select_queue_request( const struct fast_select_queue_request *req )
+{
+    fprintf( stderr, " handle=%04x", req->handle );
+}
+
+static void dump_fast_unselect_queue_request( const struct fast_unselect_queue_request *req )
+{
+    fprintf( stderr, " handle=%04x", req->handle );
+    fprintf( stderr, ", signaled=%d", req->signaled );
+}
+
 static const dump_func req_dumpers[REQ_NB_REQUESTS] = {
     (dump_func)dump_new_process_request,
     (dump_func)dump_exec_process_request,
@@ -4737,6 +4768,10 @@ static const dump_func req_dumpers[REQ_NB_REQUESTS] = {
     (dump_func)dump_get_esync_fd_request,
     (dump_func)dump_esync_msgwait_request,
     (dump_func)dump_get_esync_apc_fd_request,
+    (dump_func)dump_get_fast_sync_device_request,
+    (dump_func)dump_get_fast_sync_obj_request,
+    (dump_func)dump_fast_select_queue_request,
+    (dump_func)dump_fast_unselect_queue_request,
 };
 
 static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
@@ -5014,6 +5049,10 @@ static const dump_func reply_dumpers[REQ_NB_REQUESTS] = {
     NULL,
     NULL,
     NULL,
+    (dump_func)dump_get_fast_sync_device_reply,
+    (dump_func)dump_get_fast_sync_obj_reply,
+    NULL,
+    NULL,
 };
 
 static const char * const req_names[REQ_NB_REQUESTS] = {
@@ -5291,6 +5330,10 @@ static const char * const req_names[REQ_NB_REQUESTS] = {
     "get_esync_fd",
     "esync_msgwait",
     "get_esync_apc_fd",
+    "get_fast_sync_device",
+    "get_fast_sync_obj",
+    "fast_select_queue",
+    "fast_unselect_queue",
 };
 
 static const struct
-- 
2.11.4.GIT

