From 2307a002483fb292d9b8b1b8745a0486035c78e3 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 6 Mar 2021 01:26:06 +0100
Subject: [PATCH 4/9] winepulse.drv: Make minimum values of minimum and default
 period configurable per environment variables.

Signed-off-by: Torge Matthies <openglfreak@googlemail.com>
---
 dlls/winepulse.drv/mmdevdrv.c | 39 +++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/dlls/winepulse.drv/mmdevdrv.c b/dlls/winepulse.drv/mmdevdrv.c
index cd96dbe9e51..21a297d8e91 100644
--- a/dlls/winepulse.drv/mmdevdrv.c
+++ b/dlls/winepulse.drv/mmdevdrv.c
@@ -486,6 +486,41 @@ static void convert_channel_map(const pa_channel_map *pa_map, WAVEFORMATEXTENSIB
     fmt->dwChannelMask = pa_mask;
 }
 
+static inline int parse_envar_reftime(const char *name, REFERENCE_TIME *out) {
+    char *envar, *endptr = 0;
+    long long value;
+
+    envar = getenv(name);
+    if (!envar || !*envar)
+        return 0;
+
+    errno = 0;
+    value = strtoll(envar, &endptr, 0);
+    if (value == 0 && errno != 0)
+        return -1;
+    if (endptr == envar || *endptr != '\0')
+        return -1;
+
+    if (value != (REFERENCE_TIME)value)
+        return -1;
+
+    *out = (REFERENCE_TIME)value;
+    return 1;
+}
+
+static inline int parse_envar_reftime_with_status(const char *name, REFERENCE_TIME *out, const char *msg) {
+    int status = parse_envar_reftime(name, out);
+    switch (status) {
+        case 1:
+            MESSAGE(msg, *out);
+            break;
+        case -1:
+            MESSAGE("Failed to parse %s.\n", name);
+            break;
+    }
+    return status;
+}
+
 static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, WAVEFORMATEXTENSIBLE *fmt) {
     static const WCHAR min_minimum_period_keyW[] = {'M','i','n','M','i','n','P','e','r','i','o','d',0};
     static const WCHAR min_default_period_keyW[] = {'M','i','n','D','e','f','P','e','r','i','o','d',0};
@@ -573,9 +608,13 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
         RegCloseKey(key);
     }
 
+    parse_envar_reftime_with_status("STAGING_PULSE_MINMIN_PERIOD", &min_minimum_period,
+                                    "PulseAudio minimum min_period set to %ld.\n");
     if (pulse_min_period[!render] < min_minimum_period)
         pulse_min_period[!render] = min_minimum_period;
 
+    parse_envar_reftime_with_status("STAGING_PULSE_MINDEF_PERIOD", &min_default_period,
+                                    "PulseAudio minimum def_period set to %ld.\n");
     if (pulse_def_period[!render] < min_default_period)
         pulse_def_period[!render] = min_default_period;
 
-- 
2.30.1

