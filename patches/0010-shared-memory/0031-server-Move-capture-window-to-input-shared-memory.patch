From cde69743bd41781e7399d28340170fdd53f41ed0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 22:10:36 +0100
Subject: [PATCH 31/44] server: Move capture window to input shared memory.

As well as menu owner / menu size window handles.
---
 server/protocol.def |  3 +++
 server/queue.c      | 39 +++++++++++++++++++--------------------
 2 files changed, 22 insertions(+), 20 deletions(-)

diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -886,7 +886,10 @@ struct input_shared_memory
     int                  created;
     thread_id_t          tid;
     user_handle_t        focus;            /* handle to the focus window */
+    user_handle_t        capture;          /* handle to the capture window */
     user_handle_t        active;           /* handle to the active window */
+    user_handle_t        menu_owner;       /* handle to the menu owner */
+    user_handle_t        move_size;        /* handle to the moving/resizing window */
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 11111111111..11111111111 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -101,9 +101,6 @@ struct thread_input
 {
     struct object          obj;           /* object header */
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
-    user_handle_t          capture;       /* capture window */
-    user_handle_t          menu_owner;    /* current menu owner window */
-    user_handle_t          move_size;     /* current moving/resizing window */
     user_handle_t          caret;         /* caret window */
     rectangle_t            caret_rect;    /* caret rectangle */
     int                    caret_hide;    /* caret hide count */
@@ -319,10 +316,10 @@ static struct thread_input *create_thread_input( struct thread *thread )
         input->shared = thread->input_shared;
         SHARED_WRITE_BEGIN( &input->shared->seq );
         input->shared->focus        = 0;
-        input->capture      = 0;
+        input->shared->capture      = 0;
         input->shared->active       = 0;
-        input->menu_owner   = 0;
-        input->move_size    = 0;
+        input->shared->menu_owner   = 0;
+        input->shared->move_size    = 0;
         input->cursor       = 0;
         input->cursor_count = 0;
         SHARED_WRITE_END( &input->shared->seq );
@@ -1273,7 +1270,7 @@ static void thread_input_dump( struct object *obj, int verbose )
 {
     struct thread_input *input = (struct thread_input *)obj;
     fprintf( stderr, "Thread input focus=%08x capture=%08x active=%08x\n",
-             input->shared->focus, input->capture, input->shared->active );
+             input->shared->focus, input->shared->capture, input->shared->active );
 }
 
 static void thread_input_destroy( struct object *obj )
@@ -1296,10 +1293,10 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
 
     SHARED_WRITE_BEGIN( &input->shared->seq );
     if (window == input->shared->focus) input->shared->focus = 0;
-    if (window == input->capture) input->capture = 0;
+    if (window == input->shared->capture) input->shared->capture = 0;
     if (window == input->shared->active) input->shared->active = 0;
-    if (window == input->menu_owner) input->menu_owner = 0;
-    if (window == input->move_size) input->move_size = 0;
+    if (window == input->shared->menu_owner) input->shared->menu_owner = 0;
+    if (window == input->shared->move_size) input->shared->move_size = 0;
     if (window == input->caret) set_caret_window( input, 0 );
     SHARED_WRITE_END( &input->shared->seq );
 }
@@ -1725,7 +1722,7 @@ static user_handle_t find_hardware_message_window( struct desktop *desktop, stru
             if (*msg_code < WM_SYSKEYDOWN) *msg_code += WM_SYSKEYDOWN - WM_KEYDOWN;
         }
     }
-    else if (!input || !(win = input->capture)) /* mouse message */
+    else if (!input || !(win = input->shared->capture)) /* mouse message */
     {
         if (is_window_visible( msg->win ) && !is_window_transparent( msg->win )) win = msg->win;
         else win = shallow_window_from_point( desktop, msg->x, msg->y );
@@ -3327,10 +3324,10 @@ DECL_HANDLER(get_thread_input)
     if (input)
     {
         reply->focus      = input->shared->focus;
-        reply->capture    = input->capture;
+        reply->capture    = input->shared->capture;
         reply->active     = input->shared->active;
-        reply->menu_owner = input->menu_owner;
-        reply->move_size  = input->move_size;
+        reply->menu_owner = input->shared->menu_owner;
+        reply->move_size  = input->shared->move_size;
         reply->caret      = input->caret;
         reply->cursor     = input->cursor;
         reply->show_count = input->cursor_count;
@@ -3470,16 +3467,18 @@ DECL_HANDLER(set_capture_window)
         struct thread_input *input = queue->input;
 
         /* if in menu mode, reject all requests to change focus, except if the menu bit is set */
-        if (input->menu_owner && !(req->flags & CAPTURE_MENU))
+        if (input->shared->menu_owner && !(req->flags & CAPTURE_MENU))
         {
             set_error(STATUS_ACCESS_DENIED);
             return;
         }
-        reply->previous = input->capture;
-        input->capture = get_user_full_handle( req->handle );
-        input->menu_owner = (req->flags & CAPTURE_MENU) ? input->capture : 0;
-        input->move_size = (req->flags & CAPTURE_MOVESIZE) ? input->capture : 0;
-        reply->full_handle = input->capture;
+        reply->previous = input->shared->capture;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
+        input->shared->capture = get_user_full_handle( req->handle );
+        input->shared->menu_owner = (req->flags & CAPTURE_MENU) ? input->shared->capture : 0;
+        input->shared->move_size = (req->flags & CAPTURE_MOVESIZE) ? input->shared->capture : 0;
+        SHARED_WRITE_END( &input->shared->seq );
+        reply->full_handle = input->shared->capture;
     }
 }
 

