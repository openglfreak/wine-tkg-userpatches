From f84d940b31b6cf45ba430a294ef45582c72cc4de Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 9 Nov 2021 19:50:46 +0100
Subject: [PATCH 14/14] user32: Add a default ChangeDisplaySettingsEx driver
 implementation.

---
 dlls/user32/sysparams.c | 15 ++++++++++-
 dlls/win32u/driver.c    |  2 +-
 dlls/win32u/sysparams.c | 60 ++++++++++++++++++++++++++++++++++++++---
 3 files changed, 71 insertions(+), 6 deletions(-)

diff --git a/dlls/user32/sysparams.c b/dlls/user32/sysparams.c
index da35532cc07..681e5fd7de6 100644
--- a/dlls/user32/sysparams.c
+++ b/dlls/user32/sysparams.c
@@ -590,8 +590,21 @@ LONG WINAPI ChangeDisplaySettingsExW( LPCWSTR devname, LPDEVMODEW devmode, HWND
                                       DWORD flags, LPVOID lparam )
 {
     UNICODE_STRING str;
+    NTSTATUS status;
+
     RtlInitUnicodeString( &str, devname );
-    return NtUserChangeDisplaySettings( &str, devmode, hwnd, flags, lparam );
+    status = NtUserChangeDisplaySettings( &str, devmode, hwnd, flags, lparam );
+    if (status || !devmode || (flags & (CDS_TEST | CDS_NORESET))) return status;
+
+    SetWindowPos( GetDesktopWindow(), 0, devmode->u1.s2.dmPosition.x, devmode->u1.s2.dmPosition.y,
+                  devmode->dmPelsWidth, devmode->dmPelsHeight,
+                  SWP_NOZORDER | SWP_NOACTIVATE | SWP_DEFERERASE );
+    ClipCursor( NULL );
+    SendMessageTimeoutW( HWND_BROADCAST, WM_DISPLAYCHANGE, devmode->dmBitsPerPel,
+                         MAKELPARAM( devmode->dmPelsWidth, devmode->dmPelsHeight ),
+                         SMTO_ABORTIFHUNG, 2000, NULL );
+
+    return DISP_CHANGE_SUCCESSFUL;
 }
 
 
diff --git a/dlls/win32u/driver.c b/dlls/win32u/driver.c
index 8e0b57f8a49..b6be00abf1d 100644
--- a/dlls/win32u/driver.c
+++ b/dlls/win32u/driver.c
@@ -763,7 +763,7 @@ static void CDECL nulldrv_UpdateClipboard(void)
 static LONG CDECL nulldrv_ChangeDisplaySettingsEx( LPCWSTR name, LPDEVMODEW mode, HWND hwnd,
                                                    DWORD flags, LPVOID lparam )
 {
-    return DISP_CHANGE_FAILED;
+    return E_NOTIMPL; /* use default implementation */
 }
 
 static INT CDECL nulldrv_EnumDisplaySettingsEx( LPCWSTR name, DWORD num, LPDEVMODEW mode, DWORD flags )
diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index ad98bbdabb6..abb52376b52 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -451,6 +451,23 @@ static RECT work_area;
 static HDC display_dc;
 static pthread_mutex_t display_dc_lock = PTHREAD_MUTEX_INITIALIZER;
 
+static const DEVMODEW default_display_modes[] =
+{
+    { .dmFields = DM_DISPLAYORIENTATION|DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT|DM_DISPLAYFLAGS|DM_DISPLAYFREQUENCY|DM_POSITION,
+      .dmBitsPerPel = 32, .dmPelsWidth = 640, .dmPelsHeight = 480, .dmDisplayFrequency = 60, },
+    { .dmFields = DM_DISPLAYORIENTATION|DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT|DM_DISPLAYFLAGS|DM_DISPLAYFREQUENCY|DM_POSITION,
+      .dmBitsPerPel = 32, .dmPelsWidth = 800, .dmPelsHeight = 600, .dmDisplayFrequency = 60, },
+    { .dmFields = DM_DISPLAYORIENTATION|DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT|DM_DISPLAYFLAGS|DM_DISPLAYFREQUENCY|DM_POSITION,
+      .dmBitsPerPel = 32, .dmPelsWidth = 1024, .dmPelsHeight = 768, .dmDisplayFrequency = 60, },
+    { .dmFields = DM_DISPLAYORIENTATION|DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT|DM_DISPLAYFLAGS|DM_DISPLAYFREQUENCY|DM_POSITION,
+      .dmBitsPerPel = 16, .dmPelsWidth = 640, .dmPelsHeight = 480, .dmDisplayFrequency = 60, },
+    { .dmFields = DM_DISPLAYORIENTATION|DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT|DM_DISPLAYFLAGS|DM_DISPLAYFREQUENCY|DM_POSITION,
+      .dmBitsPerPel = 16, .dmPelsWidth = 800, .dmPelsHeight = 600, .dmDisplayFrequency = 60, },
+    { .dmFields = DM_DISPLAYORIENTATION|DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT|DM_DISPLAYFLAGS|DM_DISPLAYFREQUENCY|DM_POSITION,
+      .dmBitsPerPel = 16, .dmPelsWidth = 1024, .dmPelsHeight = 768, .dmDisplayFrequency = 60, },
+};
+static const DWORD default_mode_index = 2;
+
 static HANDLE get_display_device_init_mutex( void )
 {
     static const WCHAR display_device_initW[] =
@@ -1976,6 +1993,7 @@ LONG WINAPI NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devm
 {
     WCHAR device_name[CCHDEVICENAME];
     WCHAR registry_path[MAX_PATH];
+    struct monitor *monitor;
     struct adapter *adapter;
     BOOL def_mode = TRUE;
     DEVMODEW dm;
@@ -1987,12 +2005,12 @@ LONG WINAPI NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devm
     if ((!devname || !devname->Length) && !devmode)
     {
         ret = user_driver->pChangeDisplaySettingsEx( NULL, NULL, hwnd, flags, lparam );
-        if (ret != DISP_CHANGE_SUCCESSFUL)
+        if (ret != DISP_CHANGE_SUCCESSFUL && ret != E_NOTIMPL)
         {
             ERR( "Restoring all displays to their registry settings returned %d.\n", ret );
             return ret;
         }
-        goto done;
+        if (ret != E_NOTIMPL) goto done;
     }
 
     if (!lock_display_devices()) return DISP_CHANGE_FAILED;
@@ -2066,16 +2084,40 @@ LONG WINAPI NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devm
     }
 
     ret = user_driver->pChangeDisplaySettingsEx( device_name, devmode, hwnd, flags, lparam );
-    if (ret != DISP_CHANGE_SUCCESSFUL)
+    if (ret && ret != E_NOTIMPL)
     {
         ERR( "Changing %s display settings returned %d.\n", debugstr_us(devname), ret );
         return ret;
     }
 
 done:
+    if (ret == E_NOTIMPL)
+    {
+        if (!check_display_mode( devname, devmode )) return DISP_CHANGE_BADMODE;
+        if (is_detached_mode( devmode )) return DISP_CHANGE_SUCCESSFUL;
+    }
     if (flags & (CDS_TEST | CDS_NORESET)) return DISP_CHANGE_SUCCESSFUL;
     if (!write_registry_settings( registry_path, TRUE, devmode ))
         ERR( "Failed to write current mode to the registry\n" );
+    if (ret != E_NOTIMPL) return DISP_CHANGE_SUCCESSFUL;
+
+    if (!lock_display_devices()) return DISP_CHANGE_FAILED;
+
+    trace_devmode(devmode);
+    LIST_FOR_EACH_ENTRY(monitor, &monitors, struct monitor, entry)
+    {
+        if (!(monitor->dev.state_flags & DISPLAY_DEVICE_ACTIVE)) continue;
+        if (monitor->adapter == adapter)
+        {
+            monitor->rc_monitor.left = devmode->dmPosition.x;
+            monitor->rc_monitor.right = devmode->dmPosition.x + devmode->dmPelsWidth;
+            monitor->rc_monitor.top = devmode->dmPosition.y;
+            monitor->rc_monitor.bottom = devmode->dmPosition.y + devmode->dmPelsHeight;
+            monitor->rc_work = monitor->rc_monitor;
+        }
+    }
+    unlock_display_devices();
+
     return DISP_CHANGE_SUCCESSFUL;
 }
 
@@ -2119,7 +2161,17 @@ BOOL WINAPI NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD mode,
     {
         if (mode == ENUM_REGISTRY_SETTINGS) ret = read_registry_settings( registry_path, FALSE, dev_mode );
         else if (mode == ENUM_CURRENT_SETTINGS) ret = read_registry_settings( registry_path, TRUE, dev_mode );
-        else ret = FALSE;
+        else if (mode >= ARRAY_SIZE(default_display_modes)) return FALSE;
+        else ret = TRUE;
+
+        if (!ret) mode = default_mode_index; /* failed to read registry or current settings */
+        if (mode < ARRAY_SIZE(default_display_modes))
+        {
+            memcpy( &dev_mode->dmFields, &default_display_modes[mode].dmFields,
+                    dev_mode->dmSize - FIELD_OFFSET( DEVMODEW, dmFields ) );
+            if (!ret) dev_mode->dmFields |= DM_POSITION;
+            ret = TRUE;
+        }
     }
 
     if (ret)
-- 
2.35.1

