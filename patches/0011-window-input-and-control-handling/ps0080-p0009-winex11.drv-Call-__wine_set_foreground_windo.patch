From 58a1d9ccabf67f394b8ef05e71e287789f99cf26 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 16 Jan 2020 17:51:48 +0100
Subject: [PATCH 09/12] winex11.drv: Call __wine_set_foreground_window on focus
 events.

This also instroduces a new internal __wine_set_foreground_window user32
export that takes a timestamp parameter.

This fixes the broken tests, because the WM_TAKE_FOCUS messages have
a timestamp, but it will not work when the take_focus mode is not used.

Standard focus events do not have a timestamp so we will have to use
XInput2 focus events to support this case.
---
 dlls/user32/focus.c      | 16 ++++++++++++++++
 dlls/user32/user32.spec  |  1 +
 dlls/winex11.drv/event.c |  6 +++---
 include/winuser.h        |  1 +
 4 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/dlls/user32/focus.c b/dlls/user32/focus.c
index f6da053d7bf..86e5215a774 100644
--- a/dlls/user32/focus.c
+++ b/dlls/user32/focus.c
@@ -355,6 +355,22 @@ HWND WINAPI SetFocus( HWND hwnd )
 }
 
 
+/*******************************************************************
+ *      __wine_set_foreground_window  (USER32.@)
+ *
+ * Internal SetForegroundWindow function to let the graphics driver
+ * update the foreground window.
+ */
+BOOL CDECL __wine_set_foreground_window( HWND hwnd, DWORD time )
+{
+    TRACE( "%p\n", hwnd );
+
+    hwnd = WIN_GetFullHandle( hwnd );
+
+    return set_foreground_window( hwnd, FALSE, time );
+}
+
+
 /*******************************************************************
  *		SetForegroundWindow  (USER32.@)
  */
diff --git a/dlls/user32/user32.spec b/dlls/user32/user32.spec
index 366564217f3..7c39e461d7d 100644
--- a/dlls/user32/user32.spec
+++ b/dlls/user32/user32.spec
@@ -840,3 +840,4 @@
 @ cdecl __wine_send_input(long ptr ptr)
 @ cdecl __wine_set_pixel_format(long long)
 @ cdecl __wine_set_user_driver(ptr long)
+@ cdecl __wine_set_foreground_window(long long)
diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 00b30338e89..b8e21806aaa 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -617,7 +617,7 @@ static void set_focus( XEvent *xev, HWND hwnd, Time time )
     x11drv_thread_data()->active_window = hwnd;
 
     TRACE( "setting foreground window to %p\n", hwnd );
-    SetForegroundWindow( hwnd );
+    __wine_set_foreground_window( hwnd, EVENT_x11_time_to_win32_time( time ) );
 
     /* Some applications expect that a being deactivated topmost window
      * receives the WM_WINDOWPOSCHANGING/WM_WINDOWPOSCHANGED messages,
@@ -848,7 +848,7 @@ static BOOL X11DRV_FocusIn( HWND hwnd, XEvent *xev )
         set_focus( xev, GetForegroundWindow(), CurrentTime );
     else if (!can_activate_window(hwnd))
         try_focus_another_window( xev, CurrentTime );
-    else SetForegroundWindow( hwnd );
+    else __wine_set_foreground_window( hwnd, GetTickCount() );
     return TRUE;
 }
 
@@ -902,7 +902,7 @@ static void focus_out( Display *display , HWND hwnd )
         if (hwnd == GetForegroundWindow())
         {
             TRACE( "lost focus, setting fg to desktop\n" );
-            SetForegroundWindow( GetDesktopWindow() );
+            __wine_set_foreground_window( GetDesktopWindow(), GetTickCount() );
         }
     }
  }
diff --git a/include/winuser.h b/include/winuser.h
index 83aa16204c0..cf5923ec989 100644
--- a/include/winuser.h
+++ b/include/winuser.h
@@ -4434,6 +4434,7 @@ WORD        WINAPI SYSTEM_KillSystemTimer( WORD );
 
 #ifdef __WINESRC__
 WINUSERAPI BOOL CDECL __wine_send_input( HWND hwnd, const INPUT *input, const RAWINPUT *rawinput );
+WINUSERAPI BOOL CDECL __wine_set_foreground_window( HWND hwnd, DWORD time );
 
 /* Uxtheme hook functions and struct */
 
-- 
2.35.1

