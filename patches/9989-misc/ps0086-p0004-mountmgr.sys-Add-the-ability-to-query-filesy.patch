From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Subject: [PATCH 4/5] mountmgr.sys: Add the ability to query filesystem attributes on a file handle.
Message-Id: <CAEU2+vrm7gYrDdPNNQiycA-6bE=QfP3PS8Ue-ObkRMTiLDkkBw@mail.gmail.com>
Date: Thu, 18 Mar 2021 10:54:04 -0600

This patch adds capability to the new IOCTL_MOUNTMGR_QUERY_VOLUME
ioctl to be able to return volume information on a file handle.  This
code represents the "fallback" case when standard volume information
is unavailable (for more details see the code removed from
dlls/ntdll/unix/file.c in patch 5 in the case where
get_mountmgr_fs_info() fails).

Best,
Erich

From 05fdc0539f5a5ecc5f8b690ef332c96c1ea64bb7 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Sun, 28 Feb 2021 11:44:43 -0700
#Subject: mountmgr.sys: Add the ability to query filesystem attributes on a
 file handle.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
---
 dlls/mountmgr.sys/device.c | 62 ++++++++++++++++++++++++++++++++++++++
 include/ddk/mountmgr.h     |  2 ++
 2 files changed, 64 insertions(+)

diff --git a/dlls/mountmgr.sys/device.c b/dlls/mountmgr.sys/device.c
index 7d6487ccc6a..dffb8387972 100644
--- a/dlls/mountmgr.sys/device.c
+++ b/dlls/mountmgr.sys/device.c
@@ -74,16 +74,6 @@ static const WCHAR drive_types[][8] =
     L"ramdisk"  /* DEVICE_RAMDISK */
 };
 
-enum fs_type
-{
-    FS_ERROR,    /* error accessing the device */
-    FS_UNKNOWN,  /* unknown file system */
-    FS_FAT1216,
-    FS_FAT32,
-    FS_ISO9660,
-    FS_UDF       /* For reference [E] = Ecma-167.pdf, [U] = udf260.pdf */
-};
-
 struct disk_device
 {
     enum device_type      type;        /* drive type */
@@ -2019,6 +2057,27 @@ NTSTATUS query_volume( void *buff, SIZE_T insize, SIZE_T outsize, IO_STATUS_BLOC
     }
     LeaveCriticalSection( &device_section );
 
+    if (!volume && input->info_class == FileFsAttributeInformation)
+    {
+        enum fs_type fs_type = FS_UNKNOWN;
+        HANDLE hProcess, handle;
+        BOOL ret;
+        struct get_handle_fs_type_params params = { 0, &fs_type };
+
+        if (!(hProcess = OpenProcess( PROCESS_DUP_HANDLE, FALSE, input->process )))
+            return status;
+        ret = DuplicateHandle( hProcess, input->handle, GetCurrentProcess(), &handle, 0, FALSE,
+                               DUPLICATE_SAME_ACCESS );
+        CloseHandle( hProcess );
+        if (!ret) return status;
+        params.handle = handle;
+        status = MOUNTMGR_CALL( get_handle_fs_type, &params );
+        CloseHandle( handle );
+        if (status) return status;
+        status = fill_volume_info( info_class, fs_type, 0, NULL, buff, outsize,
+                                   &iosb->Information );
+    }
+
     return status;
 }
 
diff --git a/include/ddk/mountmgr.h b/include/ddk/mountmgr.h
index 7310adb3fdc..8d593cddd1b 100644
--- a/include/ddk/mountmgr.h
+++ b/include/ddk/mountmgr.h
@@ -82,6 +82,8 @@ struct mountmgr_volume
     FS_INFORMATION_CLASS info_class;
     ULONGLONG            unix_dev;
     WCHAR                letter;
+    DWORD                process;
+    HANDLE               handle;
 };
 
 #define IOCTL_MOUNTMGR_READ_CREDENTIAL       CTL_CODE(MOUNTMGRCONTROLTYPE, 48, METHOD_BUFFERED, FILE_READ_ACCESS)
diff --git a/dlls/mountmgr.sys/unixlib.c b/dlls/mountmgr.sys/unixlib.c
index 6a484f4327c..00903fed4b5 100644
--- a/dlls/mountmgr.sys/unixlib.c
+++ b/dlls/mountmgr.sys/unixlib.c
@@ -30,6 +30,7 @@
 #include <sys/mount.h>
 #endif
 #include <termios.h>
+#include "wine/server.h"
 
 #include "unixlib.h"
 
@@ -457,6 +461,50 @@ static NTSTATUS get_shell_folder( void *args )
     return STATUS_SUCCESS;
 }
 
+static NTSTATUS get_handle_fs_type( void *args )
+{
+    const struct get_handle_fs_type_params *params = args;
+    int fd;
+    NTSTATUS status;
+    enum fs_type fs_type = FS_UNKNOWN;
+    struct statfs stfs;
+
+    status = wine_server_handle_to_fd( params->handle, 0, &fd, NULL );
+    if (status) return status;
+
+    if (!fstatfs( fd, &stfs ))
+    {
+#if defined(linux) && defined(HAVE_FSTATFS)
+        switch (stfs.f_type)
+        {
+        case 0x9660:
+            fs_type = FS_ISO9660;
+            break;
+        case 0x15013346:
+            fs_type = FS_UDF;
+            break;
+        case 0x4d44:
+            fs_type = FS_FAT32;
+            break;
+        }
+#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__DragonFly__) || defined(__APPLE__)
+        if (!strcmp( stfs.f_fstypename, "cd9660" ))
+            fs_type = FS_ISO9660;
+        else if (!strcmp( stfs.f_fstypename, "udf" ))
+            fs_type = FS_UDF;
+        else if (!strcmp( stfs.f_fstypename, "msdos" )) /* FreeBSD < 5, Apple */
+            fs_type = FS_FAT32;
+        else if (!strcmp( stfs.f_fstypename, "msdosfs" )) /* FreeBSD >= 5 */
+            fs_type = FS_FAT32;
+#endif
+    }
+
+    close( fd );
+
+    *params->fs_type = fs_type;
+    return status;
+}
+
 const unixlib_entry_t __wine_unix_call_funcs[] =
 {
     run_loop,
@@ -478,4 +526,5 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     delete_credential,
     enumerate_credentials,
     get_volume_filesystem,
+    get_handle_fs_type,
 };
diff --git a/dlls/mountmgr.sys/unixlib.h b/dlls/mountmgr.sys/unixlib.h
index 72f60f200b8..2ba43a5c414 100644
--- a/dlls/mountmgr.sys/unixlib.h
+++ b/dlls/mountmgr.sys/unixlib.h
@@ -136,6 +136,12 @@ struct ioctl_params
     ULONG *info;
 };
 
+struct get_handle_fs_type_params
+{
+    HANDLE        handle;
+    enum fs_type *fs_type;
+};
+
 enum mountmgr_funcs
 {
     unix_run_loop,
@@ -157,6 +163,7 @@ enum mountmgr_funcs
     unix_delete_credential,
     unix_enumerate_credentials,
     unix_get_volume_filesystem,
+    unix_get_handle_fs_type,
 };
 
 extern unixlib_handle_t mountmgr_handle;
diff --git a/dlls/mountmgr.sys/mountmgr.h b/dlls/mountmgr.sys/mountmgr.h
index 52fcb9358e4..e6f92d26c65 100644
--- a/dlls/mountmgr.sys/mountmgr.h
+++ b/dlls/mountmgr.sys/mountmgr.h
@@ -36,6 +36,16 @@
 #define WINE_MOUNTMGR_EXTENSIONS
 #include "ddk/mountmgr.h"
 
+enum fs_type
+{
+    FS_ERROR,    /* error accessing the device */
+    FS_UNKNOWN,  /* unknown file system */
+    FS_FAT1216,
+    FS_FAT32,
+    FS_ISO9660,
+    FS_UDF       /* For reference [E] = Ecma-167.pdf, [U] = udf260.pdf */
+};
+
 /* device functions */
 
 enum device_type

-- 
2.17.1

