From 3a4ca9ae2a73f091c2ee69d5f5cce007a169e55a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 8 Jun 2022 11:04:16 +0200
Subject: [PATCH 22/30] winegstreamer: Read wm_reader stream data using
 wg_sample struct.

---
 dlls/winegstreamer/gst_private.h  |  2 ++
 dlls/winegstreamer/unixlib.h      |  1 +
 dlls/winegstreamer/wg_sample.c    | 32 ++++++++++++++++++++++
 dlls/winegstreamer/wg_transform.c |  4 +++
 dlls/winegstreamer/wm_reader.c    | 45 +++++++++----------------------
 5 files changed, 51 insertions(+), 33 deletions(-)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -147,6 +147,8 @@ HRESULT wg_transform_read_mf(struct wg_transform *transform, struct wg_sample *s
 HRESULT wg_transform_read_quartz(struct wg_transform *transform, struct wg_sample *sample);
 
 bool wg_parser_stream_read_mf(struct wg_parser_stream *stream, struct wg_sample *sample);
+bool wg_parser_stream_read_wm(struct wg_parser_stream *stream, struct wg_sample *wg_sample,
+        QWORD *pts, QWORD *duration, DWORD *flags);
 
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj);
 
diff --git a/dlls/winegstreamer/unixlib.h b/dlls/winegstreamer/unixlib.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/unixlib.h
+++ b/dlls/winegstreamer/unixlib.h
@@ -121,6 +121,7 @@ enum wg_sample_flag
     WG_SAMPLE_FLAG_HAS_PTS = 2,
     WG_SAMPLE_FLAG_HAS_DURATION = 4,
     WG_SAMPLE_FLAG_SYNC_POINT = 8,
+    WG_SAMPLE_FLAG_DISCONTINUITY = 0x10,
 };
 
 struct wg_sample
diff --git a/dlls/winegstreamer/wg_sample.c b/dlls/winegstreamer/wg_sample.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_sample.c
+++ b/dlls/winegstreamer/wg_sample.c
@@ -417,6 +417,8 @@ HRESULT wg_transform_push_quartz(struct wg_transform *transform, struct wg_sampl
 
     if (IMediaSample_IsSyncPoint(sample->u.quartz.sample) == S_OK)
         wg_sample->flags |= WG_SAMPLE_FLAG_SYNC_POINT;
+    if (IMediaSample_IsDiscontinuity(sample->u.quartz.sample) == S_OK)
+        wg_sample->flags |= WG_SAMPLE_FLAG_DISCONTINUITY;
 
     wg_sample_queue_begin_append(queue, wg_sample);
     hr = wg_transform_push_data(transform, wg_sample);
@@ -456,6 +458,8 @@ HRESULT wg_transform_read_quartz(struct wg_transform *transform, struct wg_sampl
 
     value = !!(wg_sample->flags & WG_SAMPLE_FLAG_SYNC_POINT);
     IMediaSample_SetSyncPoint(sample->u.quartz.sample, value);
+    value = !!(wg_sample->flags & WG_SAMPLE_FLAG_DISCONTINUITY);
+    IMediaSample_SetDiscontinuity(sample->u.quartz.sample, value);
 
     return S_OK;
 }
@@ -482,3 +486,31 @@ bool wg_parser_stream_read_mf(struct wg_parser_stream *stream, struct wg_sample
     return true;
 }
 
+bool wg_parser_stream_read_wm(struct wg_parser_stream *stream, struct wg_sample *wg_sample,
+        QWORD *pts, QWORD *duration, DWORD *flags)
+{
+    struct sample *sample = CONTAINING_RECORD(wg_sample, struct sample, wg_sample);
+
+    if (sample->ops != &wm_sample_ops)
+        return false;
+
+    if (!wg_parser_stream_read_data(stream, wg_sample))
+        return false;
+
+    INSSBuffer_SetLength(sample->u.wm.sample, wg_sample->size);
+
+    if (!(wg_sample->flags & WG_SAMPLE_FLAG_HAS_PTS))
+        FIXME("Missing PTS.\n");
+    if (!(wg_sample->flags & WG_SAMPLE_FLAG_HAS_DURATION))
+        FIXME("Missing duration.\n");
+
+    *pts = wg_sample->pts;
+    *duration = wg_sample->duration;
+    *flags = 0;
+    if (wg_sample->flags & WG_SAMPLE_FLAG_DISCONTINUITY)
+        *flags |= WM_SF_DISCONTINUITY;
+    if (wg_sample->flags & WG_SAMPLE_FLAG_SYNC_POINT)
+        *flags |= WM_SF_CLEANPOINT;
+
+    return true;
+}
diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -634,6 +634,8 @@ NTSTATUS wg_transform_push_data(void *args)
         GST_BUFFER_DURATION(buffer) = sample->duration * 100;
     if (!(sample->flags & WG_SAMPLE_FLAG_SYNC_POINT))
         GST_BUFFER_FLAG_SET(buffer, GST_BUFFER_FLAG_DELTA_UNIT);
+    if (sample->flags & WG_SAMPLE_FLAG_DISCONTINUITY)
+        GST_BUFFER_FLAG_SET(buffer, GST_BUFFER_FLAG_DISCONT);
     gst_atomic_queue_push(transform->input_queue, buffer);
 
     params->result = S_OK;
@@ -767,6 +769,8 @@ NTSTATUS wg_sample_read_from_buffer(GstBuffer *buffer, GstCaps *caps, gsize plan
     }
     if (!GST_BUFFER_FLAG_IS_SET(buffer, GST_BUFFER_FLAG_DELTA_UNIT))
         sample->flags |= WG_SAMPLE_FLAG_SYNC_POINT;
+    if (GST_BUFFER_FLAG_IS_SET(buffer, GST_BUFFER_FLAG_DISCONT))
+        sample->flags |= WG_SAMPLE_FLAG_DISCONTINUITY;
 
     if (needs_copy)
     {
diff --git a/dlls/winegstreamer/wm_reader.c b/dlls/winegstreamer/wm_reader.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wm_reader.c
+++ b/dlls/winegstreamer/wm_reader.c
@@ -1961,11 +1961,11 @@ HRESULT wm_reader_get_stream_sample(struct wm_reader *reader, WORD stream_number
     IWMReaderCallbackAdvanced *callback_advanced = reader->callback_advanced;
     struct wg_parser_stream *wg_stream;
     struct wg_parser_buffer wg_buffer;
+    struct wg_sample *wg_sample;
     struct wm_stream *stream;
-    DWORD size, capacity;
     INSSBuffer *sample;
+    bool success;
     HRESULT hr;
-    BYTE *data;
 
     for (;;)
     {
@@ -2014,7 +2014,6 @@ HRESULT wm_reader_get_stream_sample(struct wm_reader *reader, WORD stream_number
                     stream->index + 1, wg_buffer.size, &sample, NULL)))
             {
                 ERR("Failed to allocate stream sample of %u bytes, hr %#lx.\n", wg_buffer.size, hr);
-                wg_parser_stream_release_buffer(wg_stream);
                 return hr;
             }
         }
@@ -2024,7 +2023,6 @@ HRESULT wm_reader_get_stream_sample(struct wm_reader *reader, WORD stream_number
                     stream->index, wg_buffer.size, &sample, NULL)))
             {
                 ERR("Failed to allocate output sample of %u bytes, hr %#lx.\n", wg_buffer.size, hr);
-                wg_parser_stream_release_buffer(wg_stream);
                 return hr;
             }
         }
@@ -2034,10 +2032,7 @@ HRESULT wm_reader_get_stream_sample(struct wm_reader *reader, WORD stream_number
 
             /* FIXME: Should these be pooled? */
             if (!(object = calloc(1, offsetof(struct buffer, data[wg_buffer.size]))))
-            {
-                wg_parser_stream_release_buffer(wg_stream);
                 return E_OUTOFMEMORY;
-            }
 
             object->INSSBuffer_iface.lpVtbl = &buffer_vtbl;
             object->refcount = 1;
@@ -2047,39 +2042,23 @@ HRESULT wm_reader_get_stream_sample(struct wm_reader *reader, WORD stream_number
             sample = &object->INSSBuffer_iface;
         }
 
-        if (FAILED(hr = INSSBuffer_GetBufferAndLength(sample, &data, &size)))
-            ERR("Failed to get data pointer, hr %#lx.\n", hr);
-        if (FAILED(hr = INSSBuffer_GetMaxLength(sample, &capacity)))
-            ERR("Failed to get capacity, hr %#lx.\n", hr);
-        if (wg_buffer.size > capacity)
-            ERR("Returned capacity %lu is less than requested capacity %u.\n", capacity, wg_buffer.size);
+        if (FAILED(hr = wg_sample_create_wm(sample, &wg_sample)))
+        {
+            ERR("Failed to create wg_sample, hr %#lx.\n", hr);
+            INSSBuffer_Release(sample);
+            return hr;
+        }
+
+        success = wg_parser_stream_read_wm(wg_stream, wg_sample, pts, duration, flags);
+        wg_sample_release(wg_sample);
 
-        if (!wg_parser_stream_copy_buffer(wg_stream, data, 0, wg_buffer.size))
+        if (!success)
         {
             /* The GStreamer pin has been flushed. */
             INSSBuffer_Release(sample);
             continue;
         }
 
-        if (FAILED(hr = INSSBuffer_SetLength(sample, wg_buffer.size)))
-            ERR("Failed to set size %u, hr %#lx.\n", wg_buffer.size, hr);
-
-        wg_parser_stream_release_buffer(wg_stream);
-        wg_sample_queue_flush(reader->wg_sample_queue, false);
-
-        if (!wg_buffer.has_pts)
-            FIXME("Missing PTS.\n");
-        if (!wg_buffer.has_duration)
-            FIXME("Missing duration.\n");
-
-        *pts = wg_buffer.pts;
-        *duration = wg_buffer.duration;
-        *flags = 0;
-        if (wg_buffer.discontinuity)
-            *flags |= WM_SF_DISCONTINUITY;
-        if (!wg_buffer.delta)
-            *flags |= WM_SF_CLEANPOINT;
-
         *ret_sample = sample;
         *ret_stream_number = stream_number;
         return S_OK;
-- 
2.37.1

