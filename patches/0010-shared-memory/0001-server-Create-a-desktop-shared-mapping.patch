From c59b6dc0d3e4ec5c9669b2e6503ed2ff1469011a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 6 Mar 2021 00:05:36 +0100
Subject: [PATCH 01/40] server: Create a desktop shared mapping.

Signed-off-by: Huw Davies <huw@codeweavers.com>

server: Seal shared memory mappings against future writes.

So that even if we leak console handles, we will, at least, stop messing
with these once and for all. This only prevents write(2) and mmap(2), as
we've already mmaped the writable pages we don't need it anymore.

This fixes Dead Cells hanging on launch, as it writes its DXVK logs to
one of the thread input shared memory handles, causing GetFocus to loop
forever as the sequence number got overwritten.

CW-Bug-Id: #20128

server: Reuse shared mapping's mmaped pointer and handle mmap failures.

Desktop and its shared mapping can be still alive and may be reused
after desktop is unlinked via close_desktop_timeout() but before all
references and handles are cleared.

On the re-use path the mmap(PROT_WRITE) is called on a write-sealed fd
which will fail returning MAP_FAILED. It would then be propagated up and
dereferenced causing the server to crash.

This fixes the crash + makes sure that we can recreate the desktop
successfully if needed.

This also correctly unmap the shared memory pointers whenever a mapping
is destroyed, fixing memory leaks when many threads are created.

Fixes: 653dab05664e ("server: Seal shared memory mappings against future writes.")
Fixes: 61521e371ac4 ("HACK: server: Close desktop immediately when last user is removed.")
CW-Bug-Id: #20266
CW-Bug-Id: #20297

server: Cleanup message queue on thread exit.

When threads are killed they don't get a chance to close their message
queue handle which is kept in user_thread_info->server_queue, and the
message queues are kept alive on the server side.

In this case, msg_queue_destroy and cleanup_results are never called,
leaving message results referencing the stale queue in other thread
message queues.

Later, when the messages from the other threads are cleaned up this
causes invalid shared memory access when we try to update the queue
bits from the message results.

This doesn't cause much trouble upstream because it only leaks queue
objects, which are always valid in memory, but it breaks with Proton
shared memory patches, and the recent unmap fixes, as the queue bits
are now in unmapped memory.

This is probably a hack because it should probably instead close the
handle on behalf of the dying thread, but this doesn't play well with
process handle caches we use for fsync / esync. The handle should be
closed on process exit anyway.

Fixes: 2f844caa49fd2efa ("server: Reuse shared mapping's mmaped pointer and handle mmap failures.")
CW-Bug-Id: #20266
CW-Bug-Id: #20297
---
 configure.ac        |  1 +
 server/directory.c  | 17 +++++++++++++++
 server/file.h       |  6 ++++++
 server/mapping.c    | 52 ++++++++++++++++++++++++++++++++++++++++++++-
 server/protocol.def |  5 +++++
 server/queue.c      | 31 +++++++++++++++++----------
 server/user.h       |  2 ++
 server/winstation.c | 23 ++++++++++++++++++++
 8 files changed, 125 insertions(+), 12 deletions(-)

diff --git a/configure.ac b/configure.ac
index 11111111111..11111111111 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2051,6 +2051,7 @@ AC_CHECK_FUNCS(\
 	getrandom \
 	kqueue \
 	mach_continuous_time \
+	memfd_create \
 	pipe2 \
 	port_create \
 	posix_fadvise \
diff --git a/server/directory.c b/server/directory.c
index 11111111111..11111111111 100644
--- a/server/directory.c
+++ b/server/directory.c
@@ -37,6 +37,7 @@
 #include "process.h"
 #include "file.h"
 #include "unicode.h"
+#include "user.h"
 
 #define HASH_SIZE 7  /* default hash size */
 
@@ -283,6 +284,22 @@ struct object *get_directory_obj( struct process *process, obj_handle_t handle )
     return get_handle_obj( process, handle, 0, &directory_ops );
 }
 
+struct object *create_desktop_map_directory( struct winstation *winstation )
+{
+    static const WCHAR dir_desktop_mapsW[] = {'_','_','w','i','n','e','_','d','e','s','k','t','o','p','_','m','a','p','p','i','n','g','s'};
+    static const struct unicode_str dir_desktop_maps_str = {dir_desktop_mapsW, sizeof(dir_desktop_mapsW)};
+    struct object *root;
+    struct directory *mapping_root, *ret;
+    const struct unicode_str winsta_name = {winstation->obj.name->name, winstation->obj.name->len};
+
+    root = winstation->obj.name->parent;
+    mapping_root = create_directory( root, &dir_desktop_maps_str, OBJ_OPENIF, HASH_SIZE, NULL );
+    ret = create_directory( &mapping_root->obj, &winsta_name, OBJ_OPENIF, HASH_SIZE, NULL );
+    release_object( &mapping_root->obj );
+
+    return &ret->obj;
+}
+
 /* Global initialization */
 
 static void create_session( unsigned int id )
diff --git a/server/file.h b/server/file.h
index 11111111111..11111111111 100644
--- a/server/file.h
+++ b/server/file.h
@@ -169,6 +169,10 @@ extern struct timeout_user *add_timeout_user( timeout_t when, timeout_callback f
 extern void remove_timeout_user( struct timeout_user *user );
 extern const char *get_timeout_str( timeout_t timeout );
 
+/* directory functions */
+
+extern struct object *create_desktop_map_directory( struct winstation *winstation );
+
 /* file functions */
 
 extern struct file *get_file_obj( struct process *process, obj_handle_t handle,
@@ -205,6 +209,8 @@ extern struct object *create_user_data_mapping( struct object *root, const struc
                                                 unsigned int attr, const struct security_descriptor *sd );
 extern struct object *create_hypervisor_data_mapping( struct object *root, const struct unicode_str *name,
                                                       unsigned int attr, const struct security_descriptor *sd );
+extern struct object *create_shared_mapping( struct object *root, const struct unicode_str *name,
+                                             mem_size_t size, const struct security_descriptor *sd, void **ptr );
 
 /* device functions */
 
diff --git a/server/mapping.c b/server/mapping.c
index 11111111111..11111111111 100644
--- a/server/mapping.c
+++ b/server/mapping.c
@@ -29,6 +29,7 @@
 #include <sys/stat.h>
 #include <sys/mman.h>
 #include <unistd.h>
+#include <errno.h>
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -167,6 +168,7 @@ struct mapping
     pe_image_info_t image;           /* image info (for PE image mapping) */
     struct ranges  *committed;       /* list of committed ranges in this mapping */
     struct shared_map *shared;       /* temp file for shared PE mapping */
+    void           *shared_ptr;      /* mmaped pointer for shared mappings */
 };
 
 static void mapping_dump( struct object *obj, int verbose );
@@ -292,6 +294,7 @@ int grow_file( int unix_fd, file_pos_t new_size )
     return 0;
 }
 
+#ifndef HAVE_MEMFD_CREATE
 /* simplified version of mkstemps() */
 static int make_temp_file( char name[16] )
 {
@@ -325,10 +328,23 @@ static int check_current_dir_for_exec(void)
     unlink( tmpfn );
     return (ret != MAP_FAILED);
 }
+#endif
 
 /* create a temp file for anonymous mappings */
 static int create_temp_file( file_pos_t size )
 {
+#ifdef HAVE_MEMFD_CREATE
+    int fd = memfd_create( "wine-mapping", MFD_ALLOW_SEALING );
+    if (fd != -1)
+    {
+        if (!grow_file( fd, size ))
+        {
+            close( fd );
+            fd = -1;
+        }
+    }
+    else file_set_error();
+#else
     static int temp_dir_fd = -1;
     char tmpfn[16];
     int fd;
@@ -361,6 +377,7 @@ static int create_temp_file( file_pos_t size )
     else file_set_error();
 
     if (temp_dir_fd != server_dir_fd) fchdir( server_dir_fd );
+#endif
     return fd;
 }
 
@@ -954,6 +971,7 @@ static struct mapping *create_mapping( struct object *root, const struct unicode
     mapping->fd          = NULL;
     mapping->shared      = NULL;
     mapping->committed   = NULL;
+    mapping->shared_ptr  = MAP_FAILED;
 
     if (!(mapping->flags = get_mapping_flags( handle, flags ))) goto error;
 
@@ -1154,6 +1172,7 @@ static void mapping_destroy( struct object *obj )
     if (mapping->fd) release_object( mapping->fd );
     if (mapping->committed) release_object( mapping->committed );
     if (mapping->shared) release_object( mapping->shared );
+    if (mapping->shared_ptr != MAP_FAILED) munmap( mapping->shared_ptr, mapping->size );
 }
 
 static enum server_fd_type mapping_get_fd_type( struct fd *fd )
@@ -1228,8 +1247,12 @@ int get_page_size(void)
     return page_mask + 1;
 }
 
+#ifndef F_SEAL_FUTURE_WRITE
+#define F_SEAL_FUTURE_WRITE 0x0010  /* prevent future writes while mapped */
+#endif
+
 struct object *create_user_data_mapping( struct object *root, const struct unicode_str *name,
-                                        unsigned int attr, const struct security_descriptor *sd )
+                                         unsigned int attr, const struct security_descriptor *sd )
 {
     void *ptr;
     struct mapping *mapping;
@@ -1237,6 +1260,7 @@ struct object *create_user_data_mapping( struct object *root, const struct unico
     if (!(mapping = create_mapping( root, name, attr, sizeof(KSHARED_USER_DATA),
                                     SEC_COMMIT, 0, FILE_READ_DATA | FILE_WRITE_DATA, sd ))) return NULL;
     ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED, get_unix_fd( mapping->fd ), 0 );
+
     if (ptr != MAP_FAILED)
     {
         user_shared_data = ptr;
@@ -1259,6 +1283,32 @@ struct object *create_hypervisor_data_mapping( struct object *root, const struct
     return &mapping->obj;
 }
 
+struct object *create_shared_mapping( struct object *root, const struct unicode_str *name,
+                                      mem_size_t size, const struct security_descriptor *sd, void **ptr )
+{
+    static int seals = F_SEAL_FUTURE_WRITE | F_SEAL_SHRINK | F_SEAL_GROW | F_SEAL_SEAL;
+    struct mapping *mapping;
+
+    if (!(mapping = create_mapping( root, name, OBJ_OPENIF, size, SEC_COMMIT, 0,
+                                    FILE_READ_DATA | FILE_WRITE_DATA, sd ))) return NULL;
+
+    if (mapping->shared_ptr == MAP_FAILED)
+        mapping->shared_ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED,
+                                    get_unix_fd( mapping->fd ), 0 );
+
+    if (mapping->shared_ptr == MAP_FAILED)
+    {
+        fprintf( stderr, "wine: Failed to map shared memory: %u %m\n", errno );
+        release_object( &mapping->obj );
+        return NULL;
+    }
+
+    fcntl( get_unix_fd( mapping->fd ), F_ADD_SEALS, seals );
+    *ptr = mapping->shared_ptr;
+
+    return &mapping->obj;
+}
+
 /* create a file mapping */
 DECL_HANDLER(create_mapping)
 {
diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -898,6 +898,11 @@ struct cpu_topology_override
     unsigned char host_cpu_id[64];
 };
 
+struct desktop_shared_memory
+{
+    int placeholder;
+};
+
 /****************************************************************/
 /* Request declarations */
 
diff --git a/server/queue.c b/server/queue.c
index 11111111111..11111111111 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -132,6 +132,7 @@ struct msg_queue
     int                    quit_message;    /* is there a pending quit message? */
     int                    exit_code;       /* exit code of pending quit message */
     int                    cursor_count;    /* per-queue cursor show count */
+    int                    destroyed;       /* queue has been cleaned up */
     struct list            msg_list[NB_MSG_KINDS];  /* lists of messages */
     struct list            send_result;     /* stack of sent messages waiting for result */
     struct list            callback_result; /* list of callback messages waiting for result */
@@ -321,6 +322,7 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
         queue->hotkey_count    = 0;
         queue->quit_message    = 0;
         queue->cursor_count    = 0;
+        queue->destroyed       = 0;
         queue->recv_result     = NULL;
         queue->next_timer_id   = 0x7fff;
         queue->timeout         = NULL;
@@ -353,15 +355,6 @@ static struct msg_queue *create_msg_queue( struct thread *thread, struct thread_
     return queue;
 }
 
-/* free the message queue of a thread at thread exit */
-void free_msg_queue( struct thread *thread )
-{
-    remove_thread_hooks( thread );
-    if (!thread->queue) return;
-    release_object( thread->queue );
-    thread->queue = NULL;
-}
-
 /* synchronize thread input keystate with the desktop */
 static void sync_input_keystate( struct thread_input *input )
 {
@@ -1227,9 +1220,8 @@ static struct fast_sync *msg_queue_get_fast_sync( struct object *obj )
     return queue->fast_sync;
 }
 
-static void msg_queue_destroy( struct object *obj )
+static void cleanup_msg_queue( struct msg_queue *queue )
 {
-    struct msg_queue *queue = (struct msg_queue *)obj;
     struct list *ptr;
     struct hotkey *hotkey, *hotkey2;
     int i;
@@ -1266,6 +1258,23 @@ static void msg_queue_destroy( struct object *obj )
     if (queue->fd) release_object( queue->fd );
     if (queue->fast_sync) release_object( queue->fast_sync );
     if (do_esync()) close( queue->esync_fd );
+    queue->destroyed = 1;
+}
+
+static void msg_queue_destroy( struct object *obj )
+{
+    struct msg_queue *queue = (struct msg_queue *)obj;
+    if (!queue->destroyed) cleanup_msg_queue( queue );
+}
+
+/* free the message queue of a thread at thread exit */
+void free_msg_queue( struct thread *thread )
+{
+    remove_thread_hooks( thread );
+    if (!thread->queue) return;
+    cleanup_msg_queue( thread->queue );
+    release_object( thread->queue );
+    thread->queue = NULL;
 }
 
 static void msg_queue_poll_event( struct fd *fd, int event )
diff --git a/server/user.h b/server/user.h
index 11111111111..11111111111 100644
--- a/server/user.h
+++ b/server/user.h
@@ -77,6 +77,8 @@ struct desktop
     unsigned int         users;            /* processes and threads using this desktop */
     struct global_cursor cursor;           /* global cursor information */
     unsigned char        keystate[256];    /* asynchronous key state */
+    struct object                         *shared_mapping;   /* desktop shared memory mapping */
+    volatile struct desktop_shared_memory *shared;           /* desktop shared memory ptr */
 };
 
 /* user handles functions */
diff --git a/server/winstation.c b/server/winstation.c
index 11111111111..11111111111 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -223,6 +223,22 @@ struct desktop *get_desktop_obj( struct process *process, obj_handle_t handle, u
     return (struct desktop *)get_handle_obj( process, handle, access, &desktop_ops );
 }
 
+static volatile void *init_desktop_mapping( struct desktop *desktop, const struct unicode_str *name )
+{
+    struct object *dir = create_desktop_map_directory( desktop->winstation );
+
+    desktop->shared = NULL;
+    desktop->shared_mapping = NULL;
+
+    if (!dir) return NULL;
+
+    desktop->shared_mapping = create_shared_mapping( dir, name, sizeof(struct desktop_shared_memory),
+                                                     NULL, (void **)&desktop->shared );
+    release_object( dir );
+    if (desktop->shared_mapping) memset( (void *)desktop->shared, 0, sizeof(*desktop->shared) );
+    return desktop->shared;
+}
+
 /* create a desktop object */
 static struct desktop *create_desktop( const struct unicode_str *name, unsigned int attr,
                                        unsigned int flags, struct winstation *winstation )
@@ -246,6 +262,11 @@ static struct desktop *create_desktop( const struct unicode_str *name, unsigned
             memset( desktop->keystate, 0, sizeof(desktop->keystate) );
             list_add_tail( &winstation->desktops, &desktop->entry );
             list_init( &desktop->hotkeys );
+            if (!init_desktop_mapping( desktop, name ))
+            {
+                release_object( desktop );
+                return NULL;
+            }
         }
         else
         {
@@ -303,6 +324,8 @@ static void desktop_destroy( struct object *obj )
     if (desktop->global_hooks) release_object( desktop->global_hooks );
     if (desktop->close_timeout) remove_timeout_user( desktop->close_timeout );
     list_remove( &desktop->entry );
+    if (desktop->shared_mapping) release_object( desktop->shared_mapping );
+    desktop->shared_mapping = NULL;
     release_object( desktop->winstation );
 }
 
-- 
0.0.0

