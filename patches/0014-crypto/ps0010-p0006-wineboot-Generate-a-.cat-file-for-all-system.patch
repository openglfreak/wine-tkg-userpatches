From 1f975279a5e4152221f274acc5242baea73d8108 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Mon, 7 Aug 2023 11:04:34 +0200
Subject: [PATCH 06/15] wineboot: Generate a .cat file for all system dlls and
 exes.

Signed-off-by: Torge Matthies <openglfreak@googlemail.com>
---
 programs/wineboot/Makefile.in |   2 +-
 programs/wineboot/wineboot.c  | 445 ++++++++++++++++++++++++++++++++++
 2 files changed, 446 insertions(+), 1 deletion(-)

diff --git a/programs/wineboot/Makefile.in b/programs/wineboot/Makefile.in
index 11111111111..11111111111 100644
--- a/programs/wineboot/Makefile.in
+++ b/programs/wineboot/Makefile.in
@@ -1,6 +1,6 @@
 MODULE    = wineboot.exe
 IMPORTS   = uuid advapi32 ws2_32 kernelbase setupapi
-DELAYIMPORTS = shell32 shlwapi version user32 newdev wininet
+DELAYIMPORTS = shell32 shlwapi version user32 newdev wininet wintrust crypt32
 
 EXTRADLLFLAGS = -mconsole
 
diff --git a/programs/wineboot/wineboot.c b/programs/wineboot/wineboot.c
index 11111111111..11111111111 100644
--- a/programs/wineboot/wineboot.c
+++ b/programs/wineboot/wineboot.c
@@ -64,6 +64,9 @@
 #include <ntstatus.h>
 #define WIN32_NO_STATUS
 #include <windows.h>
+#include <wintrust.h>
+#include <mscat.h>
+#include <softpub.h>
 #include <ws2tcpip.h>
 #include <winternl.h>
 #include <ddk/wdm.h>
@@ -1870,6 +1873,445 @@ static void update_win_version(void)
     }
 }
 
+static BOOL find_or_generate_cert( HCRYPTPROV *prov, PCCERT_CONTEXT *cert_ctx )
+{
+    CERT_PUBLIC_KEY_INFO *key_info = NULL;
+    SYSTEMTIME start_time, end_time;
+    CERT_NAME_BLOB dn_blob = {0};
+    DWORD key_info_size = 0;
+    HCERTSTORE hroot = NULL;
+    BOOL ret = FALSE, b;
+    HCRYPTKEY key;
+
+    b = CryptAcquireContextW( prov, NULL, MS_ENH_RSA_AES_PROV_W, PROV_RSA_AES, CRYPT_MACHINE_KEYSET );
+    if (!b && GetLastError() == NTE_BAD_KEYSET)
+        b = CryptAcquireContextW( prov, NULL, MS_ENH_RSA_AES_PROV_W, PROV_RSA_AES, CRYPT_MACHINE_KEYSET|CRYPT_NEWKEYSET );
+    if (!b) return FALSE;
+
+    b = CryptGetUserKey( *prov, AT_SIGNATURE, &key );
+    if (!b && GetLastError() == NTE_NO_KEY)
+        b = CryptGenKey( *prov, AT_SIGNATURE, 0, &key );
+    if (!b) goto done;
+    CryptDestroyKey( key );
+
+    b = CryptExportPublicKeyInfo( *prov, AT_SIGNATURE, X509_ASN_ENCODING, NULL, &key_info_size );
+    if (b)
+    {
+        key_info = HeapAlloc( GetProcessHeap(), 0, key_info_size );
+        if (!key_info) goto gencert;
+        b = CryptExportPublicKeyInfo( *prov, AT_SIGNATURE, X509_ASN_ENCODING, key_info, &key_info_size );
+        if (!b) goto gencert;
+        hroot = CertOpenSystemStoreW( 0, L"Root" );
+        if (!hroot) goto gencert;
+        *cert_ctx = CertFindCertificateInStore( hroot, X509_ASN_ENCODING, 0, CERT_FIND_PUBLIC_KEY, key_info, NULL );
+        CertCloseStore( hroot, 0 );
+        HeapFree( GetProcessHeap(), 0, key_info );
+        key_info = NULL;
+        if (*cert_ctx)
+        {
+            ret = TRUE;
+            goto done;
+        }
+    }
+
+gencert:
+    b = CertStrToNameW( X509_ASN_ENCODING, L"", CERT_X500_NAME_STR, NULL, NULL, &dn_blob.cbData, NULL );
+    if (!b) goto done;
+    dn_blob.pbData = HeapAlloc( GetProcessHeap(), 0, dn_blob.cbData );
+    b = CertStrToNameW( X509_ASN_ENCODING, L"", CERT_X500_NAME_STR, NULL, dn_blob.pbData, &dn_blob.cbData, NULL );
+    if (!b) goto done;
+
+    GetSystemTime( &start_time );
+    start_time.wHour = 0;
+    start_time.wMinute = 0;
+    start_time.wSecond = 0;
+    start_time.wMilliseconds = 0;
+    end_time = start_time;
+    end_time.wYear += 1000;
+
+    *cert_ctx = CertCreateSelfSignCertificate( *prov, &dn_blob, 0, NULL, NULL, &start_time, &end_time, NULL );
+    if (!*cert_ctx) goto done;
+    ret = TRUE;
+
+done:
+    if (dn_blob.pbData) HeapFree( GetProcessHeap(), 0, dn_blob.pbData );
+    if (key_info) HeapFree( GetProcessHeap(), 0, key_info );
+    if (!ret) CryptReleaseContext( *prov, 0 );
+    return ret;
+}
+
+static inline LPSTR hash_alg_oid_from_hash_len( DWORD len )
+{
+    static char szOID_RSA_MD5_[] = szOID_RSA_MD5;
+    static char szOID_OIWSEC_sha1_[] = szOID_OIWSEC_sha1;
+    static char szOID_NIST_sha256_[] = szOID_NIST_sha256;
+    static char szOID_NIST_sha384_[] = szOID_NIST_sha384;
+    static char szOID_NIST_sha512_[] = szOID_NIST_sha512;
+    switch (len)
+    {
+    case 16: return szOID_RSA_MD5_;
+    case 20: return szOID_OIWSEC_sha1_;
+    case 32: return szOID_NIST_sha256_;
+    case 48: return szOID_NIST_sha384_;
+    case 64: return szOID_NIST_sha512_;
+    }
+    return NULL;
+}
+
+static BOOL make_cat( BYTE **cat_data, DWORD *cat_size, const CMSG_SIGNED_ENCODE_INFO *encode_info,
+                      const WCHAR *(__cdecl *next_file)( void *param, const WCHAR *prev, BOOL error ), void *param )
+{
+    static char szOID_CATALOG_LIST_[] = szOID_CATALOG_LIST;
+    static char *pszOID_CATALOG_LIST[] = { szOID_CATALOG_LIST_ };
+    static char szOID_CATALOG_LIST_MEMBER_V2_[] = szOID_CATALOG_LIST_MEMBER_V2;
+    static char CAT_MEMBERINFO2_OBJID_[] = CAT_MEMBERINFO2_OBJID;
+    static char SPC_INDIRECT_DATA_OBJID_[] = SPC_INDIRECT_DATA_OBJID;
+    static char SPC_PE_IMAGE_DATA_OBJID_[] = SPC_PE_IMAGE_DATA_OBJID;
+    static char szOID_CTL_[] = szOID_CTL;
+    static BYTE encoded_memberinfo2[] = { 0x80, 0x00 };
+    static CRYPT_ATTR_BLOB memberinfo2_attr = { sizeof(encoded_memberinfo2), encoded_memberinfo2 };
+    static WCHAR empty[] = L"";
+
+    BYTE list_identifier[16], *content = NULL;
+    HANDLE hfile = INVALID_HANDLE_VALUE;
+    const WCHAR *file = NULL;
+    BOOL ret = FALSE, b;
+    DWORD content_size;
+    HCRYPTPROV prov;
+    HCRYPTMSG msg;
+    CTL_INFO ci;
+
+    b = CryptAcquireContextW( &prov, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT );
+    if (!b) return FALSE;
+    b = CryptGenRandom( prov, sizeof(list_identifier), list_identifier );
+    CryptReleaseContext( prov, 0 );
+    if (!b) goto done;
+
+    memset( &ci, 0, sizeof(ci) );
+    ci.SubjectUsage.cUsageIdentifier = 1;
+    ci.SubjectUsage.rgpszUsageIdentifier = pszOID_CATALOG_LIST;
+    ci.ListIdentifier.cbData = sizeof(list_identifier);
+    ci.ListIdentifier.pbData = list_identifier;
+    ci.SubjectAlgorithm.pszObjId = szOID_CATALOG_LIST_MEMBER_V2_;
+
+    while ((file = next_file( param, file, FALSE )))
+    {
+        SPC_INDIRECT_DATA_CONTENT hash;
+        CTL_ENTRY *new_entries, *ce;
+        SPC_PE_IMAGE_DATA img_data;
+        SPC_LINK link;
+        BYTE flags;
+
+        if (ci.rgCTLEntry)
+            new_entries = HeapReAlloc( GetProcessHeap(), 0, ci.rgCTLEntry, (ci.cCTLEntry + 1) * sizeof(CTL_ENTRY) );
+        else
+            new_entries = HeapAlloc( GetProcessHeap(), 0, (ci.cCTLEntry + 1) * sizeof(CTL_ENTRY) );
+        if (!new_entries) goto done;
+        ce = new_entries + ci.cCTLEntry;
+        memset( ce, 0, sizeof(*ce) );
+        ci.rgCTLEntry = new_entries;
+        ci.cCTLEntry += 1;
+
+        hfile = CreateFileW( file, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );
+        if (hfile == INVALID_HANDLE_VALUE) goto done;
+        b = CryptCATAdminCalcHashFromFileHandle( hfile, &ce->SubjectIdentifier.cbData, NULL, 0 );
+        if (!b) goto done;
+        ce->SubjectIdentifier.pbData = HeapAlloc( GetProcessHeap(), 0, ce->SubjectIdentifier.cbData );
+        b = CryptCATAdminCalcHashFromFileHandle( hfile, &ce->SubjectIdentifier.cbData, ce->SubjectIdentifier.pbData, 0 );
+        if (!b) goto done;
+        CloseHandle( hfile );
+        hfile = INVALID_HANDLE_VALUE;
+
+        ce->cAttribute = 2;
+        ce->rgAttribute = HeapAlloc( GetProcessHeap(), 0, ce->cAttribute * sizeof(CRYPT_ATTRIBUTE) );
+        ce->rgAttribute[0].pszObjId = CAT_MEMBERINFO2_OBJID_;
+        ce->rgAttribute[0].cValue = 1;
+        ce->rgAttribute[0].rgValue = &memberinfo2_attr;
+        ce->rgAttribute[1].pszObjId = SPC_INDIRECT_DATA_OBJID_;
+        ce->rgAttribute[1].cValue = 1;
+        ce->rgAttribute[1].rgValue = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(CRYPT_ATTR_BLOB) );
+        memset( &link, 0, sizeof(link) );
+        link.dwLinkChoice = SPC_FILE_LINK_CHOICE;
+        link.pwszFile = empty;
+        memset( &img_data, 0, sizeof(img_data) );
+        img_data.Flags.cbData = sizeof(flags);
+        img_data.Flags.pbData = &flags;
+        flags = 0xa0; /* (includeResources, !includeDebugInfo, includeImportAddressTable) << 5 */
+        img_data.Flags.cUnusedBits = 5;
+        img_data.pFile = &link;
+        memset( &hash, 0, sizeof(hash) );
+        hash.Data.pszObjId = SPC_PE_IMAGE_DATA_OBJID_;
+        b = CryptEncodeObjectEx( X509_ASN_ENCODING, SPC_PE_IMAGE_DATA_STRUCT, &img_data, 0, NULL, NULL,
+                                 &hash.Data.Value.cbData );
+        if (!b) goto done;
+        hash.Data.Value.pbData = HeapAlloc( GetProcessHeap(), 0, hash.Data.Value.cbData );
+        b = CryptEncodeObjectEx( X509_ASN_ENCODING, SPC_PE_IMAGE_DATA_STRUCT, &img_data, 0, NULL,
+                                 hash.Data.Value.pbData, &hash.Data.Value.cbData );
+        if (!b) goto free_data;
+        hash.DigestAlgorithm.pszObjId = hash_alg_oid_from_hash_len( ce->SubjectIdentifier.cbData );
+        if (!hash.DigestAlgorithm.pszObjId)
+        {
+            b = FALSE;
+            goto free_data;
+        }
+        hash.Digest = ce->SubjectIdentifier;
+        b = CryptEncodeObjectEx( X509_ASN_ENCODING, SPC_INDIRECT_DATA_CONTENT_STRUCT, &hash, 0, NULL, NULL,
+                                 &ce->rgAttribute[1].rgValue[0].cbData );
+        if (!b) goto free_data;
+        ce->rgAttribute[1].rgValue[0].pbData = HeapAlloc( GetProcessHeap(), 0, ce->rgAttribute[1].rgValue[0].cbData );
+        b = CryptEncodeObjectEx( X509_ASN_ENCODING, SPC_INDIRECT_DATA_CONTENT_STRUCT, &hash, 0, NULL,
+                                 ce->rgAttribute[1].rgValue[0].pbData, &ce->rgAttribute[1].rgValue[0].cbData );
+    free_data:
+        HeapFree( GetProcessHeap(), 0, hash.Data.Value.pbData );
+        if (!b) goto done;
+    }
+
+    GetSystemTimeAsFileTime( &ci.ThisUpdate );
+    b = CryptEncodeObjectEx( PKCS_7_ASN_ENCODING, PKCS_CTL, &ci, CRYPT_ENCODE_ALLOC_FLAG, NULL, &content, &content_size );
+    if (!b) goto done;
+
+    msg = CryptMsgOpenToEncode( PKCS_7_ASN_ENCODING, 0, CMSG_SIGNED, encode_info, szOID_CTL_, NULL );
+    if (!msg) goto done;
+    b = CryptMsgUpdate(msg, content, content_size, TRUE);
+    if (!b) goto done;
+    *cat_size = 16384;
+    *cat_data = HeapAlloc( GetProcessHeap(), 0, *cat_size );
+    if (!*cat_data) goto done;
+    ret = CryptMsgGetParam( msg, CMSG_CONTENT_PARAM, 0, *cat_data, cat_size );
+    if (!ret && GetLastError() == ERROR_MORE_DATA)
+    {
+        b = CryptMsgGetParam( msg, CMSG_CONTENT_PARAM, 0, NULL, cat_size );
+        if (!b) goto done;
+        *cat_data = HeapAlloc( GetProcessHeap(), 0, *cat_size );
+        if (!*cat_data) goto done;
+        ret = CryptMsgGetParam( msg, CMSG_CONTENT_PARAM, 0, *cat_data, cat_size );
+    }
+
+done:
+    if (!ret && *cat_data) HeapFree( GetProcessHeap(), 0, *cat_data );
+    if (content) LocalFree( content );
+    if (ci.rgCTLEntry)
+    {
+        DWORD i = ci.cCTLEntry;
+        while (i-- > 0)
+        {
+            HeapFree( GetProcessHeap(), 0, ci.rgCTLEntry[i].SubjectIdentifier.pbData );
+            if (ci.rgCTLEntry[i].cAttribute >= 2)
+            {
+                LocalFree( ci.rgCTLEntry[i].rgAttribute[1].rgValue[0].pbData );
+                HeapFree( GetProcessHeap(), 0, ci.rgCTLEntry[i].rgAttribute[1].rgValue );
+            }
+            HeapFree( GetProcessHeap(), 0, ci.rgCTLEntry[i].rgAttribute );
+        }
+        HeapFree( GetProcessHeap(), 0, ci.rgCTLEntry );
+    }
+    if (hfile != INVALID_HANDLE_VALUE) CloseHandle( hfile );
+    if (file) while ((file = next_file( param, file, !ret )));
+    return ret;
+}
+
+static BOOL write_cat( const WCHAR *path, const CMSG_SIGNED_ENCODE_INFO *encode_info,
+                       const WCHAR *(__cdecl *next_file)( void *param, const WCHAR *prev, BOOL error ), void *param )
+{
+    DWORD cat_size = 0, total_written = 0, written = 0;
+    BYTE *cat_data = NULL;
+    HANDLE hfile;
+    BOOL ret;
+
+    ret = make_cat( &cat_data, &cat_size, encode_info, next_file, param );
+    if (!ret) return ret;
+    hfile = CreateFileW( path, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL );
+    if (hfile == INVALID_HANDLE_VALUE) goto done;
+    while (total_written < cat_size &&
+           (ret = WriteFile( hfile, cat_data + total_written, cat_size - total_written, &written, NULL )))
+        total_written += written;
+    if (!CloseHandle( hfile ))
+        ret = FALSE;
+done:
+    HeapFree( GetProcessHeap(), 0, cat_data );
+    return ret;
+}
+
+struct enum_system_dlls_data
+{
+    unsigned int phase;
+    WCHAR dirpath[MAX_PATH + 1];
+    UINT dirpath_len;
+    WIN32_FIND_DATAW find_data;
+    HANDLE find_handle;
+    WCHAR file_path[MAX_PATH];
+};
+
+static inline UINT get_system_dll_dir( unsigned int i, LPWSTR path, UINT count )
+{
+    switch (i)
+    {
+        case 0: return GetWindowsDirectoryW( path, count );
+        case 1: return GetSystemDirectoryW( path, count );
+        case 2: return GetSystemWow64DirectoryW( path, count );
+    }
+    return 0;
+}
+
+static inline BOOL is_pe_file( const WCHAR *filename, size_t len )
+{
+    static const struct ext
+    {
+        const WCHAR *suffix;
+        size_t len;
+    } exts[] = {
+#define X(s) { s, ARRAY_SIZE(s) - 1 }
+        X(L".acm"),
+        X(L".ax"),
+        X(L".com"),
+        X(L".cpl"),
+        X(L".dll"),
+        X(L".drv"),
+        X(L".ds"),
+        X(L".exe"),
+        X(L".mod"),
+        X(L".msstyles"),
+        X(L".ocx"),
+        X(L".sys"),
+        X(L".tlb"),
+        X(L".vxd")
+#undef X
+    };
+    size_t i;
+    for (i = 0; i < ARRAY_SIZE(exts); i++)
+    {
+        if (len > exts[i].len && !memcmp( filename + (len - exts[i].len), exts[i].suffix, exts[i].len * sizeof(WCHAR) ))
+            return TRUE;
+    }
+    return FALSE;
+}
+
+static const WCHAR *filter_files( struct enum_system_dlls_data *data )
+{
+    unsigned int phase = data->phase;
+    while (data->phase == phase)
+    {
+        size_t len = wcsnlen( data->find_data.cFileName, ARRAY_SIZE(data->find_data.cFileName) );
+        BOOL file_matches = is_pe_file( data->find_data.cFileName, len );
+        if (file_matches)
+        {
+            if (data->dirpath_len + len >= ARRAY_SIZE(data->file_path))
+                file_matches = FALSE;
+            else
+            {
+                memcpy( data->file_path, data->dirpath, data->dirpath_len * sizeof(WCHAR) );
+                memcpy( data->file_path + data->dirpath_len, data->find_data.cFileName, len * sizeof(WCHAR) );
+                data->file_path[data->dirpath_len + len] = 0;
+            }
+        }
+        if (!FindNextFileW( data->find_handle, &data->find_data ))
+            data->phase += 1;
+        if (file_matches)
+            return data->file_path;
+    }
+    return NULL;
+}
+
+static const WCHAR *__cdecl enum_system_dlls( void *param, const WCHAR *prev, BOOL error )
+{
+    struct enum_system_dlls_data *data = param;
+    if (data->phase == 0)
+    {
+        data->find_handle = INVALID_HANDLE_VALUE;
+        data->phase += 1;
+    }
+    if (error)
+        data->phase = 7;
+    while (data->phase < 7)
+    {
+        if (data->phase == 1 || data->phase == 3 || data->phase == 5)
+        {
+            WCHAR glob[MAX_PATH + 2];
+
+            if (data->find_handle != INVALID_HANDLE_VALUE)
+                FindClose( data->find_handle );
+
+            data->dirpath_len = get_system_dll_dir( data->phase / 2, data->dirpath, ARRAY_SIZE(data->dirpath) - 1 );
+            if (!data->dirpath_len || data->dirpath_len >= ARRAY_SIZE(data->dirpath) - 1 )
+            {
+                data->phase += 2;
+                continue;
+            }
+            data->dirpath[data->dirpath_len++] = '\\';
+            data->dirpath[data->dirpath_len] = 0;
+
+            memcpy( glob, data->dirpath, (data->dirpath_len + 1) * sizeof(WCHAR) );
+            glob[data->dirpath_len] = '*';
+            glob[data->dirpath_len + 1] = 0;
+            data->find_handle = FindFirstFileExW( glob, FindExInfoBasic, &data->find_data, FindExSearchNameMatch, NULL,
+                                                  FIND_FIRST_EX_LARGE_FETCH );
+            if (data->find_handle == INVALID_HANDLE_VALUE)
+                data->phase += 2;
+            else
+                data->phase += 1;
+        }
+        if (data->phase == 2 || data->phase == 4 || data->phase == 6)
+        {
+            const WCHAR *ret = filter_files( data );
+            if (ret)
+                return ret;
+        }
+    }
+    if (data->phase == 7)
+    {
+        if (data->find_handle != INVALID_HANDLE_VALUE)
+            FindClose( data->find_handle );
+        data->phase += 1;
+    }
+    return NULL;
+}
+
+static void update_catalog_file(void)
+{
+    static char szOID_NIST_sha256_[] = szOID_NIST_sha256;
+    static WCHAR basename[] = L"system.cat";
+
+    WCHAR temp_path[MAX_PATH], filename[MAX_PATH];
+    struct enum_system_dlls_data data = {0};
+    CMSG_SIGNER_ENCODE_INFO signer = {0};
+    CMSG_SIGNED_ENCODE_INFO sei = {0};
+    CERT_BLOB cert_blob = {0};
+    PCCERT_CONTEXT cert_ctx;
+    HCRYPTPROV sign_prov;
+    HCATADMIN cat_admin;
+    HCATINFO cat_info;
+
+    if (!find_or_generate_cert( &sign_prov, &cert_ctx ))
+        return;
+    sei.cbSize = sizeof(sei);
+    signer.cbSize = sizeof(signer);
+    signer.pCertInfo = cert_ctx->pCertInfo;
+    signer.hCryptProv = sign_prov;
+    signer.dwKeySpec = AT_SIGNATURE;
+    signer.HashAlgorithm.pszObjId = szOID_NIST_sha256_;
+    sei.cSigners = 1;
+    sei.rgSigners = &signer;
+    cert_blob.cbData = cert_ctx->cbCertEncoded;
+    cert_blob.pbData = cert_ctx->pbCertEncoded;
+    sei.cCertEncoded = 1;
+    sei.rgCertEncoded = &cert_blob;
+
+    GetTempPathW( ARRAY_SIZE(temp_path), temp_path );
+    GetTempFileNameW( temp_path, L"cat", 0, filename );
+    write_cat( filename, &sei, enum_system_dlls, &data );
+    if (CryptCATAdminAcquireContext( &cat_admin, NULL, 0 ))
+    {
+        if ((cat_info = CryptCATAdminAddCatalog( cat_admin, filename, basename, 0 )))
+        {
+            CertAddEncodedCertificateToSystemStoreW( L"Root", cert_ctx->pbCertEncoded, cert_ctx->cbCertEncoded );
+            CryptCATAdminReleaseCatalogContext( cat_admin, cat_info, 0 );
+        }
+        CryptCATAdminReleaseContext( cat_admin, 0 );
+    }
+    CertFreeCertificateContext( cert_ctx );
+    CryptReleaseContext( sign_prov, 0 );
+}
+
 /* execute rundll32 on the wine.inf file if necessary */
 static void update_wineprefix( BOOL force )
 {
@@ -1924,8 +2366,11 @@ static void update_wineprefix( BOOL force )
                     process = start_rundll32( inf_path, L"Wow64Install", LOWORD(machines[count]) );
                 count++;
             }
+            update_catalog_file();
             DestroyWindow( hwnd );
         }
+        else
+            update_catalog_file();
         install_root_pnp_devices();
         update_user_profile();
         update_win_version();
-- 
0.0.0

