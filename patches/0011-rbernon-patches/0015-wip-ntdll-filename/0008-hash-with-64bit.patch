From 49dcbfead350d8f0d2d7288dde9edba033cc335c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 3 Dec 2022 00:13:10 +0100
Subject: [PATCH 8/8] hash with 64bit

---
 dlls/ntdll/unix/file.c | 32 +++++++++++++++-----------------
 1 file changed, 15 insertions(+), 17 deletions(-)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -1528,29 +1528,27 @@ static ULONG hash_short_file_name( const WCHAR *name, int length, LPWSTR buffer
 {
     static const char hash_chars[32] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345";
 
-    WCHAR hash_name[MAX_DIR_ENTRY_LEN + 1];
-    LPCWSTR p, ext, end = name + length, hash_end = hash_name + length;
+    UINT64 hash_name[(MAX_DIR_ENTRY_LEN + 1) / 4];
+    WCHAR *hash_end = (WCHAR *)hash_name + length;
+    LPCWSTR p, ext, end = name + length;
+    UINT64 hash, *tmp;
     LPWSTR dst;
-    unsigned short hash;
     int i;
 
     /* Compute the hash code of the file name */
     /* If you know something about hash functions, feel free to */
     /* insert a better algorithm here... */
-    if (!is_case_sensitive)
-    {
-        for (p = name, dst = hash_name; p < end; p++, dst++)
-            *dst = towlower(*p);
-        for (p = hash_name, hash = 0xbeef; p < hash_end - 1; p++)
-            hash = (hash << 3) ^ (hash >> 5) ^ *p ^ (p[1] << 8);
-        hash = (hash << 3) ^ (hash >> 5) ^ *p;  /* Last character */
-    }
-    else
-    {
-        for (p = name, hash = 0xbeef; p < end - 1; p++)
-            hash = (hash << 3) ^ (hash >> 5) ^ *p ^ (p[1] << 8);
-        hash = (hash << 3) ^ (hash >> 5) ^ *p;  /* Last character */
-    }
+    if (is_case_sensitive)
+        memcpy( hash_name, name, length );
+    else for (p = name, dst = (WCHAR *)hash_name; p < end; p++, dst++)
+        *dst = towlower(*p);
+
+    memset( hash_end, 0, min( hash_name + ARRAY_SIZE(hash_name) - (UINT64 *)hash_end, 15 ) );
+    for (tmp = (UINT64 *)hash_name, hash = 0xbeef; tmp < (UINT64 *)(hash_end - 1); tmp++)
+        hash = (hash << 13) ^ (hash >> 19) ^ *tmp ^ (tmp[1] << 32);
+    hash = (hash << 13) ^ (hash >> 19) ^ *tmp;
+    hash = (hash >> 32) ^ (hash & 0xffffffff);
+    hash = (hash >> 16) ^ (hash & 0xffff);
 
     /* Find last dot for start of the extension */
     for (ext = end - 2; ext > name; ext--) if (*ext == '.') break;
-- 
0.0.0

