From b07b31aa5fa7c0e88f676633df6bc18a37248277 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Thu, 9 Sep 2021 21:16:26 +0300
Subject: [PATCH 5/5] winex11.drv: Use window surface for GL presentation for
 layered windows.

CW-Bug-ID: #19216
---
 dlls/winex11.drv/opengl.c | 87 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 81 insertions(+), 6 deletions(-)

diff --git a/dlls/winex11.drv/opengl.c b/dlls/winex11.drv/opengl.c
index 3d58253977b..e0236c4b602 100644
--- a/dlls/winex11.drv/opengl.c
+++ b/dlls/winex11.drv/opengl.c
@@ -255,6 +255,7 @@ enum dc_gl_layered_type
 {
     DC_GL_LAYERED_NONE,
     DC_GL_LAYERED_UPDATES,
+    DC_GL_LAYERED_ATTRIBUTES,
 };
 
 struct gl_drawable
@@ -1464,7 +1465,8 @@ static enum dc_gl_layered_type get_gl_layered_type( HWND hwnd )
     enum dc_gl_layered_type ret;
 
     if (!(data = get_win_data( hwnd ))) return DC_GL_LAYERED_NONE;
-    ret = data->layered && !data->layered_attributes ? DC_GL_LAYERED_UPDATES : DC_GL_LAYERED_NONE;
+    if (data->layered) ret = data->layered_attributes ? DC_GL_LAYERED_ATTRIBUTES : DC_GL_LAYERED_UPDATES;
+    else ret = DC_GL_LAYERED_NONE;
     release_win_data( data );
 
     return ret;
@@ -3023,25 +3025,96 @@ static void fs_hack_blit_framebuffer( struct gl_drawable *gl, GLenum draw_buffer
     return FALSE;
 }
 
+static void update_window_surface(struct gl_drawable *gl, HWND hwnd)
+{
+    char buffer[FIELD_OFFSET( BITMAPINFO, bmiColors[256] )];
+    BITMAPINFO *bmi = (BITMAPINFO *)buffer;
+    struct window_surface *surface;
+    struct x11drv_win_data *data;
+    unsigned int y, width, height, stride, pitch;
+    BYTE *dst_bits, *src_bits;
+    XImage *image;
+    RECT rect;
+
+    TRACE( "gl %p, hwnd %p, gl->layered_type %u.\n", gl, hwnd, gl->layered_type );
+
+    if (gl->layered_type != DC_GL_LAYERED_ATTRIBUTES || !gl->pixmap) return;
+
+    if (!(data = get_win_data( hwnd ))) return;
+
+    surface = data->surface;
+    if (!surface)
+    {
+        TRACE( "No surface.\n" );
+        release_win_data( data );
+        return;
+    }
+
+    rect = data->client_rect;
+    OffsetRect( &rect, -data->whole_rect.left, -data->whole_rect.top );
+
+    dst_bits = surface->funcs->get_info( surface, bmi );
+    surface->funcs->lock( surface );
+
+    rect.right = min( rect.right, abs( bmi->bmiHeader.biWidth ));
+    rect.bottom = min( rect.bottom, abs( bmi->bmiHeader.biHeight ));
+
+    width = min( rect.right - rect.left, gl->pixmap_size.cx );
+    height = min( rect.bottom - rect.top, gl->pixmap_size.cy );
+
+    image = XGetImage( gdi_display, gl->pixmap, 0, 0, width, height,
+                       AllPlanes, ZPixmap );
+    if (!image)
+    {
+        TRACE( "NULL image.\n" );
+        goto done;
+    }
+
+    if (image->bits_per_pixel != bmi->bmiHeader.biBitCount)
+    {
+        static unsigned int once;
+
+        if (!once++)
+            FIXME("Bits per pixel does not match, image %u, bmi %u.\n", image->bits_per_pixel, bmi->bmiHeader.biBitCount);
+        goto done;
+    }
+
+    stride = bmi->bmiHeader.biBitCount / 8;
+    pitch = (bmi->bmiHeader.biWidth * stride + 3) & ~3;
+    src_bits = (BYTE *)image->data;
+    for (y = 0; y < height; ++y)
+        memcpy( dst_bits + (y + rect.top) * pitch + rect.left * stride,
+                src_bits + y * image->bytes_per_line, width * stride );
+
+    add_bounds_rect( surface->funcs->get_bounds( surface ), &rect );
+
+done:
+    surface->funcs->unlock( surface );
+    if (image) XDestroyImage( image );
+    release_win_data( data );
+}
+
 static void wglFinish(void)
 {
     struct x11drv_escape_flush_gl_drawable escape;
     struct gl_drawable *gl;
     struct wgl_context *ctx = NtCurrentTeb()->glContext;
+    HWND hwnd;
 
     escape.code = X11DRV_FLUSH_GL_DRAWABLE;
     escape.gl_drawable = 0;
     escape.flush = FALSE;
 
-    if ((gl = get_gl_drawable( WindowFromDC( ctx->hdc ), 0 )))
+    if ((gl = get_gl_drawable( (hwnd = WindowFromDC( ctx->hdc )), 0 )))
     {
         switch (gl->type)
         {
         case DC_GL_PIXMAP_WIN: if (!gl->layered_type) escape.gl_drawable = gl->pixmap; break;
         case DC_GL_CHILD_WIN:  escape.gl_drawable = gl->window; break;
         default: break;
         }
         sync_context(ctx);
+        update_window_surface( gl, hwnd );
         release_gl_drawable( gl );
     }
 
@@ -3068,12 +3140,13 @@ static void wglFlush(void)
     struct x11drv_escape_flush_gl_drawable escape;
     struct gl_drawable *gl;
     struct wgl_context *ctx = NtCurrentTeb()->glContext;
+    HWND hwnd;
 
     escape.code = X11DRV_FLUSH_GL_DRAWABLE;
     escape.gl_drawable = 0;
     escape.flush = FALSE;
 
-    if ((gl = get_gl_drawable( WindowFromDC( ctx->hdc ), 0 )))
+    if ((gl = get_gl_drawable( (hwnd = WindowFromDC( ctx->hdc )), 0 )))
     {
         switch (gl->type)
         {
@@ -3095,6 +3168,7 @@ static void wglFlush(void)
         default: break;
         }
         sync_context(ctx);
+        update_window_surface( gl, hwnd );
         release_gl_drawable( gl );
     }
 
@@ -4419,6 +4492,7 @@ static BOOL WINAPI glxdrv_wglSwapBuffers( HDC hdc )
     struct gl_drawable *gl;
     struct wgl_context *ctx = NtCurrentTeb()->glContext;
     INT64 ust, msc, sbc, target_sbc = 0;
+    HWND hwnd;
 
     TRACE("(%p)\n", hdc);
 
@@ -4426,7 +4500,7 @@ static BOOL WINAPI glxdrv_wglSwapBuffers( HDC hdc )
     escape.drawable = 0;
     escape.flush = !pglXWaitForSbcOML;
 
-    if (!(gl = get_gl_drawable( WindowFromDC( hdc ), hdc )))
+    if (!(gl = get_gl_drawable( (hwnd = WindowFromDC( hdc )), hdc )))
     {
         SetLastError( ERROR_INVALID_HANDLE );
         return FALSE;
@@ -4491,6 +4565,7 @@ static BOOL WINAPI glxdrv_wglSwapBuffers( HDC hdc )
     if (escape.drawable && pglXWaitForSbcOML)
         pglXWaitForSbcOML( gdi_display, gl->drawable, target_sbc, &ust, &msc, &sbc );
 
+    update_window_surface( gl, hwnd );
     release_gl_drawable( gl );
 
     if (escape.drawable) ExtEscape( ctx->hdc, X11DRV_ESCAPE, sizeof(escape), (LPSTR)&escape, 0, NULL );
