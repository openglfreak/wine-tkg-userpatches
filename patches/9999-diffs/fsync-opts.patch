diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
#@@ -299,14 +299,14 @@ static NTSTATUS get_object( HANDLE handle, struct fsync **obj )
#     unsigned int shm_idx = 0;
#     enum fsync_type type;
# 
#-    if ((*obj = get_cached_object( handle ))) return STATUS_SUCCESS;
#-
#     if ((INT_PTR)handle < 0)
#     {
#         /* We can deal with pseudo-handles, but it's just easier this way */
#         return STATUS_NOT_IMPLEMENTED;
#     }
# 
#+    if ((*obj = get_cached_object( handle ))) return STATUS_SUCCESS;
#+
#     /* We need to try grabbing it from the server. */
#     SERVER_START_REQ( get_fsync_idx )
#     {
#@@ -498,7 +498,7 @@ NTSTATUS fsync_release_semaphore( HANDLE handle, ULONG count, ULONG *prev )
# 
#     if (prev) *prev = current;
# 
#-    futex_wake( &semaphore->count, INT_MAX );
#+    futex_wake( &semaphore->count, count );
# 
#     return STATUS_SUCCESS;
# }
#@@ -558,7 +558,7 @@ NTSTATUS fsync_set_event( HANDLE handle, LONG *prev )
#         return STATUS_OBJECT_TYPE_MISMATCH;
# 
#     if (!(current = __atomic_exchange_n( &event->signaled, 1, __ATOMIC_SEQ_CST )))
#-        futex_wake( &event->signaled, INT_MAX );
#+        futex_wake( &event->signaled, obj->type == FSYNC_AUTO_EVENT ? 1 : INT_MAX );
# 
#     if (prev) *prev = current;
# 
#@@ -600,7 +600,7 @@ NTSTATUS fsync_pulse_event( HANDLE handle, LONG *prev )
#      * Unfortunately we can't really do much better. Fortunately this is rarely
#      * used (and publicly deprecated). */
#     if (!(current = __atomic_exchange_n( &event->signaled, 1, __ATOMIC_SEQ_CST )))
#-        futex_wake( &event->signaled, INT_MAX );
#+        futex_wake( &event->signaled, obj->type == FSYNC_AUTO_EVENT ? 1 : INT_MAX );
# 
#     /* Try to give other threads a chance to wake up. Hopefully erring on this
#      * side is the better thing to do... */
#@@ -668,7 +668,7 @@ NTSTATUS fsync_release_mutex( HANDLE handle, LONG *prev )
#     if (!--mutex->count)
#     {
#         __atomic_store_n( &mutex->tid, 0, __ATOMIC_SEQ_CST );
#-        futex_wake( &mutex->tid, INT_MAX );
#+        futex_wake( &mutex->tid, 1 );
#     }
# 
#     return STATUS_SUCCESS;
@@ -903,16 +903,20 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                     case FSYNC_AUTO_SERVER:
                     {
                         struct event *event = obj->shm;
+                        int current;
 
-                        if (__sync_val_compare_and_swap( &event->signaled, 1, 0 ))
-                        {
-                            if (ac_odyssey && alertable)
-                                usleep( 0 );
+                        do {
+                            if ((current = __atomic_load_n( &event->signaled, __ATOMIC_SEQ_CST ))
+                                    && __sync_val_compare_and_swap( &event->signaled, current, 0 ) == current)
+                            {
+                                if (ac_odyssey && alertable)
+                                    usleep( 0 );
 
-                            TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                            if (waited) simulate_sched_quantum();
-                            return i;
-                        }
+                                TRACE("Woken up by handle %p [%d].\n", handles[i], i);
+                                if (waited) simulate_sched_quantum();
+                                return i;
+                            }
+                        } while (current);
 
                         futex_vector_set( &futexes[i], &event->signaled, 0 );
                         break;
