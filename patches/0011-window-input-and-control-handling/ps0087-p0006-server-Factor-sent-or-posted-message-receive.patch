From 932713859c93b268a540b308fdd04a30619a81cf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 15 Oct 2021 11:37:02 +0200
Subject: [PATCH 6/7] server: Factor sent or posted message receive helpers.

---
 server/queue.c | 72 +++++++++++++++++---------------------------------
 1 file changed, 24 insertions(+), 48 deletions(-)

diff --git a/server/queue.c b/server/queue.c
index cd311379fa1..15f3d9a45b6 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -816,16 +816,14 @@ static struct message_result *alloc_message_result( struct msg_queue *send_queue
 }
 
 /* receive a message, removing it from the sent queue */
-static void receive_message( struct msg_queue *queue, struct message *msg,
-                             struct get_message_reply *reply )
+static int receive_message( struct msg_queue *queue, struct message *msg,
+                            struct get_message_reply *reply )
 {
-    struct message_result *result = msg->result;
-
     reply->total = msg->data_size;
     if (msg->data_size > get_reply_max_size())
     {
         set_error( STATUS_BUFFER_OVERFLOW );
-        return;
+        return 0;
     }
     reply->type   = msg->type;
     reply->win    = msg->win;
@@ -837,17 +835,7 @@ static void receive_message( struct msg_queue *queue, struct message *msg,
     reply->time   = msg->time;
 
     if (msg->data) set_reply_data_ptr( msg->data, msg->data_size );
-
-    list_remove( &msg->entry );
-    /* put the result on the receiver result stack */
-    if (result)
-    {
-        result->msg = NULL;
-        result->recv_next  = queue->recv_result;
-        queue->recv_result = result;
-    }
-    free( msg );
-    if (list_empty( &queue->msg_list[SEND_MESSAGE] )) clear_queue_bits( queue, QS_SENDMESSAGE );
+    return 1;
 }
 
 /* set the result of the current received message */
@@ -881,17 +869,18 @@ static int match_window( user_handle_t win, user_handle_t msg_win )
     return is_child_window( win, msg_win );
 }
 
-/* retrieve a posted message */
-static int get_posted_message( struct msg_queue *queue, unsigned int ignore_msg, user_handle_t win,
+/* retrieve a sent or posted message */
+static int get_queued_message( struct msg_queue *queue, unsigned int ignore_msg, enum message_kind kind, user_handle_t win,
                                unsigned int first, unsigned int last, unsigned int flags,
                                struct get_message_reply *reply )
 {
+    struct message_result *result;
     struct message *msg;
 
     /* check against the filters */
-    LIST_FOR_EACH_ENTRY( msg, &queue->msg_list[POST_MESSAGE], struct message, entry )
+    LIST_FOR_EACH_ENTRY( msg, &queue->msg_list[kind], struct message, entry )
     {
-        if (!match_window( win, msg->win )) continue;
+        if (kind != SEND_MESSAGE && !match_window( win, msg->win )) continue;
         if (!check_msg_filter( msg->msg, first, last )) continue;
         goto found; /* found one */
     }
@@ -899,32 +888,24 @@ static int get_posted_message( struct msg_queue *queue, user_handle_t win,
 
     /* return it to the app */
 found:
-    reply->total = msg->data_size;
-    if (msg->data_size > get_reply_max_size())
-    {
-        set_error( STATUS_BUFFER_OVERFLOW );
+    if (!receive_message( queue, msg, reply ))
         return 1;
+
+    /* put the result on the receiver result stack */
+    if (kind == SEND_MESSAGE && (result = msg->result))
+    {
+        msg->result = NULL;
+        result->msg = NULL;
+        result->recv_next  = queue->recv_result;
+        queue->recv_result = result;
     }
-    reply->type   = msg->type;
-    reply->win    = msg->win;
-    reply->msg    = msg->msg;
-    reply->wparam = msg->wparam;
-    reply->lparam = msg->lparam;
-    reply->x      = msg->x;
-    reply->y      = msg->y;
-    reply->time   = msg->time;
 
     if (flags & PM_REMOVE)
     {
-        if (msg->data)
-        {
-            set_reply_data_ptr( msg->data, msg->data_size );
-            msg->data = NULL;
-            msg->data_size = 0;
-        }
-        remove_queue_message( queue, msg, POST_MESSAGE );
+        msg->data = NULL;
+        msg->data_size = 0;
+        remove_queue_message( queue, msg, kind );
     }
-    else if (msg->data) set_reply_data( msg->data, msg->data_size );
 
     return 1;
 }
@@ -2644,7 +2625,6 @@ DECL_HANDLER(post_quit_message)
 DECL_HANDLER(get_message)
 {
     struct timer *timer;
-    struct list *ptr;
     struct msg_queue *queue = get_current_queue();
     user_handle_t get_win = get_user_full_handle( req->get_win );
     unsigned int filter = req->flags >> 16;
@@ -2662,12 +2642,8 @@ DECL_HANDLER(get_message)
     if (!filter) filter = QS_ALLINPUT;
 
     /* first check for sent messages */
-    if ((ptr = list_head( &queue->msg_list[SEND_MESSAGE] )))
-    {
-        struct message *msg = LIST_ENTRY( ptr, struct message, entry );
-        receive_message( queue, msg, reply );
+    if (get_queued_message( queue, queue->ignore_post_msg, SEND_MESSAGE, 0, 0, 0xffffffff, PM_REMOVE, reply ))
         return;
-    }
 
     /* clear changed bits so we can wait on them if we don't find a message */
     if (filter & QS_POSTMESSAGE)
@@ -2680,12 +2656,12 @@ DECL_HANDLER(get_message)
 
     /* then check for posted messages */
     if ((filter & QS_POSTMESSAGE) &&
-        get_posted_message( queue, queue->ignore_post_msg, get_win, req->get_first, req->get_last, req->flags, reply ))
+        get_queued_message( queue, queue->ignore_post_msg, POST_MESSAGE, get_win, req->get_first, req->get_last, req->flags, reply ))
         return;
 
     if ((filter & QS_HOTKEY) && queue->hotkey_count &&
         req->get_first <= WM_HOTKEY && req->get_last >= WM_HOTKEY &&
-        get_posted_message( queue, queue->ignore_post_msg, get_win, WM_HOTKEY, WM_HOTKEY, req->flags, reply ))
+        get_queued_message( queue, queue->ignore_post_msg, POST_MESSAGE, get_win, WM_HOTKEY, WM_HOTKEY, req->flags, reply ))
         return;
 
     /* only check for quit messages if not posted messages pending */
@@ -2985,12 +2961,12 @@ DECL_HANDLER(get_message)
 
     /* if we previously skipped posted messages then check again */
     if (queue->ignore_post_msg && (filter & QS_POSTMESSAGE) &&
-        get_posted_message( queue, 0, get_win, req->get_first, req->get_last, req->flags, reply ))
+        get_queued_message( queue, 0, POST_MESSAGE, get_win, req->get_first, req->get_last, req->flags, reply ))
         return;
 
     if (queue->ignore_post_msg && (filter & QS_HOTKEY) && queue->hotkey_count &&
         req->get_first <= WM_HOTKEY && req->get_last >= WM_HOTKEY &&
-        get_posted_message( queue, 0, get_win, WM_HOTKEY, WM_HOTKEY, req->flags, reply ))
+        get_queued_message( queue, 0, POST_MESSAGE, get_win, WM_HOTKEY, WM_HOTKEY, req->flags, reply ))
         return;
 
     if (get_win == -1 && current->process->idle_event) set_event( current->process->idle_event );
-- 
2.34.1

