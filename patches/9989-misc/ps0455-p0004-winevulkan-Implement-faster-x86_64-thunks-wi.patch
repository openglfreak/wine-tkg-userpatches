From 5849b4d28e595b03d4a9c32314471f5ea6830063 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 5 Dec 2022 15:09:58 +0100
Subject: [PATCH 4/6] winevulkan: Implement faster x86_64 thunks with XMM
 registers.

---
 dlls/winevulkan/loader_thunks.c | 1090 +++++
 dlls/winevulkan/make_vulkan     |   63 +-
 dlls/winevulkan/vulkan_loader.h |   36 +
 dlls/winevulkan/vulkan_thunks.c | 7081 ++++++++++++++++++++++++++++++-
 4 files changed, 8249 insertions(+), 21 deletions(-)

diff --git a/dlls/winevulkan/loader_thunks.c b/dlls/winevulkan/loader_thunks.c
index 11111111111..11111111111 100644
--- a/dlls/winevulkan/loader_thunks.c
+++ b/dlls/winevulkan/loader_thunks.c
@@ -226,6 +226,10 @@ VkResult WINAPI vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR defe
     return params.result;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdBeginConditionalRenderingEXT == 21 );
+VK_FAST_THUNK( vkCmdBeginConditionalRenderingEXT, "21", 2 )
+#else
 void WINAPI vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT *pConditionalRenderingBegin)
 {
     struct vkCmdBeginConditionalRenderingEXT_params params;
@@ -233,7 +237,12 @@ void WINAPI vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, con
     params.pConditionalRenderingBegin = pConditionalRenderingBegin;
     UNIX_CALL(vkCmdBeginConditionalRenderingEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdBeginDebugUtilsLabelEXT == 22 );
+VK_FAST_THUNK( vkCmdBeginDebugUtilsLabelEXT, "22", 2 )
+#else
 void WINAPI vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
 {
     struct vkCmdBeginDebugUtilsLabelEXT_params params;
@@ -241,7 +250,12 @@ void WINAPI vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const Vk
     params.pLabelInfo = pLabelInfo;
     UNIX_CALL(vkCmdBeginDebugUtilsLabelEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdBeginQuery == 23 );
+VK_FAST_THUNK( vkCmdBeginQuery, "23", 4 )
+#else
 void WINAPI vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
 {
     struct vkCmdBeginQuery_params params;
@@ -251,7 +265,12 @@ void WINAPI vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool
     params.flags = flags;
     UNIX_CALL(vkCmdBeginQuery, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdBeginQueryIndexedEXT == 24 );
+VK_FAST_THUNK( vkCmdBeginQueryIndexedEXT, "24", 5 )
+#else
 void WINAPI vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)
 {
     struct vkCmdBeginQueryIndexedEXT_params params;
@@ -262,7 +281,12 @@ void WINAPI vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool
     params.index = index;
     UNIX_CALL(vkCmdBeginQueryIndexedEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBeginRenderPass == 25 );
+VK_FAST_THUNK( vkCmdBeginRenderPass, "25", 3 )
+#else
 void WINAPI vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents)
 {
     struct vkCmdBeginRenderPass_params params;
@@ -271,7 +295,12 @@ void WINAPI vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPa
     params.contents = contents;
     UNIX_CALL(vkCmdBeginRenderPass, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBeginRenderPass2 == 26 );
+VK_FAST_THUNK( vkCmdBeginRenderPass2, "26", 3 )
+#else
 void WINAPI vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
 {
     struct vkCmdBeginRenderPass2_params params;
@@ -280,7 +309,12 @@ void WINAPI vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderP
     params.pSubpassBeginInfo = pSubpassBeginInfo;
     UNIX_CALL(vkCmdBeginRenderPass2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBeginRenderPass2KHR == 27 );
+VK_FAST_THUNK( vkCmdBeginRenderPass2KHR, "27", 3 )
+#else
 void WINAPI vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
 {
     struct vkCmdBeginRenderPass2KHR_params params;
@@ -289,7 +323,12 @@ void WINAPI vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRend
     params.pSubpassBeginInfo = pSubpassBeginInfo;
     UNIX_CALL(vkCmdBeginRenderPass2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdBeginRendering == 28 );
+VK_FAST_THUNK( vkCmdBeginRendering, "28", 2 )
+#else
 void WINAPI vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
 {
     struct vkCmdBeginRendering_params params;
@@ -297,7 +336,12 @@ void WINAPI vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRendering
     params.pRenderingInfo = pRenderingInfo;
     UNIX_CALL(vkCmdBeginRendering, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdBeginRenderingKHR == 29 );
+VK_FAST_THUNK( vkCmdBeginRenderingKHR, "29", 2 )
+#else
 void WINAPI vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
 {
     struct vkCmdBeginRenderingKHR_params params;
@@ -305,7 +349,12 @@ void WINAPI vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRender
     params.pRenderingInfo = pRenderingInfo;
     UNIX_CALL(vkCmdBeginRenderingKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdBeginTransformFeedbackEXT == 30 );
+VK_FAST_THUNK( vkCmdBeginTransformFeedbackEXT, "30", 5 )
+#else
 void WINAPI vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
 {
     struct vkCmdBeginTransformFeedbackEXT_params params;
@@ -316,7 +365,12 @@ void WINAPI vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32
     params.pCounterBufferOffsets = pCounterBufferOffsets;
     UNIX_CALL(vkCmdBeginTransformFeedbackEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdBindDescriptorBufferEmbeddedSamplersEXT == 31 );
+VK_FAST_THUNK( vkCmdBindDescriptorBufferEmbeddedSamplersEXT, "31", 4 )
+#else
 void WINAPI vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)
 {
     struct vkCmdBindDescriptorBufferEmbeddedSamplersEXT_params params;
@@ -326,7 +380,12 @@ void WINAPI vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer command
     params.set = set;
     UNIX_CALL(vkCmdBindDescriptorBufferEmbeddedSamplersEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBindDescriptorBuffersEXT == 32 );
+VK_FAST_THUNK( vkCmdBindDescriptorBuffersEXT, "32", 3 )
+#else
 void WINAPI vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT *pBindingInfos)
 {
     struct vkCmdBindDescriptorBuffersEXT_params params;
@@ -335,7 +394,12 @@ void WINAPI vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_
     params.pBindingInfos = pBindingInfos;
     UNIX_CALL(vkCmdBindDescriptorBuffersEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+C_ASSERT( unix_vkCmdBindDescriptorSets == 33 );
+VK_FAST_THUNK( vkCmdBindDescriptorSets, "33", 8 )
+#else
 void WINAPI vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets)
 {
     struct vkCmdBindDescriptorSets_params params;
@@ -349,7 +413,12 @@ void WINAPI vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBin
     params.pDynamicOffsets = pDynamicOffsets;
     UNIX_CALL(vkCmdBindDescriptorSets, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdBindIndexBuffer == 34 );
+VK_FAST_THUNK( vkCmdBindIndexBuffer, "34", 4 )
+#else
 void WINAPI vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
 {
     struct vkCmdBindIndexBuffer_params params;
@@ -359,7 +428,12 @@ void WINAPI vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer,
     params.indexType = indexType;
     UNIX_CALL(vkCmdBindIndexBuffer, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBindInvocationMaskHUAWEI == 35 );
+VK_FAST_THUNK( vkCmdBindInvocationMaskHUAWEI, "35", 3 )
+#else
 void WINAPI vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
 {
     struct vkCmdBindInvocationMaskHUAWEI_params params;
@@ -368,7 +442,12 @@ void WINAPI vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImage
     params.imageLayout = imageLayout;
     UNIX_CALL(vkCmdBindInvocationMaskHUAWEI, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBindPipeline == 36 );
+VK_FAST_THUNK( vkCmdBindPipeline, "36", 3 )
+#else
 void WINAPI vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
 {
     struct vkCmdBindPipeline_params params;
@@ -377,7 +456,12 @@ void WINAPI vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint
     params.pipeline = pipeline;
     UNIX_CALL(vkCmdBindPipeline, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdBindPipelineShaderGroupNV == 37 );
+VK_FAST_THUNK( vkCmdBindPipelineShaderGroupNV, "37", 4 )
+#else
 void WINAPI vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)
 {
     struct vkCmdBindPipelineShaderGroupNV_params params;
@@ -387,7 +471,12 @@ void WINAPI vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipe
     params.groupIndex = groupIndex;
     UNIX_CALL(vkCmdBindPipelineShaderGroupNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBindShadingRateImageNV == 38 );
+VK_FAST_THUNK( vkCmdBindShadingRateImageNV, "38", 3 )
+#else
 void WINAPI vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
 {
     struct vkCmdBindShadingRateImageNV_params params;
@@ -396,7 +485,12 @@ void WINAPI vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageVi
     params.imageLayout = imageLayout;
     UNIX_CALL(vkCmdBindShadingRateImageNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdBindTransformFeedbackBuffersEXT == 39 );
+VK_FAST_THUNK( vkCmdBindTransformFeedbackBuffersEXT, "39", 6 )
+#else
 void WINAPI vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes)
 {
     struct vkCmdBindTransformFeedbackBuffersEXT_params params;
@@ -408,7 +502,12 @@ void WINAPI vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer,
     params.pSizes = pSizes;
     UNIX_CALL(vkCmdBindTransformFeedbackBuffersEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdBindVertexBuffers == 40 );
+VK_FAST_THUNK( vkCmdBindVertexBuffers, "40", 5 )
+#else
 void WINAPI vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets)
 {
     struct vkCmdBindVertexBuffers_params params;
@@ -419,7 +518,12 @@ void WINAPI vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t first
     params.pOffsets = pOffsets;
     UNIX_CALL(vkCmdBindVertexBuffers, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdBindVertexBuffers2 == 41 );
+VK_FAST_THUNK( vkCmdBindVertexBuffers2, "41", 7 )
+#else
 void WINAPI vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
 {
     struct vkCmdBindVertexBuffers2_params params;
@@ -432,7 +536,12 @@ void WINAPI vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firs
     params.pStrides = pStrides;
     UNIX_CALL(vkCmdBindVertexBuffers2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdBindVertexBuffers2EXT == 42 );
+VK_FAST_THUNK( vkCmdBindVertexBuffers2EXT, "42", 7 )
+#else
 void WINAPI vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
 {
     struct vkCmdBindVertexBuffers2EXT_params params;
@@ -445,7 +554,12 @@ void WINAPI vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t f
     params.pStrides = pStrides;
     UNIX_CALL(vkCmdBindVertexBuffers2EXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+C_ASSERT( unix_vkCmdBlitImage == 43 );
+VK_FAST_THUNK( vkCmdBlitImage, "43", 8 )
+#else
 void WINAPI vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit *pRegions, VkFilter filter)
 {
     struct vkCmdBlitImage_params params;
@@ -459,7 +573,12 @@ void WINAPI vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkIm
     params.filter = filter;
     UNIX_CALL(vkCmdBlitImage, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdBlitImage2 == 44 );
+VK_FAST_THUNK( vkCmdBlitImage2, "44", 2 )
+#else
 void WINAPI vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
 {
     struct vkCmdBlitImage2_params params;
@@ -467,7 +586,12 @@ void WINAPI vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo
     params.pBlitImageInfo = pBlitImageInfo;
     UNIX_CALL(vkCmdBlitImage2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdBlitImage2KHR == 45 );
+VK_FAST_THUNK( vkCmdBlitImage2KHR, "45", 2 )
+#else
 void WINAPI vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
 {
     struct vkCmdBlitImage2KHR_params params;
@@ -475,7 +599,12 @@ void WINAPI vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageI
     params.pBlitImageInfo = pBlitImageInfo;
     UNIX_CALL(vkCmdBlitImage2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 9
+C_ASSERT( unix_vkCmdBuildAccelerationStructureNV == 46 );
+VK_FAST_THUNK( vkCmdBuildAccelerationStructureNV, "46", 9 )
+#else
 void WINAPI vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV *pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)
 {
     struct vkCmdBuildAccelerationStructureNV_params params;
@@ -490,7 +619,12 @@ void WINAPI vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, con
     params.scratchOffset = scratchOffset;
     UNIX_CALL(vkCmdBuildAccelerationStructureNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdBuildAccelerationStructuresIndirectKHR == 47 );
+VK_FAST_THUNK( vkCmdBuildAccelerationStructuresIndirectKHR, "47", 6 )
+#else
 void WINAPI vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR *pInfos, const VkDeviceAddress *pIndirectDeviceAddresses, const uint32_t *pIndirectStrides, const uint32_t * const*ppMaxPrimitiveCounts)
 {
     struct vkCmdBuildAccelerationStructuresIndirectKHR_params params;
@@ -502,7 +636,12 @@ void WINAPI vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandB
     params.ppMaxPrimitiveCounts = ppMaxPrimitiveCounts;
     UNIX_CALL(vkCmdBuildAccelerationStructuresIndirectKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdBuildAccelerationStructuresKHR == 48 );
+VK_FAST_THUNK( vkCmdBuildAccelerationStructuresKHR, "48", 4 )
+#else
 void WINAPI vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR *pInfos, const VkAccelerationStructureBuildRangeInfoKHR * const*ppBuildRangeInfos)
 {
     struct vkCmdBuildAccelerationStructuresKHR_params params;
@@ -512,7 +651,12 @@ void WINAPI vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, u
     params.ppBuildRangeInfos = ppBuildRangeInfos;
     UNIX_CALL(vkCmdBuildAccelerationStructuresKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdBuildMicromapsEXT == 49 );
+VK_FAST_THUNK( vkCmdBuildMicromapsEXT, "49", 3 )
+#else
 void WINAPI vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT *pInfos)
 {
     struct vkCmdBuildMicromapsEXT_params params;
@@ -521,7 +665,12 @@ void WINAPI vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoC
     params.pInfos = pInfos;
     UNIX_CALL(vkCmdBuildMicromapsEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdClearAttachments == 50 );
+VK_FAST_THUNK( vkCmdClearAttachments, "50", 5 )
+#else
 void WINAPI vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment *pAttachments, uint32_t rectCount, const VkClearRect *pRects)
 {
     struct vkCmdClearAttachments_params params;
@@ -532,7 +681,12 @@ void WINAPI vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attach
     params.pRects = pRects;
     UNIX_CALL(vkCmdClearAttachments, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdClearColorImage == 51 );
+VK_FAST_THUNK( vkCmdClearColorImage, "51", 6 )
+#else
 void WINAPI vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue *pColor, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
 {
     struct vkCmdClearColorImage_params params;
@@ -544,7 +698,12 @@ void WINAPI vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, V
     params.pRanges = pRanges;
     UNIX_CALL(vkCmdClearColorImage, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdClearDepthStencilImage == 52 );
+VK_FAST_THUNK( vkCmdClearDepthStencilImage, "52", 6 )
+#else
 void WINAPI vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
 {
     struct vkCmdClearDepthStencilImage_params params;
@@ -556,7 +715,12 @@ void WINAPI vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage i
     params.pRanges = pRanges;
     UNIX_CALL(vkCmdClearDepthStencilImage, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyAccelerationStructureKHR == 53 );
+VK_FAST_THUNK( vkCmdCopyAccelerationStructureKHR, "53", 2 )
+#else
 void WINAPI vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR *pInfo)
 {
     struct vkCmdCopyAccelerationStructureKHR_params params;
@@ -564,7 +728,12 @@ void WINAPI vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, con
     params.pInfo = pInfo;
     UNIX_CALL(vkCmdCopyAccelerationStructureKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdCopyAccelerationStructureNV == 54 );
+VK_FAST_THUNK( vkCmdCopyAccelerationStructureNV, "54", 4 )
+#else
 void WINAPI vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)
 {
     struct vkCmdCopyAccelerationStructureNV_params params;
@@ -574,7 +743,12 @@ void WINAPI vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAc
     params.mode = mode;
     UNIX_CALL(vkCmdCopyAccelerationStructureNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyAccelerationStructureToMemoryKHR == 55 );
+VK_FAST_THUNK( vkCmdCopyAccelerationStructureToMemoryKHR, "55", 2 )
+#else
 void WINAPI vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo)
 {
     struct vkCmdCopyAccelerationStructureToMemoryKHR_params params;
@@ -582,7 +756,12 @@ void WINAPI vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuf
     params.pInfo = pInfo;
     UNIX_CALL(vkCmdCopyAccelerationStructureToMemoryKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdCopyBuffer == 56 );
+VK_FAST_THUNK( vkCmdCopyBuffer, "56", 5 )
+#else
 void WINAPI vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions)
 {
     struct vkCmdCopyBuffer_params params;
@@ -593,7 +772,12 @@ void WINAPI vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, V
     params.pRegions = pRegions;
     UNIX_CALL(vkCmdCopyBuffer, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyBuffer2 == 57 );
+VK_FAST_THUNK( vkCmdCopyBuffer2, "57", 2 )
+#else
 void WINAPI vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
 {
     struct vkCmdCopyBuffer2_params params;
@@ -601,7 +785,12 @@ void WINAPI vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferIn
     params.pCopyBufferInfo = pCopyBufferInfo;
     UNIX_CALL(vkCmdCopyBuffer2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyBuffer2KHR == 58 );
+VK_FAST_THUNK( vkCmdCopyBuffer2KHR, "58", 2 )
+#else
 void WINAPI vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
 {
     struct vkCmdCopyBuffer2KHR_params params;
@@ -609,7 +798,12 @@ void WINAPI vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBuffe
     params.pCopyBufferInfo = pCopyBufferInfo;
     UNIX_CALL(vkCmdCopyBuffer2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdCopyBufferToImage == 59 );
+VK_FAST_THUNK( vkCmdCopyBufferToImage, "59", 6 )
+#else
 void WINAPI vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy *pRegions)
 {
     struct vkCmdCopyBufferToImage_params params;
@@ -621,7 +815,12 @@ void WINAPI vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBu
     params.pRegions = pRegions;
     UNIX_CALL(vkCmdCopyBufferToImage, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyBufferToImage2 == 60 );
+VK_FAST_THUNK( vkCmdCopyBufferToImage2, "60", 2 )
+#else
 void WINAPI vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
 {
     struct vkCmdCopyBufferToImage2_params params;
@@ -629,7 +828,12 @@ void WINAPI vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyB
     params.pCopyBufferToImageInfo = pCopyBufferToImageInfo;
     UNIX_CALL(vkCmdCopyBufferToImage2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyBufferToImage2KHR == 61 );
+VK_FAST_THUNK( vkCmdCopyBufferToImage2KHR, "61", 2 )
+#else
 void WINAPI vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
 {
     struct vkCmdCopyBufferToImage2KHR_params params;
@@ -637,7 +841,12 @@ void WINAPI vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCo
     params.pCopyBufferToImageInfo = pCopyBufferToImageInfo;
     UNIX_CALL(vkCmdCopyBufferToImage2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdCopyImage == 62 );
+VK_FAST_THUNK( vkCmdCopyImage, "62", 7 )
+#else
 void WINAPI vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy *pRegions)
 {
     struct vkCmdCopyImage_params params;
@@ -650,7 +859,12 @@ void WINAPI vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkIm
     params.pRegions = pRegions;
     UNIX_CALL(vkCmdCopyImage, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyImage2 == 63 );
+VK_FAST_THUNK( vkCmdCopyImage2, "63", 2 )
+#else
 void WINAPI vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
 {
     struct vkCmdCopyImage2_params params;
@@ -658,7 +872,12 @@ void WINAPI vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo
     params.pCopyImageInfo = pCopyImageInfo;
     UNIX_CALL(vkCmdCopyImage2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyImage2KHR == 64 );
+VK_FAST_THUNK( vkCmdCopyImage2KHR, "64", 2 )
+#else
 void WINAPI vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
 {
     struct vkCmdCopyImage2KHR_params params;
@@ -666,7 +885,12 @@ void WINAPI vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageI
     params.pCopyImageInfo = pCopyImageInfo;
     UNIX_CALL(vkCmdCopyImage2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdCopyImageToBuffer == 65 );
+VK_FAST_THUNK( vkCmdCopyImageToBuffer, "65", 6 )
+#else
 void WINAPI vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy *pRegions)
 {
     struct vkCmdCopyImageToBuffer_params params;
@@ -678,7 +902,12 @@ void WINAPI vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcIma
     params.pRegions = pRegions;
     UNIX_CALL(vkCmdCopyImageToBuffer, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyImageToBuffer2 == 66 );
+VK_FAST_THUNK( vkCmdCopyImageToBuffer2, "66", 2 )
+#else
 void WINAPI vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
 {
     struct vkCmdCopyImageToBuffer2_params params;
@@ -686,7 +915,12 @@ void WINAPI vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyI
     params.pCopyImageToBufferInfo = pCopyImageToBufferInfo;
     UNIX_CALL(vkCmdCopyImageToBuffer2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyImageToBuffer2KHR == 67 );
+VK_FAST_THUNK( vkCmdCopyImageToBuffer2KHR, "67", 2 )
+#else
 void WINAPI vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
 {
     struct vkCmdCopyImageToBuffer2KHR_params params;
@@ -694,7 +928,12 @@ void WINAPI vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCo
     params.pCopyImageToBufferInfo = pCopyImageToBufferInfo;
     UNIX_CALL(vkCmdCopyImageToBuffer2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdCopyMemoryIndirectNV == 68 );
+VK_FAST_THUNK( vkCmdCopyMemoryIndirectNV, "68", 4 )
+#else
 void WINAPI vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride)
 {
     struct vkCmdCopyMemoryIndirectNV_params params;
@@ -704,7 +943,12 @@ void WINAPI vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAdd
     params.stride = stride;
     UNIX_CALL(vkCmdCopyMemoryIndirectNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyMemoryToAccelerationStructureKHR == 69 );
+VK_FAST_THUNK( vkCmdCopyMemoryToAccelerationStructureKHR, "69", 2 )
+#else
 void WINAPI vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo)
 {
     struct vkCmdCopyMemoryToAccelerationStructureKHR_params params;
@@ -712,7 +956,12 @@ void WINAPI vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuf
     params.pInfo = pInfo;
     UNIX_CALL(vkCmdCopyMemoryToAccelerationStructureKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdCopyMemoryToImageIndirectNV == 70 );
+VK_FAST_THUNK( vkCmdCopyMemoryToImageIndirectNV, "70", 7 )
+#else
 void WINAPI vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers *pImageSubresources)
 {
     struct vkCmdCopyMemoryToImageIndirectNV_params params;
@@ -725,7 +974,12 @@ void WINAPI vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDe
     params.pImageSubresources = pImageSubresources;
     UNIX_CALL(vkCmdCopyMemoryToImageIndirectNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyMemoryToMicromapEXT == 71 );
+VK_FAST_THUNK( vkCmdCopyMemoryToMicromapEXT, "71", 2 )
+#else
 void WINAPI vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT *pInfo)
 {
     struct vkCmdCopyMemoryToMicromapEXT_params params;
@@ -733,7 +987,12 @@ void WINAPI vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const Vk
     params.pInfo = pInfo;
     UNIX_CALL(vkCmdCopyMemoryToMicromapEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyMicromapEXT == 72 );
+VK_FAST_THUNK( vkCmdCopyMicromapEXT, "72", 2 )
+#else
 void WINAPI vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT *pInfo)
 {
     struct vkCmdCopyMicromapEXT_params params;
@@ -741,7 +1000,12 @@ void WINAPI vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicr
     params.pInfo = pInfo;
     UNIX_CALL(vkCmdCopyMicromapEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCopyMicromapToMemoryEXT == 73 );
+VK_FAST_THUNK( vkCmdCopyMicromapToMemoryEXT, "73", 2 )
+#else
 void WINAPI vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT *pInfo)
 {
     struct vkCmdCopyMicromapToMemoryEXT_params params;
@@ -749,7 +1013,12 @@ void WINAPI vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const Vk
     params.pInfo = pInfo;
     UNIX_CALL(vkCmdCopyMicromapToMemoryEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+C_ASSERT( unix_vkCmdCopyQueryPoolResults == 74 );
+VK_FAST_THUNK( vkCmdCopyQueryPoolResults, "74", 8 )
+#else
 void WINAPI vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
 {
     struct vkCmdCopyQueryPoolResults_params params;
@@ -763,7 +1032,12 @@ void WINAPI vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool
     params.flags = flags;
     UNIX_CALL(vkCmdCopyQueryPoolResults, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdCuLaunchKernelNVX == 75 );
+VK_FAST_THUNK( vkCmdCuLaunchKernelNVX, "75", 2 )
+#else
 void WINAPI vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX *pLaunchInfo)
 {
     struct vkCmdCuLaunchKernelNVX_params params;
@@ -771,7 +1045,12 @@ void WINAPI vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaun
     params.pLaunchInfo = pLaunchInfo;
     UNIX_CALL(vkCmdCuLaunchKernelNVX, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdDebugMarkerBeginEXT == 76 );
+VK_FAST_THUNK( vkCmdDebugMarkerBeginEXT, "76", 2 )
+#else
 void WINAPI vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
 {
     struct vkCmdDebugMarkerBeginEXT_params params;
@@ -779,14 +1058,24 @@ void WINAPI vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebu
     params.pMarkerInfo = pMarkerInfo;
     UNIX_CALL(vkCmdDebugMarkerBeginEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+C_ASSERT( unix_vkCmdDebugMarkerEndEXT == 77 );
+VK_FAST_THUNK( vkCmdDebugMarkerEndEXT, "77", 1 )
+#else
 void WINAPI vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
 {
     struct vkCmdDebugMarkerEndEXT_params params;
     params.commandBuffer = commandBuffer;
     UNIX_CALL(vkCmdDebugMarkerEndEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdDebugMarkerInsertEXT == 78 );
+VK_FAST_THUNK( vkCmdDebugMarkerInsertEXT, "78", 2 )
+#else
 void WINAPI vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
 {
     struct vkCmdDebugMarkerInsertEXT_params params;
@@ -794,7 +1083,12 @@ void WINAPI vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDeb
     params.pMarkerInfo = pMarkerInfo;
     UNIX_CALL(vkCmdDebugMarkerInsertEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdDecompressMemoryIndirectCountNV == 79 );
+VK_FAST_THUNK( vkCmdDecompressMemoryIndirectCountNV, "79", 4 )
+#else
 void WINAPI vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride)
 {
     struct vkCmdDecompressMemoryIndirectCountNV_params params;
@@ -804,7 +1098,12 @@ void WINAPI vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer,
     params.stride = stride;
     UNIX_CALL(vkCmdDecompressMemoryIndirectCountNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdDecompressMemoryNV == 80 );
+VK_FAST_THUNK( vkCmdDecompressMemoryNV, "80", 3 )
+#else
 void WINAPI vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV *pDecompressMemoryRegions)
 {
     struct vkCmdDecompressMemoryNV_params params;
@@ -813,7 +1112,12 @@ void WINAPI vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t deco
     params.pDecompressMemoryRegions = pDecompressMemoryRegions;
     UNIX_CALL(vkCmdDecompressMemoryNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdDispatch == 81 );
+VK_FAST_THUNK( vkCmdDispatch, "81", 4 )
+#else
 void WINAPI vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
 {
     struct vkCmdDispatch_params params;
@@ -823,7 +1127,12 @@ void WINAPI vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, u
     params.groupCountZ = groupCountZ;
     UNIX_CALL(vkCmdDispatch, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDispatchBase == 82 );
+VK_FAST_THUNK( vkCmdDispatchBase, "82", 7 )
+#else
 void WINAPI vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
 {
     struct vkCmdDispatchBase_params params;
@@ -836,7 +1145,12 @@ void WINAPI vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX
     params.groupCountZ = groupCountZ;
     UNIX_CALL(vkCmdDispatchBase, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDispatchBaseKHR == 83 );
+VK_FAST_THUNK( vkCmdDispatchBaseKHR, "83", 7 )
+#else
 void WINAPI vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
 {
     struct vkCmdDispatchBaseKHR_params params;
@@ -849,7 +1163,12 @@ void WINAPI vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGro
     params.groupCountZ = groupCountZ;
     UNIX_CALL(vkCmdDispatchBaseKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdDispatchIndirect == 84 );
+VK_FAST_THUNK( vkCmdDispatchIndirect, "84", 3 )
+#else
 void WINAPI vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
 {
     struct vkCmdDispatchIndirect_params params;
@@ -858,7 +1177,12 @@ void WINAPI vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer
     params.offset = offset;
     UNIX_CALL(vkCmdDispatchIndirect, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdDraw == 85 );
+VK_FAST_THUNK( vkCmdDraw, "85", 5 )
+#else
 void WINAPI vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
 {
     struct vkCmdDraw_params params;
@@ -869,7 +1193,12 @@ void WINAPI vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint3
     params.firstInstance = firstInstance;
     UNIX_CALL(vkCmdDraw, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdDrawIndexed == 86 );
+VK_FAST_THUNK( vkCmdDrawIndexed, "86", 6 )
+#else
 void WINAPI vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
 {
     struct vkCmdDrawIndexed_params params;
@@ -881,7 +1210,12 @@ void WINAPI vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount,
     params.firstInstance = firstInstance;
     UNIX_CALL(vkCmdDrawIndexed, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdDrawIndexedIndirect == 87 );
+VK_FAST_THUNK( vkCmdDrawIndexedIndirect, "87", 5 )
+#else
 void WINAPI vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
 {
     struct vkCmdDrawIndexedIndirect_params params;
@@ -892,7 +1226,12 @@ void WINAPI vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buf
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndexedIndirect, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawIndexedIndirectCount == 88 );
+VK_FAST_THUNK( vkCmdDrawIndexedIndirectCount, "88", 7 )
+#else
 void WINAPI vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawIndexedIndirectCount_params params;
@@ -905,7 +1244,12 @@ void WINAPI vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffe
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndexedIndirectCount, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawIndexedIndirectCountAMD == 89 );
+VK_FAST_THUNK( vkCmdDrawIndexedIndirectCountAMD, "89", 7 )
+#else
 void WINAPI vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawIndexedIndirectCountAMD_params params;
@@ -918,7 +1262,12 @@ void WINAPI vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBu
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndexedIndirectCountAMD, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawIndexedIndirectCountKHR == 90 );
+VK_FAST_THUNK( vkCmdDrawIndexedIndirectCountKHR, "90", 7 )
+#else
 void WINAPI vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawIndexedIndirectCountKHR_params params;
@@ -931,7 +1280,12 @@ void WINAPI vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBu
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndexedIndirectCountKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdDrawIndirect == 91 );
+VK_FAST_THUNK( vkCmdDrawIndirect, "91", 5 )
+#else
 void WINAPI vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
 {
     struct vkCmdDrawIndirect_params params;
@@ -942,7 +1296,12 @@ void WINAPI vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, Vk
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndirect, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawIndirectByteCountEXT == 92 );
+VK_FAST_THUNK( vkCmdDrawIndirectByteCountEXT, "92", 7 )
+#else
 void WINAPI vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)
 {
     struct vkCmdDrawIndirectByteCountEXT_params params;
@@ -955,7 +1314,12 @@ void WINAPI vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_
     params.vertexStride = vertexStride;
     UNIX_CALL(vkCmdDrawIndirectByteCountEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawIndirectCount == 93 );
+VK_FAST_THUNK( vkCmdDrawIndirectCount, "93", 7 )
+#else
 void WINAPI vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawIndirectCount_params params;
@@ -968,7 +1332,12 @@ void WINAPI vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffe
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndirectCount, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawIndirectCountAMD == 94 );
+VK_FAST_THUNK( vkCmdDrawIndirectCountAMD, "94", 7 )
+#else
 void WINAPI vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawIndirectCountAMD_params params;
@@ -981,7 +1350,12 @@ void WINAPI vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer bu
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndirectCountAMD, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawIndirectCountKHR == 95 );
+VK_FAST_THUNK( vkCmdDrawIndirectCountKHR, "95", 7 )
+#else
 void WINAPI vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawIndirectCountKHR_params params;
@@ -994,7 +1368,12 @@ void WINAPI vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer bu
     params.stride = stride;
     UNIX_CALL(vkCmdDrawIndirectCountKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdDrawMeshTasksEXT == 96 );
+VK_FAST_THUNK( vkCmdDrawMeshTasksEXT, "96", 4 )
+#else
 void WINAPI vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
 {
     struct vkCmdDrawMeshTasksEXT_params params;
@@ -1004,7 +1383,12 @@ void WINAPI vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupC
     params.groupCountZ = groupCountZ;
     UNIX_CALL(vkCmdDrawMeshTasksEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawMeshTasksIndirectCountEXT == 97 );
+VK_FAST_THUNK( vkCmdDrawMeshTasksIndirectCountEXT, "97", 7 )
+#else
 void WINAPI vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawMeshTasksIndirectCountEXT_params params;
@@ -1017,7 +1401,12 @@ void WINAPI vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, Vk
     params.stride = stride;
     UNIX_CALL(vkCmdDrawMeshTasksIndirectCountEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawMeshTasksIndirectCountNV == 98 );
+VK_FAST_THUNK( vkCmdDrawMeshTasksIndirectCountNV, "98", 7 )
+#else
 void WINAPI vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
 {
     struct vkCmdDrawMeshTasksIndirectCountNV_params params;
@@ -1030,7 +1419,12 @@ void WINAPI vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkB
     params.stride = stride;
     UNIX_CALL(vkCmdDrawMeshTasksIndirectCountNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdDrawMeshTasksIndirectEXT == 99 );
+VK_FAST_THUNK( vkCmdDrawMeshTasksIndirectEXT, "99", 5 )
+#else
 void WINAPI vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
 {
     struct vkCmdDrawMeshTasksIndirectEXT_params params;
@@ -1041,7 +1435,12 @@ void WINAPI vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffe
     params.stride = stride;
     UNIX_CALL(vkCmdDrawMeshTasksIndirectEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdDrawMeshTasksIndirectNV == 100 );
+VK_FAST_THUNK( vkCmdDrawMeshTasksIndirectNV, "100", 5 )
+#else
 void WINAPI vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
 {
     struct vkCmdDrawMeshTasksIndirectNV_params params;
@@ -1052,7 +1451,12 @@ void WINAPI vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer
     params.stride = stride;
     UNIX_CALL(vkCmdDrawMeshTasksIndirectNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdDrawMeshTasksNV == 101 );
+VK_FAST_THUNK( vkCmdDrawMeshTasksNV, "101", 3 )
+#else
 void WINAPI vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)
 {
     struct vkCmdDrawMeshTasksNV_params params;
@@ -1061,7 +1465,12 @@ void WINAPI vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCou
     params.firstTask = firstTask;
     UNIX_CALL(vkCmdDrawMeshTasksNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdDrawMultiEXT == 102 );
+VK_FAST_THUNK( vkCmdDrawMultiEXT, "102", 6 )
+#else
 void WINAPI vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT *pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride)
 {
     struct vkCmdDrawMultiEXT_params params;
@@ -1073,7 +1482,12 @@ void WINAPI vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount,
     params.stride = stride;
     UNIX_CALL(vkCmdDrawMultiEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdDrawMultiIndexedEXT == 103 );
+VK_FAST_THUNK( vkCmdDrawMultiIndexedEXT, "103", 7 )
+#else
 void WINAPI vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT *pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t *pVertexOffset)
 {
     struct vkCmdDrawMultiIndexedEXT_params params;
@@ -1086,21 +1500,36 @@ void WINAPI vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t dra
     params.pVertexOffset = pVertexOffset;
     UNIX_CALL(vkCmdDrawMultiIndexedEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+C_ASSERT( unix_vkCmdEndConditionalRenderingEXT == 104 );
+VK_FAST_THUNK( vkCmdEndConditionalRenderingEXT, "104", 1 )
+#else
 void WINAPI vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
 {
     struct vkCmdEndConditionalRenderingEXT_params params;
     params.commandBuffer = commandBuffer;
     UNIX_CALL(vkCmdEndConditionalRenderingEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+C_ASSERT( unix_vkCmdEndDebugUtilsLabelEXT == 105 );
+VK_FAST_THUNK( vkCmdEndDebugUtilsLabelEXT, "105", 1 )
+#else
 void WINAPI vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
 {
     struct vkCmdEndDebugUtilsLabelEXT_params params;
     params.commandBuffer = commandBuffer;
     UNIX_CALL(vkCmdEndDebugUtilsLabelEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdEndQuery == 106 );
+VK_FAST_THUNK( vkCmdEndQuery, "106", 3 )
+#else
 void WINAPI vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
 {
     struct vkCmdEndQuery_params params;
@@ -1109,7 +1538,12 @@ void WINAPI vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool,
     params.query = query;
     UNIX_CALL(vkCmdEndQuery, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdEndQueryIndexedEXT == 107 );
+VK_FAST_THUNK( vkCmdEndQueryIndexedEXT, "107", 4 )
+#else
 void WINAPI vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)
 {
     struct vkCmdEndQueryIndexedEXT_params params;
@@ -1119,14 +1553,24 @@ void WINAPI vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool q
     params.index = index;
     UNIX_CALL(vkCmdEndQueryIndexedEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+C_ASSERT( unix_vkCmdEndRenderPass == 108 );
+VK_FAST_THUNK( vkCmdEndRenderPass, "108", 1 )
+#else
 void WINAPI vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
 {
     struct vkCmdEndRenderPass_params params;
     params.commandBuffer = commandBuffer;
     UNIX_CALL(vkCmdEndRenderPass, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdEndRenderPass2 == 109 );
+VK_FAST_THUNK( vkCmdEndRenderPass2, "109", 2 )
+#else
 void WINAPI vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
 {
     struct vkCmdEndRenderPass2_params params;
@@ -1134,7 +1578,12 @@ void WINAPI vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEn
     params.pSubpassEndInfo = pSubpassEndInfo;
     UNIX_CALL(vkCmdEndRenderPass2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdEndRenderPass2KHR == 110 );
+VK_FAST_THUNK( vkCmdEndRenderPass2KHR, "110", 2 )
+#else
 void WINAPI vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
 {
     struct vkCmdEndRenderPass2KHR_params params;
@@ -1142,21 +1591,36 @@ void WINAPI vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpas
     params.pSubpassEndInfo = pSubpassEndInfo;
     UNIX_CALL(vkCmdEndRenderPass2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+C_ASSERT( unix_vkCmdEndRendering == 111 );
+VK_FAST_THUNK( vkCmdEndRendering, "111", 1 )
+#else
 void WINAPI vkCmdEndRendering(VkCommandBuffer commandBuffer)
 {
     struct vkCmdEndRendering_params params;
     params.commandBuffer = commandBuffer;
     UNIX_CALL(vkCmdEndRendering, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+C_ASSERT( unix_vkCmdEndRenderingKHR == 112 );
+VK_FAST_THUNK( vkCmdEndRenderingKHR, "112", 1 )
+#else
 void WINAPI vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)
 {
     struct vkCmdEndRenderingKHR_params params;
     params.commandBuffer = commandBuffer;
     UNIX_CALL(vkCmdEndRenderingKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdEndTransformFeedbackEXT == 113 );
+VK_FAST_THUNK( vkCmdEndTransformFeedbackEXT, "113", 5 )
+#else
 void WINAPI vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
 {
     struct vkCmdEndTransformFeedbackEXT_params params;
@@ -1167,7 +1631,12 @@ void WINAPI vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t
     params.pCounterBufferOffsets = pCounterBufferOffsets;
     UNIX_CALL(vkCmdEndTransformFeedbackEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdExecuteCommands == 114 );
+VK_FAST_THUNK( vkCmdExecuteCommands, "114", 3 )
+#else
 void WINAPI vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
 {
     struct vkCmdExecuteCommands_params params;
@@ -1176,7 +1645,12 @@ void WINAPI vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t command
     params.pCommandBuffers = pCommandBuffers;
     UNIX_CALL(vkCmdExecuteCommands, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdExecuteGeneratedCommandsNV == 115 );
+VK_FAST_THUNK( vkCmdExecuteGeneratedCommandsNV, "115", 3 )
+#else
 void WINAPI vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
 {
     struct vkCmdExecuteGeneratedCommandsNV_params params;
@@ -1185,7 +1659,12 @@ void WINAPI vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBoo
     params.pGeneratedCommandsInfo = pGeneratedCommandsInfo;
     UNIX_CALL(vkCmdExecuteGeneratedCommandsNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdFillBuffer == 116 );
+VK_FAST_THUNK( vkCmdFillBuffer, "116", 5 )
+#else
 void WINAPI vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
 {
     struct vkCmdFillBuffer_params params;
@@ -1196,7 +1675,12 @@ void WINAPI vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, V
     params.data = data;
     UNIX_CALL(vkCmdFillBuffer, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdInsertDebugUtilsLabelEXT == 117 );
+VK_FAST_THUNK( vkCmdInsertDebugUtilsLabelEXT, "117", 2 )
+#else
 void WINAPI vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
 {
     struct vkCmdInsertDebugUtilsLabelEXT_params params;
@@ -1204,7 +1688,12 @@ void WINAPI vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const V
     params.pLabelInfo = pLabelInfo;
     UNIX_CALL(vkCmdInsertDebugUtilsLabelEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdNextSubpass == 118 );
+VK_FAST_THUNK( vkCmdNextSubpass, "118", 2 )
+#else
 void WINAPI vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
 {
     struct vkCmdNextSubpass_params params;
@@ -1212,7 +1701,12 @@ void WINAPI vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents co
     params.contents = contents;
     UNIX_CALL(vkCmdNextSubpass, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdNextSubpass2 == 119 );
+VK_FAST_THUNK( vkCmdNextSubpass2, "119", 3 )
+#else
 void WINAPI vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
 {
     struct vkCmdNextSubpass2_params params;
@@ -1221,7 +1715,12 @@ void WINAPI vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBegi
     params.pSubpassEndInfo = pSubpassEndInfo;
     UNIX_CALL(vkCmdNextSubpass2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdNextSubpass2KHR == 120 );
+VK_FAST_THUNK( vkCmdNextSubpass2KHR, "120", 3 )
+#else
 void WINAPI vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
 {
     struct vkCmdNextSubpass2KHR_params params;
@@ -1230,7 +1729,12 @@ void WINAPI vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassB
     params.pSubpassEndInfo = pSubpassEndInfo;
     UNIX_CALL(vkCmdNextSubpass2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdOpticalFlowExecuteNV == 121 );
+VK_FAST_THUNK( vkCmdOpticalFlowExecuteNV, "121", 3 )
+#else
 void WINAPI vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV *pExecuteInfo)
 {
     struct vkCmdOpticalFlowExecuteNV_params params;
@@ -1239,7 +1743,12 @@ void WINAPI vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFl
     params.pExecuteInfo = pExecuteInfo;
     UNIX_CALL(vkCmdOpticalFlowExecuteNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 10
+C_ASSERT( unix_vkCmdPipelineBarrier == 122 );
+VK_FAST_THUNK( vkCmdPipelineBarrier, "122", 10 )
+#else
 void WINAPI vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
 {
     struct vkCmdPipelineBarrier_params params;
@@ -1255,7 +1764,12 @@ void WINAPI vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageF
     params.pImageMemoryBarriers = pImageMemoryBarriers;
     UNIX_CALL(vkCmdPipelineBarrier, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdPipelineBarrier2 == 123 );
+VK_FAST_THUNK( vkCmdPipelineBarrier2, "123", 2 )
+#else
 void WINAPI vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
 {
     struct vkCmdPipelineBarrier2_params params;
@@ -1263,7 +1777,12 @@ void WINAPI vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDepende
     params.pDependencyInfo = pDependencyInfo;
     UNIX_CALL(vkCmdPipelineBarrier2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdPipelineBarrier2KHR == 124 );
+VK_FAST_THUNK( vkCmdPipelineBarrier2KHR, "124", 2 )
+#else
 void WINAPI vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
 {
     struct vkCmdPipelineBarrier2KHR_params params;
@@ -1271,7 +1790,12 @@ void WINAPI vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDepe
     params.pDependencyInfo = pDependencyInfo;
     UNIX_CALL(vkCmdPipelineBarrier2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdPreprocessGeneratedCommandsNV == 125 );
+VK_FAST_THUNK( vkCmdPreprocessGeneratedCommandsNV, "125", 2 )
+#else
 void WINAPI vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
 {
     struct vkCmdPreprocessGeneratedCommandsNV_params params;
@@ -1279,7 +1803,12 @@ void WINAPI vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, co
     params.pGeneratedCommandsInfo = pGeneratedCommandsInfo;
     UNIX_CALL(vkCmdPreprocessGeneratedCommandsNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdPushConstants == 126 );
+VK_FAST_THUNK( vkCmdPushConstants, "126", 6 )
+#else
 void WINAPI vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void *pValues)
 {
     struct vkCmdPushConstants_params params;
@@ -1291,7 +1820,12 @@ void WINAPI vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout l
     params.pValues = pValues;
     UNIX_CALL(vkCmdPushConstants, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdPushDescriptorSetKHR == 127 );
+VK_FAST_THUNK( vkCmdPushDescriptorSetKHR, "127", 6 )
+#else
 void WINAPI vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites)
 {
     struct vkCmdPushDescriptorSetKHR_params params;
@@ -1303,7 +1837,12 @@ void WINAPI vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineB
     params.pDescriptorWrites = pDescriptorWrites;
     UNIX_CALL(vkCmdPushDescriptorSetKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdPushDescriptorSetWithTemplateKHR == 128 );
+VK_FAST_THUNK( vkCmdPushDescriptorSetWithTemplateKHR, "128", 5 )
+#else
 void WINAPI vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void *pData)
 {
     struct vkCmdPushDescriptorSetWithTemplateKHR_params params;
@@ -1314,7 +1853,12 @@ void WINAPI vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer,
     params.pData = pData;
     UNIX_CALL(vkCmdPushDescriptorSetWithTemplateKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdResetEvent == 129 );
+VK_FAST_THUNK( vkCmdResetEvent, "129", 3 )
+#else
 void WINAPI vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
 {
     struct vkCmdResetEvent_params params;
@@ -1323,7 +1867,12 @@ void WINAPI vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipe
     params.stageMask = stageMask;
     UNIX_CALL(vkCmdResetEvent, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdResetEvent2 == 130 );
+VK_FAST_THUNK( vkCmdResetEvent2, "130", 3 )
+#else
 void WINAPI vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
 {
     struct vkCmdResetEvent2_params params;
@@ -1332,7 +1881,12 @@ void WINAPI vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPip
     params.stageMask = stageMask;
     UNIX_CALL(vkCmdResetEvent2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdResetEvent2KHR == 131 );
+VK_FAST_THUNK( vkCmdResetEvent2KHR, "131", 3 )
+#else
 void WINAPI vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
 {
     struct vkCmdResetEvent2KHR_params params;
@@ -1341,7 +1895,12 @@ void WINAPI vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, Vk
     params.stageMask = stageMask;
     UNIX_CALL(vkCmdResetEvent2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdResetQueryPool == 132 );
+VK_FAST_THUNK( vkCmdResetQueryPool, "132", 4 )
+#else
 void WINAPI vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
 {
     struct vkCmdResetQueryPool_params params;
@@ -1351,7 +1910,12 @@ void WINAPI vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool query
     params.queryCount = queryCount;
     UNIX_CALL(vkCmdResetQueryPool, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdResolveImage == 133 );
+VK_FAST_THUNK( vkCmdResolveImage, "133", 7 )
+#else
 void WINAPI vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve *pRegions)
 {
     struct vkCmdResolveImage_params params;
@@ -1364,7 +1928,12 @@ void WINAPI vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, V
     params.pRegions = pRegions;
     UNIX_CALL(vkCmdResolveImage, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdResolveImage2 == 134 );
+VK_FAST_THUNK( vkCmdResolveImage2, "134", 2 )
+#else
 void WINAPI vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
 {
     struct vkCmdResolveImage2_params params;
@@ -1372,7 +1941,12 @@ void WINAPI vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveIma
     params.pResolveImageInfo = pResolveImageInfo;
     UNIX_CALL(vkCmdResolveImage2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdResolveImage2KHR == 135 );
+VK_FAST_THUNK( vkCmdResolveImage2KHR, "135", 2 )
+#else
 void WINAPI vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
 {
     struct vkCmdResolveImage2KHR_params params;
@@ -1380,7 +1954,12 @@ void WINAPI vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolve
     params.pResolveImageInfo = pResolveImageInfo;
     UNIX_CALL(vkCmdResolveImage2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetAlphaToCoverageEnableEXT == 136 );
+VK_FAST_THUNK( vkCmdSetAlphaToCoverageEnableEXT, "136", 2 )
+#else
 void WINAPI vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable)
 {
     struct vkCmdSetAlphaToCoverageEnableEXT_params params;
@@ -1388,7 +1967,12 @@ void WINAPI vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBo
     params.alphaToCoverageEnable = alphaToCoverageEnable;
     UNIX_CALL(vkCmdSetAlphaToCoverageEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetAlphaToOneEnableEXT == 137 );
+VK_FAST_THUNK( vkCmdSetAlphaToOneEnableEXT, "137", 2 )
+#else
 void WINAPI vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable)
 {
     struct vkCmdSetAlphaToOneEnableEXT_params params;
@@ -1396,6 +1980,7 @@ void WINAPI vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32
     params.alphaToOneEnable = alphaToOneEnable;
     UNIX_CALL(vkCmdSetAlphaToOneEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
 {
@@ -1405,6 +1990,10 @@ void WINAPI vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float bl
     UNIX_CALL(vkCmdSetBlendConstants, &params);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCheckpointNV == 139 );
+VK_FAST_THUNK( vkCmdSetCheckpointNV, "139", 2 )
+#else
 void WINAPI vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pCheckpointMarker)
 {
     struct vkCmdSetCheckpointNV_params params;
@@ -1412,7 +2001,12 @@ void WINAPI vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pChe
     params.pCheckpointMarker = pCheckpointMarker;
     UNIX_CALL(vkCmdSetCheckpointNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetCoarseSampleOrderNV == 140 );
+VK_FAST_THUNK( vkCmdSetCoarseSampleOrderNV, "140", 4 )
+#else
 void WINAPI vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV *pCustomSampleOrders)
 {
     struct vkCmdSetCoarseSampleOrderNV_params params;
@@ -1422,7 +2016,12 @@ void WINAPI vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseS
     params.pCustomSampleOrders = pCustomSampleOrders;
     UNIX_CALL(vkCmdSetCoarseSampleOrderNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetColorBlendAdvancedEXT == 141 );
+VK_FAST_THUNK( vkCmdSetColorBlendAdvancedEXT, "141", 4 )
+#else
 void WINAPI vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT *pColorBlendAdvanced)
 {
     struct vkCmdSetColorBlendAdvancedEXT_params params;
@@ -1432,7 +2031,12 @@ void WINAPI vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_
     params.pColorBlendAdvanced = pColorBlendAdvanced;
     UNIX_CALL(vkCmdSetColorBlendAdvancedEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetColorBlendEnableEXT == 142 );
+VK_FAST_THUNK( vkCmdSetColorBlendEnableEXT, "142", 4 )
+#else
 void WINAPI vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32 *pColorBlendEnables)
 {
     struct vkCmdSetColorBlendEnableEXT_params params;
@@ -1442,7 +2046,12 @@ void WINAPI vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t
     params.pColorBlendEnables = pColorBlendEnables;
     UNIX_CALL(vkCmdSetColorBlendEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetColorBlendEquationEXT == 143 );
+VK_FAST_THUNK( vkCmdSetColorBlendEquationEXT, "143", 4 )
+#else
 void WINAPI vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT *pColorBlendEquations)
 {
     struct vkCmdSetColorBlendEquationEXT_params params;
@@ -1452,7 +2061,12 @@ void WINAPI vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_
     params.pColorBlendEquations = pColorBlendEquations;
     UNIX_CALL(vkCmdSetColorBlendEquationEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetColorWriteEnableEXT == 144 );
+VK_FAST_THUNK( vkCmdSetColorWriteEnableEXT, "144", 3 )
+#else
 void WINAPI vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32 *pColorWriteEnables)
 {
     struct vkCmdSetColorWriteEnableEXT_params params;
@@ -1461,7 +2075,12 @@ void WINAPI vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t
     params.pColorWriteEnables = pColorWriteEnables;
     UNIX_CALL(vkCmdSetColorWriteEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetColorWriteMaskEXT == 145 );
+VK_FAST_THUNK( vkCmdSetColorWriteMaskEXT, "145", 4 )
+#else
 void WINAPI vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags *pColorWriteMasks)
 {
     struct vkCmdSetColorWriteMaskEXT_params params;
@@ -1471,7 +2090,12 @@ void WINAPI vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t fi
     params.pColorWriteMasks = pColorWriteMasks;
     UNIX_CALL(vkCmdSetColorWriteMaskEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetConservativeRasterizationModeEXT == 146 );
+VK_FAST_THUNK( vkCmdSetConservativeRasterizationModeEXT, "146", 2 )
+#else
 void WINAPI vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode)
 {
     struct vkCmdSetConservativeRasterizationModeEXT_params params;
@@ -1479,7 +2103,12 @@ void WINAPI vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuff
     params.conservativeRasterizationMode = conservativeRasterizationMode;
     UNIX_CALL(vkCmdSetConservativeRasterizationModeEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCoverageModulationModeNV == 147 );
+VK_FAST_THUNK( vkCmdSetCoverageModulationModeNV, "147", 2 )
+#else
 void WINAPI vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode)
 {
     struct vkCmdSetCoverageModulationModeNV_params params;
@@ -1487,7 +2116,12 @@ void WINAPI vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCo
     params.coverageModulationMode = coverageModulationMode;
     UNIX_CALL(vkCmdSetCoverageModulationModeNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCoverageModulationTableEnableNV == 148 );
+VK_FAST_THUNK( vkCmdSetCoverageModulationTableEnableNV, "148", 2 )
+#else
 void WINAPI vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable)
 {
     struct vkCmdSetCoverageModulationTableEnableNV_params params;
@@ -1495,6 +2129,7 @@ void WINAPI vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffe
     params.coverageModulationTableEnable = coverageModulationTableEnable;
     UNIX_CALL(vkCmdSetCoverageModulationTableEnableNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float *pCoverageModulationTable)
 {
@@ -1505,6 +2140,10 @@ void WINAPI vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uin
     UNIX_CALL(vkCmdSetCoverageModulationTableNV, &params);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCoverageReductionModeNV == 150 );
+VK_FAST_THUNK( vkCmdSetCoverageReductionModeNV, "150", 2 )
+#else
 void WINAPI vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode)
 {
     struct vkCmdSetCoverageReductionModeNV_params params;
@@ -1512,7 +2151,12 @@ void WINAPI vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCov
     params.coverageReductionMode = coverageReductionMode;
     UNIX_CALL(vkCmdSetCoverageReductionModeNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCoverageToColorEnableNV == 151 );
+VK_FAST_THUNK( vkCmdSetCoverageToColorEnableNV, "151", 2 )
+#else
 void WINAPI vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable)
 {
     struct vkCmdSetCoverageToColorEnableNV_params params;
@@ -1520,7 +2164,12 @@ void WINAPI vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBoo
     params.coverageToColorEnable = coverageToColorEnable;
     UNIX_CALL(vkCmdSetCoverageToColorEnableNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCoverageToColorLocationNV == 152 );
+VK_FAST_THUNK( vkCmdSetCoverageToColorLocationNV, "152", 2 )
+#else
 void WINAPI vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation)
 {
     struct vkCmdSetCoverageToColorLocationNV_params params;
@@ -1528,7 +2177,12 @@ void WINAPI vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uin
     params.coverageToColorLocation = coverageToColorLocation;
     UNIX_CALL(vkCmdSetCoverageToColorLocationNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCullMode == 153 );
+VK_FAST_THUNK( vkCmdSetCullMode, "153", 2 )
+#else
 void WINAPI vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
 {
     struct vkCmdSetCullMode_params params;
@@ -1536,7 +2190,12 @@ void WINAPI vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cull
     params.cullMode = cullMode;
     UNIX_CALL(vkCmdSetCullMode, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetCullModeEXT == 154 );
+VK_FAST_THUNK( vkCmdSetCullModeEXT, "154", 2 )
+#else
 void WINAPI vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
 {
     struct vkCmdSetCullModeEXT_params params;
@@ -1544,6 +2203,7 @@ void WINAPI vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags c
     params.cullMode = cullMode;
     UNIX_CALL(vkCmdSetCullModeEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
 {
@@ -1555,6 +2215,10 @@ void WINAPI vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasCons
     UNIX_CALL(vkCmdSetDepthBias, &params);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthBiasEnable == 156 );
+VK_FAST_THUNK( vkCmdSetDepthBiasEnable, "156", 2 )
+#else
 void WINAPI vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
 {
     struct vkCmdSetDepthBiasEnable_params params;
@@ -1562,7 +2226,12 @@ void WINAPI vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 dept
     params.depthBiasEnable = depthBiasEnable;
     UNIX_CALL(vkCmdSetDepthBiasEnable, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthBiasEnableEXT == 157 );
+VK_FAST_THUNK( vkCmdSetDepthBiasEnableEXT, "157", 2 )
+#else
 void WINAPI vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
 {
     struct vkCmdSetDepthBiasEnableEXT_params params;
@@ -1570,6 +2239,7 @@ void WINAPI vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 d
     params.depthBiasEnable = depthBiasEnable;
     UNIX_CALL(vkCmdSetDepthBiasEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
 {
@@ -1580,6 +2250,10 @@ void WINAPI vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBou
     UNIX_CALL(vkCmdSetDepthBounds, &params);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthBoundsTestEnable == 159 );
+VK_FAST_THUNK( vkCmdSetDepthBoundsTestEnable, "159", 2 )
+#else
 void WINAPI vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
 {
     struct vkCmdSetDepthBoundsTestEnable_params params;
@@ -1587,7 +2261,12 @@ void WINAPI vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool3
     params.depthBoundsTestEnable = depthBoundsTestEnable;
     UNIX_CALL(vkCmdSetDepthBoundsTestEnable, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthBoundsTestEnableEXT == 160 );
+VK_FAST_THUNK( vkCmdSetDepthBoundsTestEnableEXT, "160", 2 )
+#else
 void WINAPI vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
 {
     struct vkCmdSetDepthBoundsTestEnableEXT_params params;
@@ -1595,7 +2274,12 @@ void WINAPI vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBo
     params.depthBoundsTestEnable = depthBoundsTestEnable;
     UNIX_CALL(vkCmdSetDepthBoundsTestEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthClampEnableEXT == 161 );
+VK_FAST_THUNK( vkCmdSetDepthClampEnableEXT, "161", 2 )
+#else
 void WINAPI vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable)
 {
     struct vkCmdSetDepthClampEnableEXT_params params;
@@ -1603,7 +2287,12 @@ void WINAPI vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32
     params.depthClampEnable = depthClampEnable;
     UNIX_CALL(vkCmdSetDepthClampEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthClipEnableEXT == 162 );
+VK_FAST_THUNK( vkCmdSetDepthClipEnableEXT, "162", 2 )
+#else
 void WINAPI vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable)
 {
     struct vkCmdSetDepthClipEnableEXT_params params;
@@ -1611,7 +2300,12 @@ void WINAPI vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 d
     params.depthClipEnable = depthClipEnable;
     UNIX_CALL(vkCmdSetDepthClipEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthClipNegativeOneToOneEXT == 163 );
+VK_FAST_THUNK( vkCmdSetDepthClipNegativeOneToOneEXT, "163", 2 )
+#else
 void WINAPI vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne)
 {
     struct vkCmdSetDepthClipNegativeOneToOneEXT_params params;
@@ -1619,7 +2313,12 @@ void WINAPI vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer,
     params.negativeOneToOne = negativeOneToOne;
     UNIX_CALL(vkCmdSetDepthClipNegativeOneToOneEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthCompareOp == 164 );
+VK_FAST_THUNK( vkCmdSetDepthCompareOp, "164", 2 )
+#else
 void WINAPI vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
 {
     struct vkCmdSetDepthCompareOp_params params;
@@ -1627,7 +2326,12 @@ void WINAPI vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp de
     params.depthCompareOp = depthCompareOp;
     UNIX_CALL(vkCmdSetDepthCompareOp, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthCompareOpEXT == 165 );
+VK_FAST_THUNK( vkCmdSetDepthCompareOpEXT, "165", 2 )
+#else
 void WINAPI vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
 {
     struct vkCmdSetDepthCompareOpEXT_params params;
@@ -1635,7 +2339,12 @@ void WINAPI vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp
     params.depthCompareOp = depthCompareOp;
     UNIX_CALL(vkCmdSetDepthCompareOpEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthTestEnable == 166 );
+VK_FAST_THUNK( vkCmdSetDepthTestEnable, "166", 2 )
+#else
 void WINAPI vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
 {
     struct vkCmdSetDepthTestEnable_params params;
@@ -1643,7 +2352,12 @@ void WINAPI vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 dept
     params.depthTestEnable = depthTestEnable;
     UNIX_CALL(vkCmdSetDepthTestEnable, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthTestEnableEXT == 167 );
+VK_FAST_THUNK( vkCmdSetDepthTestEnableEXT, "167", 2 )
+#else
 void WINAPI vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
 {
     struct vkCmdSetDepthTestEnableEXT_params params;
@@ -1651,7 +2365,12 @@ void WINAPI vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 d
     params.depthTestEnable = depthTestEnable;
     UNIX_CALL(vkCmdSetDepthTestEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthWriteEnable == 168 );
+VK_FAST_THUNK( vkCmdSetDepthWriteEnable, "168", 2 )
+#else
 void WINAPI vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
 {
     struct vkCmdSetDepthWriteEnable_params params;
@@ -1659,7 +2378,12 @@ void WINAPI vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 dep
     params.depthWriteEnable = depthWriteEnable;
     UNIX_CALL(vkCmdSetDepthWriteEnable, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDepthWriteEnableEXT == 169 );
+VK_FAST_THUNK( vkCmdSetDepthWriteEnableEXT, "169", 2 )
+#else
 void WINAPI vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
 {
     struct vkCmdSetDepthWriteEnableEXT_params params;
@@ -1667,7 +2391,12 @@ void WINAPI vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32
     params.depthWriteEnable = depthWriteEnable;
     UNIX_CALL(vkCmdSetDepthWriteEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+C_ASSERT( unix_vkCmdSetDescriptorBufferOffsetsEXT == 170 );
+VK_FAST_THUNK( vkCmdSetDescriptorBufferOffsetsEXT, "170", 7 )
+#else
 void WINAPI vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t *pBufferIndices, const VkDeviceSize *pOffsets)
 {
     struct vkCmdSetDescriptorBufferOffsetsEXT_params params;
@@ -1680,7 +2409,12 @@ void WINAPI vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, Vk
     params.pOffsets = pOffsets;
     UNIX_CALL(vkCmdSetDescriptorBufferOffsetsEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDeviceMask == 171 );
+VK_FAST_THUNK( vkCmdSetDeviceMask, "171", 2 )
+#else
 void WINAPI vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
 {
     struct vkCmdSetDeviceMask_params params;
@@ -1688,7 +2422,12 @@ void WINAPI vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMas
     params.deviceMask = deviceMask;
     UNIX_CALL(vkCmdSetDeviceMask, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetDeviceMaskKHR == 172 );
+VK_FAST_THUNK( vkCmdSetDeviceMaskKHR, "172", 2 )
+#else
 void WINAPI vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
 {
     struct vkCmdSetDeviceMaskKHR_params params;
@@ -1696,7 +2435,12 @@ void WINAPI vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t device
     params.deviceMask = deviceMask;
     UNIX_CALL(vkCmdSetDeviceMaskKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetDiscardRectangleEXT == 173 );
+VK_FAST_THUNK( vkCmdSetDiscardRectangleEXT, "173", 4 )
+#else
 void WINAPI vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D *pDiscardRectangles)
 {
     struct vkCmdSetDiscardRectangleEXT_params params;
@@ -1706,7 +2450,12 @@ void WINAPI vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t
     params.pDiscardRectangles = pDiscardRectangles;
     UNIX_CALL(vkCmdSetDiscardRectangleEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetEvent == 174 );
+VK_FAST_THUNK( vkCmdSetEvent, "174", 3 )
+#else
 void WINAPI vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
 {
     struct vkCmdSetEvent_params params;
@@ -1715,7 +2464,12 @@ void WINAPI vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipeli
     params.stageMask = stageMask;
     UNIX_CALL(vkCmdSetEvent, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetEvent2 == 175 );
+VK_FAST_THUNK( vkCmdSetEvent2, "175", 3 )
+#else
 void WINAPI vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
 {
     struct vkCmdSetEvent2_params params;
@@ -1724,7 +2478,12 @@ void WINAPI vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const V
     params.pDependencyInfo = pDependencyInfo;
     UNIX_CALL(vkCmdSetEvent2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetEvent2KHR == 176 );
+VK_FAST_THUNK( vkCmdSetEvent2KHR, "176", 3 )
+#else
 void WINAPI vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
 {
     struct vkCmdSetEvent2KHR_params params;
@@ -1733,7 +2492,12 @@ void WINAPI vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, cons
     params.pDependencyInfo = pDependencyInfo;
     UNIX_CALL(vkCmdSetEvent2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetExclusiveScissorNV == 177 );
+VK_FAST_THUNK( vkCmdSetExclusiveScissorNV, "177", 4 )
+#else
 void WINAPI vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D *pExclusiveScissors)
 {
     struct vkCmdSetExclusiveScissorNV_params params;
@@ -1743,6 +2507,7 @@ void WINAPI vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t f
     params.pExclusiveScissors = pExclusiveScissors;
     UNIX_CALL(vkCmdSetExclusiveScissorNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize)
 {
@@ -1752,6 +2517,10 @@ void WINAPI vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandB
     UNIX_CALL(vkCmdSetExtraPrimitiveOverestimationSizeEXT, &params);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetFragmentShadingRateEnumNV == 179 );
+VK_FAST_THUNK( vkCmdSetFragmentShadingRateEnumNV, "179", 3 )
+#else
 void WINAPI vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
 {
     struct vkCmdSetFragmentShadingRateEnumNV_params params;
@@ -1760,7 +2529,12 @@ void WINAPI vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkF
     params.combinerOps = combinerOps;
     UNIX_CALL(vkCmdSetFragmentShadingRateEnumNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetFragmentShadingRateKHR == 180 );
+VK_FAST_THUNK( vkCmdSetFragmentShadingRateKHR, "180", 3 )
+#else
 void WINAPI vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D *pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
 {
     struct vkCmdSetFragmentShadingRateKHR_params params;
@@ -1769,7 +2543,12 @@ void WINAPI vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const
     params.combinerOps = combinerOps;
     UNIX_CALL(vkCmdSetFragmentShadingRateKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetFrontFace == 181 );
+VK_FAST_THUNK( vkCmdSetFrontFace, "181", 2 )
+#else
 void WINAPI vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
 {
     struct vkCmdSetFrontFace_params params;
@@ -1777,7 +2556,12 @@ void WINAPI vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFa
     params.frontFace = frontFace;
     UNIX_CALL(vkCmdSetFrontFace, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetFrontFaceEXT == 182 );
+VK_FAST_THUNK( vkCmdSetFrontFaceEXT, "182", 2 )
+#else
 void WINAPI vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
 {
     struct vkCmdSetFrontFaceEXT_params params;
@@ -1785,7 +2569,12 @@ void WINAPI vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace fron
     params.frontFace = frontFace;
     UNIX_CALL(vkCmdSetFrontFaceEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetLineRasterizationModeEXT == 183 );
+VK_FAST_THUNK( vkCmdSetLineRasterizationModeEXT, "183", 2 )
+#else
 void WINAPI vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode)
 {
     struct vkCmdSetLineRasterizationModeEXT_params params;
@@ -1793,7 +2582,12 @@ void WINAPI vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLi
     params.lineRasterizationMode = lineRasterizationMode;
     UNIX_CALL(vkCmdSetLineRasterizationModeEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetLineStippleEXT == 184 );
+VK_FAST_THUNK( vkCmdSetLineStippleEXT, "184", 3 )
+#else
 void WINAPI vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
 {
     struct vkCmdSetLineStippleEXT_params params;
@@ -1802,7 +2596,12 @@ void WINAPI vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineS
     params.lineStipplePattern = lineStipplePattern;
     UNIX_CALL(vkCmdSetLineStippleEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetLineStippleEnableEXT == 185 );
+VK_FAST_THUNK( vkCmdSetLineStippleEnableEXT, "185", 2 )
+#else
 void WINAPI vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable)
 {
     struct vkCmdSetLineStippleEnableEXT_params params;
@@ -1810,6 +2609,7 @@ void WINAPI vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32
     params.stippledLineEnable = stippledLineEnable;
     UNIX_CALL(vkCmdSetLineStippleEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
 {
@@ -1819,6 +2619,10 @@ void WINAPI vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
     UNIX_CALL(vkCmdSetLineWidth, &params);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetLogicOpEXT == 187 );
+VK_FAST_THUNK( vkCmdSetLogicOpEXT, "187", 2 )
+#else
 void WINAPI vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
 {
     struct vkCmdSetLogicOpEXT_params params;
@@ -1826,7 +2630,12 @@ void WINAPI vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
     params.logicOp = logicOp;
     UNIX_CALL(vkCmdSetLogicOpEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetLogicOpEnableEXT == 188 );
+VK_FAST_THUNK( vkCmdSetLogicOpEnableEXT, "188", 2 )
+#else
 void WINAPI vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable)
 {
     struct vkCmdSetLogicOpEnableEXT_params params;
@@ -1834,7 +2643,12 @@ void WINAPI vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 log
     params.logicOpEnable = logicOpEnable;
     UNIX_CALL(vkCmdSetLogicOpEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetPatchControlPointsEXT == 189 );
+VK_FAST_THUNK( vkCmdSetPatchControlPointsEXT, "189", 2 )
+#else
 void WINAPI vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
 {
     struct vkCmdSetPatchControlPointsEXT_params params;
@@ -1842,6 +2656,7 @@ void WINAPI vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_
     params.patchControlPoints = patchControlPoints;
     UNIX_CALL(vkCmdSetPatchControlPointsEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 VkResult WINAPI vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL *pMarkerInfo)
 {
@@ -1876,6 +2691,10 @@ VkResult WINAPI vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuff
     return params.result;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetPolygonModeEXT == 193 );
+VK_FAST_THUNK( vkCmdSetPolygonModeEXT, "193", 2 )
+#else
 void WINAPI vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode)
 {
     struct vkCmdSetPolygonModeEXT_params params;
@@ -1883,7 +2702,12 @@ void WINAPI vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode
     params.polygonMode = polygonMode;
     UNIX_CALL(vkCmdSetPolygonModeEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetPrimitiveRestartEnable == 194 );
+VK_FAST_THUNK( vkCmdSetPrimitiveRestartEnable, "194", 2 )
+#else
 void WINAPI vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
 {
     struct vkCmdSetPrimitiveRestartEnable_params params;
@@ -1891,7 +2715,12 @@ void WINAPI vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool
     params.primitiveRestartEnable = primitiveRestartEnable;
     UNIX_CALL(vkCmdSetPrimitiveRestartEnable, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetPrimitiveRestartEnableEXT == 195 );
+VK_FAST_THUNK( vkCmdSetPrimitiveRestartEnableEXT, "195", 2 )
+#else
 void WINAPI vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
 {
     struct vkCmdSetPrimitiveRestartEnableEXT_params params;
@@ -1899,7 +2728,12 @@ void WINAPI vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkB
     params.primitiveRestartEnable = primitiveRestartEnable;
     UNIX_CALL(vkCmdSetPrimitiveRestartEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetPrimitiveTopology == 196 );
+VK_FAST_THUNK( vkCmdSetPrimitiveTopology, "196", 2 )
+#else
 void WINAPI vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
 {
     struct vkCmdSetPrimitiveTopology_params params;
@@ -1907,7 +2741,12 @@ void WINAPI vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitive
     params.primitiveTopology = primitiveTopology;
     UNIX_CALL(vkCmdSetPrimitiveTopology, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetPrimitiveTopologyEXT == 197 );
+VK_FAST_THUNK( vkCmdSetPrimitiveTopologyEXT, "197", 2 )
+#else
 void WINAPI vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
 {
     struct vkCmdSetPrimitiveTopologyEXT_params params;
@@ -1915,7 +2754,12 @@ void WINAPI vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimit
     params.primitiveTopology = primitiveTopology;
     UNIX_CALL(vkCmdSetPrimitiveTopologyEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetProvokingVertexModeEXT == 198 );
+VK_FAST_THUNK( vkCmdSetProvokingVertexModeEXT, "198", 2 )
+#else
 void WINAPI vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode)
 {
     struct vkCmdSetProvokingVertexModeEXT_params params;
@@ -1923,7 +2767,12 @@ void WINAPI vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProv
     params.provokingVertexMode = provokingVertexMode;
     UNIX_CALL(vkCmdSetProvokingVertexModeEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetRasterizationSamplesEXT == 199 );
+VK_FAST_THUNK( vkCmdSetRasterizationSamplesEXT, "199", 2 )
+#else
 void WINAPI vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples)
 {
     struct vkCmdSetRasterizationSamplesEXT_params params;
@@ -1931,7 +2780,12 @@ void WINAPI vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSam
     params.rasterizationSamples = rasterizationSamples;
     UNIX_CALL(vkCmdSetRasterizationSamplesEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetRasterizationStreamEXT == 200 );
+VK_FAST_THUNK( vkCmdSetRasterizationStreamEXT, "200", 2 )
+#else
 void WINAPI vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream)
 {
     struct vkCmdSetRasterizationStreamEXT_params params;
@@ -1939,7 +2793,12 @@ void WINAPI vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32
     params.rasterizationStream = rasterizationStream;
     UNIX_CALL(vkCmdSetRasterizationStreamEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetRasterizerDiscardEnable == 201 );
+VK_FAST_THUNK( vkCmdSetRasterizerDiscardEnable, "201", 2 )
+#else
 void WINAPI vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
 {
     struct vkCmdSetRasterizerDiscardEnable_params params;
@@ -1947,7 +2806,12 @@ void WINAPI vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBoo
     params.rasterizerDiscardEnable = rasterizerDiscardEnable;
     UNIX_CALL(vkCmdSetRasterizerDiscardEnable, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetRasterizerDiscardEnableEXT == 202 );
+VK_FAST_THUNK( vkCmdSetRasterizerDiscardEnableEXT, "202", 2 )
+#else
 void WINAPI vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
 {
     struct vkCmdSetRasterizerDiscardEnableEXT_params params;
@@ -1955,7 +2819,12 @@ void WINAPI vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, Vk
     params.rasterizerDiscardEnable = rasterizerDiscardEnable;
     UNIX_CALL(vkCmdSetRasterizerDiscardEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetRayTracingPipelineStackSizeKHR == 203 );
+VK_FAST_THUNK( vkCmdSetRayTracingPipelineStackSizeKHR, "203", 2 )
+#else
 void WINAPI vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize)
 {
     struct vkCmdSetRayTracingPipelineStackSizeKHR_params params;
@@ -1963,7 +2832,12 @@ void WINAPI vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer
     params.pipelineStackSize = pipelineStackSize;
     UNIX_CALL(vkCmdSetRayTracingPipelineStackSizeKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetRepresentativeFragmentTestEnableNV == 204 );
+VK_FAST_THUNK( vkCmdSetRepresentativeFragmentTestEnableNV, "204", 2 )
+#else
 void WINAPI vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable)
 {
     struct vkCmdSetRepresentativeFragmentTestEnableNV_params params;
@@ -1971,7 +2845,12 @@ void WINAPI vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBu
     params.representativeFragmentTestEnable = representativeFragmentTestEnable;
     UNIX_CALL(vkCmdSetRepresentativeFragmentTestEnableNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetSampleLocationsEXT == 205 );
+VK_FAST_THUNK( vkCmdSetSampleLocationsEXT, "205", 2 )
+#else
 void WINAPI vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT *pSampleLocationsInfo)
 {
     struct vkCmdSetSampleLocationsEXT_params params;
@@ -1979,7 +2858,12 @@ void WINAPI vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSa
     params.pSampleLocationsInfo = pSampleLocationsInfo;
     UNIX_CALL(vkCmdSetSampleLocationsEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetSampleLocationsEnableEXT == 206 );
+VK_FAST_THUNK( vkCmdSetSampleLocationsEnableEXT, "206", 2 )
+#else
 void WINAPI vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable)
 {
     struct vkCmdSetSampleLocationsEnableEXT_params params;
@@ -1987,7 +2871,12 @@ void WINAPI vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBo
     params.sampleLocationsEnable = sampleLocationsEnable;
     UNIX_CALL(vkCmdSetSampleLocationsEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetSampleMaskEXT == 207 );
+VK_FAST_THUNK( vkCmdSetSampleMaskEXT, "207", 3 )
+#else
 void WINAPI vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask *pSampleMask)
 {
     struct vkCmdSetSampleMaskEXT_params params;
@@ -1996,7 +2885,12 @@ void WINAPI vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFl
     params.pSampleMask = pSampleMask;
     UNIX_CALL(vkCmdSetSampleMaskEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetScissor == 208 );
+VK_FAST_THUNK( vkCmdSetScissor, "208", 4 )
+#else
 void WINAPI vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors)
 {
     struct vkCmdSetScissor_params params;
@@ -2006,7 +2900,12 @@ void WINAPI vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor
     params.pScissors = pScissors;
     UNIX_CALL(vkCmdSetScissor, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetScissorWithCount == 209 );
+VK_FAST_THUNK( vkCmdSetScissorWithCount, "209", 3 )
+#else
 void WINAPI vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
 {
     struct vkCmdSetScissorWithCount_params params;
@@ -2015,7 +2914,12 @@ void WINAPI vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t sci
     params.pScissors = pScissors;
     UNIX_CALL(vkCmdSetScissorWithCount, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetScissorWithCountEXT == 210 );
+VK_FAST_THUNK( vkCmdSetScissorWithCountEXT, "210", 3 )
+#else
 void WINAPI vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
 {
     struct vkCmdSetScissorWithCountEXT_params params;
@@ -2024,7 +2928,12 @@ void WINAPI vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t
     params.pScissors = pScissors;
     UNIX_CALL(vkCmdSetScissorWithCountEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetShadingRateImageEnableNV == 211 );
+VK_FAST_THUNK( vkCmdSetShadingRateImageEnableNV, "211", 2 )
+#else
 void WINAPI vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable)
 {
     struct vkCmdSetShadingRateImageEnableNV_params params;
@@ -2032,7 +2941,12 @@ void WINAPI vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBo
     params.shadingRateImageEnable = shadingRateImageEnable;
     UNIX_CALL(vkCmdSetShadingRateImageEnableNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetStencilCompareMask == 212 );
+VK_FAST_THUNK( vkCmdSetStencilCompareMask, "212", 3 )
+#else
 void WINAPI vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
 {
     struct vkCmdSetStencilCompareMask_params params;
@@ -2041,7 +2955,12 @@ void WINAPI vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilF
     params.compareMask = compareMask;
     UNIX_CALL(vkCmdSetStencilCompareMask, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdSetStencilOp == 213 );
+VK_FAST_THUNK( vkCmdSetStencilOp, "213", 6 )
+#else
 void WINAPI vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
 {
     struct vkCmdSetStencilOp_params params;
@@ -2053,7 +2972,12 @@ void WINAPI vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags
     params.compareOp = compareOp;
     UNIX_CALL(vkCmdSetStencilOp, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdSetStencilOpEXT == 214 );
+VK_FAST_THUNK( vkCmdSetStencilOpEXT, "214", 6 )
+#else
 void WINAPI vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
 {
     struct vkCmdSetStencilOpEXT_params params;
@@ -2065,7 +2989,12 @@ void WINAPI vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFla
     params.compareOp = compareOp;
     UNIX_CALL(vkCmdSetStencilOpEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetStencilReference == 215 );
+VK_FAST_THUNK( vkCmdSetStencilReference, "215", 3 )
+#else
 void WINAPI vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
 {
     struct vkCmdSetStencilReference_params params;
@@ -2074,7 +3003,12 @@ void WINAPI vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFac
     params.reference = reference;
     UNIX_CALL(vkCmdSetStencilReference, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetStencilTestEnable == 216 );
+VK_FAST_THUNK( vkCmdSetStencilTestEnable, "216", 2 )
+#else
 void WINAPI vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
 {
     struct vkCmdSetStencilTestEnable_params params;
@@ -2082,7 +3016,12 @@ void WINAPI vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 st
     params.stencilTestEnable = stencilTestEnable;
     UNIX_CALL(vkCmdSetStencilTestEnable, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetStencilTestEnableEXT == 217 );
+VK_FAST_THUNK( vkCmdSetStencilTestEnableEXT, "217", 2 )
+#else
 void WINAPI vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
 {
     struct vkCmdSetStencilTestEnableEXT_params params;
@@ -2090,7 +3029,12 @@ void WINAPI vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32
     params.stencilTestEnable = stencilTestEnable;
     UNIX_CALL(vkCmdSetStencilTestEnableEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetStencilWriteMask == 218 );
+VK_FAST_THUNK( vkCmdSetStencilWriteMask, "218", 3 )
+#else
 void WINAPI vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
 {
     struct vkCmdSetStencilWriteMask_params params;
@@ -2099,7 +3043,12 @@ void WINAPI vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFac
     params.writeMask = writeMask;
     UNIX_CALL(vkCmdSetStencilWriteMask, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetTessellationDomainOriginEXT == 219 );
+VK_FAST_THUNK( vkCmdSetTessellationDomainOriginEXT, "219", 2 )
+#else
 void WINAPI vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin)
 {
     struct vkCmdSetTessellationDomainOriginEXT_params params;
@@ -2107,7 +3056,12 @@ void WINAPI vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, V
     params.domainOrigin = domainOrigin;
     UNIX_CALL(vkCmdSetTessellationDomainOriginEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdSetVertexInputEXT == 220 );
+VK_FAST_THUNK( vkCmdSetVertexInputEXT, "220", 5 )
+#else
 void WINAPI vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions)
 {
     struct vkCmdSetVertexInputEXT_params params;
@@ -2118,7 +3072,12 @@ void WINAPI vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t verte
     params.pVertexAttributeDescriptions = pVertexAttributeDescriptions;
     UNIX_CALL(vkCmdSetVertexInputEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetViewport == 221 );
+VK_FAST_THUNK( vkCmdSetViewport, "221", 4 )
+#else
 void WINAPI vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports)
 {
     struct vkCmdSetViewport_params params;
@@ -2128,7 +3087,12 @@ void WINAPI vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewpo
     params.pViewports = pViewports;
     UNIX_CALL(vkCmdSetViewport, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetViewportShadingRatePaletteNV == 222 );
+VK_FAST_THUNK( vkCmdSetViewportShadingRatePaletteNV, "222", 4 )
+#else
 void WINAPI vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV *pShadingRatePalettes)
 {
     struct vkCmdSetViewportShadingRatePaletteNV_params params;
@@ -2138,7 +3102,12 @@ void WINAPI vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer,
     params.pShadingRatePalettes = pShadingRatePalettes;
     UNIX_CALL(vkCmdSetViewportShadingRatePaletteNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetViewportSwizzleNV == 223 );
+VK_FAST_THUNK( vkCmdSetViewportSwizzleNV, "223", 4 )
+#else
 void WINAPI vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV *pViewportSwizzles)
 {
     struct vkCmdSetViewportSwizzleNV_params params;
@@ -2148,7 +3117,12 @@ void WINAPI vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t fi
     params.pViewportSwizzles = pViewportSwizzles;
     UNIX_CALL(vkCmdSetViewportSwizzleNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdSetViewportWScalingEnableNV == 224 );
+VK_FAST_THUNK( vkCmdSetViewportWScalingEnableNV, "224", 2 )
+#else
 void WINAPI vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable)
 {
     struct vkCmdSetViewportWScalingEnableNV_params params;
@@ -2156,7 +3130,12 @@ void WINAPI vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBo
     params.viewportWScalingEnable = viewportWScalingEnable;
     UNIX_CALL(vkCmdSetViewportWScalingEnableNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdSetViewportWScalingNV == 225 );
+VK_FAST_THUNK( vkCmdSetViewportWScalingNV, "225", 4 )
+#else
 void WINAPI vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV *pViewportWScalings)
 {
     struct vkCmdSetViewportWScalingNV_params params;
@@ -2166,7 +3145,12 @@ void WINAPI vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t f
     params.pViewportWScalings = pViewportWScalings;
     UNIX_CALL(vkCmdSetViewportWScalingNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetViewportWithCount == 226 );
+VK_FAST_THUNK( vkCmdSetViewportWithCount, "226", 3 )
+#else
 void WINAPI vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
 {
     struct vkCmdSetViewportWithCount_params params;
@@ -2175,7 +3159,12 @@ void WINAPI vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t vi
     params.pViewports = pViewports;
     UNIX_CALL(vkCmdSetViewportWithCount, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+C_ASSERT( unix_vkCmdSetViewportWithCountEXT == 227 );
+VK_FAST_THUNK( vkCmdSetViewportWithCountEXT, "227", 3 )
+#else
 void WINAPI vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
 {
     struct vkCmdSetViewportWithCountEXT_params params;
@@ -2184,14 +3173,24 @@ void WINAPI vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t
     params.pViewports = pViewports;
     UNIX_CALL(vkCmdSetViewportWithCountEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+C_ASSERT( unix_vkCmdSubpassShadingHUAWEI == 228 );
+VK_FAST_THUNK( vkCmdSubpassShadingHUAWEI, "228", 1 )
+#else
 void WINAPI vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)
 {
     struct vkCmdSubpassShadingHUAWEI_params params;
     params.commandBuffer = commandBuffer;
     UNIX_CALL(vkCmdSubpassShadingHUAWEI, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+C_ASSERT( unix_vkCmdTraceRaysIndirect2KHR == 229 );
+VK_FAST_THUNK( vkCmdTraceRaysIndirect2KHR, "229", 2 )
+#else
 void WINAPI vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)
 {
     struct vkCmdTraceRaysIndirect2KHR_params params;
@@ -2199,7 +3198,12 @@ void WINAPI vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAd
     params.indirectDeviceAddress = indirectDeviceAddress;
     UNIX_CALL(vkCmdTraceRaysIndirect2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdTraceRaysIndirectKHR == 230 );
+VK_FAST_THUNK( vkCmdTraceRaysIndirectKHR, "230", 6 )
+#else
 void WINAPI vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
 {
     struct vkCmdTraceRaysIndirectKHR_params params;
@@ -2211,7 +3215,12 @@ void WINAPI vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStr
     params.indirectDeviceAddress = indirectDeviceAddress;
     UNIX_CALL(vkCmdTraceRaysIndirectKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+C_ASSERT( unix_vkCmdTraceRaysKHR == 231 );
+VK_FAST_THUNK( vkCmdTraceRaysKHR, "231", 8 )
+#else
 void WINAPI vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth)
 {
     struct vkCmdTraceRaysKHR_params params;
@@ -2225,7 +3234,12 @@ void WINAPI vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDevi
     params.depth = depth;
     UNIX_CALL(vkCmdTraceRaysKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 15
+C_ASSERT( unix_vkCmdTraceRaysNV == 232 );
+VK_FAST_THUNK( vkCmdTraceRaysNV, "232", 15 )
+#else
 void WINAPI vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)
 {
     struct vkCmdTraceRaysNV_params params;
@@ -2246,7 +3260,12 @@ void WINAPI vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShade
     params.depth = depth;
     UNIX_CALL(vkCmdTraceRaysNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdUpdateBuffer == 233 );
+VK_FAST_THUNK( vkCmdUpdateBuffer, "233", 5 )
+#else
 void WINAPI vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData)
 {
     struct vkCmdUpdateBuffer_params params;
@@ -2257,7 +3276,12 @@ void WINAPI vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer,
     params.pData = pData;
     UNIX_CALL(vkCmdUpdateBuffer, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 11
+C_ASSERT( unix_vkCmdWaitEvents == 234 );
+VK_FAST_THUNK( vkCmdWaitEvents, "234", 11 )
+#else
 void WINAPI vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
 {
     struct vkCmdWaitEvents_params params;
@@ -2274,7 +3298,12 @@ void WINAPI vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount,
     params.pImageMemoryBarriers = pImageMemoryBarriers;
     UNIX_CALL(vkCmdWaitEvents, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdWaitEvents2 == 235 );
+VK_FAST_THUNK( vkCmdWaitEvents2, "235", 4 )
+#else
 void WINAPI vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
 {
     struct vkCmdWaitEvents2_params params;
@@ -2284,7 +3313,12 @@ void WINAPI vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount,
     params.pDependencyInfos = pDependencyInfos;
     UNIX_CALL(vkCmdWaitEvents2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdWaitEvents2KHR == 236 );
+VK_FAST_THUNK( vkCmdWaitEvents2KHR, "236", 4 )
+#else
 void WINAPI vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
 {
     struct vkCmdWaitEvents2KHR_params params;
@@ -2294,7 +3328,12 @@ void WINAPI vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCou
     params.pDependencyInfos = pDependencyInfos;
     UNIX_CALL(vkCmdWaitEvents2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdWriteAccelerationStructuresPropertiesKHR == 237 );
+VK_FAST_THUNK( vkCmdWriteAccelerationStructuresPropertiesKHR, "237", 6 )
+#else
 void WINAPI vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR *pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
 {
     struct vkCmdWriteAccelerationStructuresPropertiesKHR_params params;
@@ -2306,7 +3345,12 @@ void WINAPI vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer comman
     params.firstQuery = firstQuery;
     UNIX_CALL(vkCmdWriteAccelerationStructuresPropertiesKHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdWriteAccelerationStructuresPropertiesNV == 238 );
+VK_FAST_THUNK( vkCmdWriteAccelerationStructuresPropertiesNV, "238", 6 )
+#else
 void WINAPI vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV *pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
 {
     struct vkCmdWriteAccelerationStructuresPropertiesNV_params params;
@@ -2318,7 +3362,12 @@ void WINAPI vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer command
     params.firstQuery = firstQuery;
     UNIX_CALL(vkCmdWriteAccelerationStructuresPropertiesNV, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdWriteBufferMarker2AMD == 239 );
+VK_FAST_THUNK( vkCmdWriteBufferMarker2AMD, "239", 5 )
+#else
 void WINAPI vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
 {
     struct vkCmdWriteBufferMarker2AMD_params params;
@@ -2329,7 +3378,12 @@ void WINAPI vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipeline
     params.marker = marker;
     UNIX_CALL(vkCmdWriteBufferMarker2AMD, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkCmdWriteBufferMarkerAMD == 240 );
+VK_FAST_THUNK( vkCmdWriteBufferMarkerAMD, "240", 5 )
+#else
 void WINAPI vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
 {
     struct vkCmdWriteBufferMarkerAMD_params params;
@@ -2340,7 +3394,12 @@ void WINAPI vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineS
     params.marker = marker;
     UNIX_CALL(vkCmdWriteBufferMarkerAMD, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+C_ASSERT( unix_vkCmdWriteMicromapsPropertiesEXT == 241 );
+VK_FAST_THUNK( vkCmdWriteMicromapsPropertiesEXT, "241", 6 )
+#else
 void WINAPI vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT *pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
 {
     struct vkCmdWriteMicromapsPropertiesEXT_params params;
@@ -2352,7 +3411,12 @@ void WINAPI vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint
     params.firstQuery = firstQuery;
     UNIX_CALL(vkCmdWriteMicromapsPropertiesEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdWriteTimestamp == 242 );
+VK_FAST_THUNK( vkCmdWriteTimestamp, "242", 4 )
+#else
 void WINAPI vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
 {
     struct vkCmdWriteTimestamp_params params;
@@ -2362,7 +3426,12 @@ void WINAPI vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFl
     params.query = query;
     UNIX_CALL(vkCmdWriteTimestamp, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdWriteTimestamp2 == 243 );
+VK_FAST_THUNK( vkCmdWriteTimestamp2, "243", 4 )
+#else
 void WINAPI vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
 {
     struct vkCmdWriteTimestamp2_params params;
@@ -2372,7 +3441,12 @@ void WINAPI vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageF
     params.query = query;
     UNIX_CALL(vkCmdWriteTimestamp2, &params);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkCmdWriteTimestamp2KHR == 244 );
+VK_FAST_THUNK( vkCmdWriteTimestamp2KHR, "244", 4 )
+#else
 void WINAPI vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
 {
     struct vkCmdWriteTimestamp2KHR_params params;
@@ -2382,6 +3456,7 @@ void WINAPI vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineSta
     params.query = query;
     UNIX_CALL(vkCmdWriteTimestamp2KHR, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 VkResult WINAPI vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader)
 {
@@ -3780,6 +4855,10 @@ VkResult WINAPI vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOpera
     return params.result;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkGetDescriptorEXT == 370 );
+VK_FAST_THUNK( vkGetDescriptorEXT, "370", 4 )
+#else
 void WINAPI vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT *pDescriptorInfo, size_t dataSize, void *pDescriptor)
 {
     struct vkGetDescriptorEXT_params params;
@@ -3789,6 +4868,7 @@ void WINAPI vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT *pD
     params.pDescriptor = pDescriptor;
     UNIX_CALL(vkGetDescriptorEXT, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void **ppData)
 {
@@ -5534,6 +6614,10 @@ void WINAPI vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
     assert(!status);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+C_ASSERT( unix_vkUpdateDescriptorSetWithTemplate == 521 );
+VK_FAST_THUNK( vkUpdateDescriptorSetWithTemplate, "521", 4 )
+#else
 void WINAPI vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
 {
     struct vkUpdateDescriptorSetWithTemplate_params params;
@@ -5543,6 +6627,7 @@ void WINAPI vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet d
     params.pData = pData;
     UNIX_CALL(vkUpdateDescriptorSetWithTemplate, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 void WINAPI vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
 {
@@ -5556,6 +6641,10 @@ void WINAPI vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSe
     assert(!status);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+C_ASSERT( unix_vkUpdateDescriptorSets == 523 );
+VK_FAST_THUNK( vkUpdateDescriptorSets, "523", 5 )
+#else
 void WINAPI vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet *pDescriptorCopies)
 {
     struct vkUpdateDescriptorSets_params params;
@@ -5566,6 +6655,7 @@ void WINAPI vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCoun
     params.pDescriptorCopies = pDescriptorCopies;
     UNIX_CALL(vkUpdateDescriptorSets, &params);
 }
+#endif /* VK_FAST_THUNK */
 
 VkResult WINAPI vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout)
 {
diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 11111111111..11111111111 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -690,6 +690,15 @@ class VkFunction(object):
             return True
         return self.name in PERF_CRITICAL_FUNCTIONS
 
+    def use_fast_thunk(self):
+        if not self.is_perf_critical():
+            return False
+        if self.extra_param:
+            return False
+        if any(p.type in ('float', 'double') for p in self.params):
+            return False
+        return True
+
     def pfn(self, prefix="p", call_conv=None):
         """ Create function pointer. """
 
@@ -765,7 +774,7 @@ class VkFunction(object):
             body += "    return params.result;\n"
         return body
 
-    def body(self, conv, unwrap, params_prefix=""):
+    def body(self, conv, unwrap, params_prefix="", fast_thunk=False):
         body = ""
         needs_alloc = False
 
@@ -787,6 +796,16 @@ class VkFunction(object):
             body += "    struct conversion_context ctx;\n"
         body += "\n"
 
+        if fast_thunk:
+            for n, p in enumerate(self.params):
+                if conv:
+                    body += "    VK_FAST_THUNK_GET_ARG({1}, UINT_PTR, params.{0});\n".format(p.name, n)
+                elif p.is_pointer() or p.is_static_array() or p.needs_unwrapping():
+                    body += "    VK_FAST_THUNK_GET_ARG({1}, void *, params.{0});\n".format(p.name, n)
+                else:
+                    body += "    VK_FAST_THUNK_GET_ARG({1}, UINT_PTR, params.{0});\n".format(p.name, n)
+            assert not self.extra_param and self.type == "void"
+
         if not self.is_perf_critical():
             body += "    {0}\n".format(self.trace(params_prefix=params_prefix, conv=conv))
 
@@ -880,6 +899,25 @@ class VkFunction(object):
 
     def thunk(self, prefix=None, conv=False):
         thunk = ""
+        if self.use_fast_thunk():
+            thunk += "#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= {0}\n".format(len(self.params))
+            thunk += "static void {0}{1}(void)\n".format(prefix, self.name)
+            thunk += "{\n"
+            if conv:
+                thunk += "    struct\n"
+                thunk += "    {\n"
+                for p in self.params:
+                    thunk += "        {0};\n".format(p.definition(conv=True, is_member=True))
+                if self.extra_param:
+                    thunk += "        PTR32 {0};\n".format(self.extra_param)
+                if self.type != "void":
+                    thunk += "        {0} result;\n".format(self.type)
+                thunk += "    } params;\n"
+            else:
+                thunk += "    struct {0}_params params;\n".format(self.name)
+            thunk += self.body(conv=conv, unwrap=self.thunk_type == ThunkType.PUBLIC, params_prefix="params.", fast_thunk=True)
+            thunk += "}\n"
+            thunk += "#else\n"
         if not conv:
             thunk += "#ifdef _WIN64\n"
         if self.is_perf_critical():
@@ -903,14 +941,25 @@ class VkFunction(object):
         thunk += "}\n"
         if not conv:
             thunk += "#endif /* _WIN64 */\n"
+        if self.use_fast_thunk():
+            thunk += "#endif /* VK_FAST_THUNK */\n"
         thunk += "\n"
         return thunk
 
-    def loader_thunk(self, prefix=None):
-        thunk = self.prototype(call_conv="WINAPI", prefix=prefix)
+    def loader_thunk(self, code, prefix=None):
+        thunk = ""
+        if self.use_fast_thunk():
+            thunk += "#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= {0}\n".format(len(self.params))
+            thunk += "C_ASSERT( unix_{0} == {1} );\n".format(self.name, code)
+            thunk += "VK_FAST_THUNK( {0}, \"{1}\", {2} )\n".format(self.name, code, len(self.params))
+            thunk += "#else\n"
+        thunk += self.prototype(call_conv="WINAPI", prefix=prefix)
         thunk += "\n{\n"
         thunk += self.loader_body()
-        thunk += "}\n\n"
+        thunk += "}\n"
+        if self.use_fast_thunk():
+            thunk += "#endif /* VK_FAST_THUNK */\n"
+        thunk += "\n"
         return thunk
 
     def trace(self, message=None, trace_func=None, params_prefix="", conv=False):
@@ -2850,13 +2899,17 @@ class VkGenerator(object):
 
         f.write("WINE_DEFAULT_DEBUG_CHANNEL(vulkan);\n\n")
 
+        code = 2
         for vk_func in self.registry.funcs.values():
             if not vk_func.needs_exposing():
                 continue
+            if vk_func.loader_thunk_type == ThunkType.NONE:
+                continue
+            code += 1
             if vk_func.loader_thunk_type != ThunkType.PUBLIC:
                 continue
 
-            f.write(vk_func.loader_thunk())
+            f.write(vk_func.loader_thunk(code))
 
         f.write("static const struct vulkan_func vk_device_dispatch_table[] =\n{\n")
         for vk_func in self.registry.device_funcs:
diff --git a/dlls/winevulkan/vulkan_loader.h b/dlls/winevulkan/vulkan_loader.h
index 11111111111..11111111111 100644
--- a/dlls/winevulkan/vulkan_loader.h
+++ b/dlls/winevulkan/vulkan_loader.h
@@ -29,6 +29,7 @@
 #include "winbase.h"
 #include "winternl.h"
 #include "ntuser.h"
+#include "wine/asm.h"
 #include "wine/debug.h"
 #include "wine/vulkan.h"
 #include "wine/unixlib.h"
@@ -163,4 +164,39 @@ struct is_available_device_function_params
 
 #define UNIX_CALL(code, params) WINE_UNIX_CALL(unix_ ## code, params)
 
+#ifdef __x86_64__
+
+#define VK_FAST_THUNK_MAX_ARGS 7
+
+#define __VK_FAST_THUNK_ARGS_0
+#define __VK_FAST_THUNK_ARGS_1 "movq %rcx,%r8\n\t"         __VK_FAST_THUNK_ARGS_0
+#define __VK_FAST_THUNK_ARGS_2 "movq %rdx,%xmm0\n\t"       __VK_FAST_THUNK_ARGS_1
+#define __VK_FAST_THUNK_ARGS_3 "movq %r8,%xmm1\n\t"        __VK_FAST_THUNK_ARGS_2
+#define __VK_FAST_THUNK_ARGS_4 "movq %r9,%xmm2\n\t"        __VK_FAST_THUNK_ARGS_3
+#define __VK_FAST_THUNK_ARGS_5 "movq 0x28(%rsp),%xmm3\n\t" __VK_FAST_THUNK_ARGS_4
+#define __VK_FAST_THUNK_ARGS_6 "movq 0x30(%rsp),%xmm4\n\t" __VK_FAST_THUNK_ARGS_5
+#define __VK_FAST_THUNK_ARGS_7 "movq 0x38(%rsp),%xmm5\n\t" __VK_FAST_THUNK_ARGS_6
+
+#define VK_FAST_THUNK(name, code, args) \
+    __ASM_GLOBAL_FUNC(name, __VK_FAST_THUNK_ARGS_ ## args \
+                      "movq __wine_unixlib_handle(%rip),%rcx\n\t" \
+                      "movq $" code ",%rdx\n\t" \
+                      "jmp *__wine_unix_call_dispatcher(%rip)")
+
+#define __VK_FAST_GET_ARG_0 "movq %%rdi,%0"
+#define __VK_FAST_GET_ARG_1 "movq %%xmm0,%0"
+#define __VK_FAST_GET_ARG_2 "movq %%xmm1,%0"
+#define __VK_FAST_GET_ARG_3 "movq %%xmm2,%0"
+#define __VK_FAST_GET_ARG_4 "movq %%xmm3,%0"
+#define __VK_FAST_GET_ARG_5 "movq %%xmm4,%0"
+#define __VK_FAST_GET_ARG_6 "movq %%xmm5,%0"
+
+#define VK_FAST_THUNK_GET_ARG(n, type, param) do { \
+        void *__reg; \
+        __asm__ __volatile__(__VK_FAST_GET_ARG_ ## n : "=r"(__reg)); \
+        (param) = (type)__reg; \
+    } while(0)
+
+#endif /* __x86_64__ */
+
 #endif /* __WINE_VULKAN_LOADER_H */
diff --git a/dlls/winevulkan/vulkan_thunks.c b/dlls/winevulkan/vulkan_thunks.c
index 11111111111..11111111111 100644
--- a/dlls/winevulkan/vulkan_thunks.c
+++ b/dlls/winevulkan/vulkan_thunks.c
@@ -25983,6 +25983,16 @@ static NTSTATUS thunk32_vkBuildMicromapsEXT(void *args)
     return STATUS_SUCCESS;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdBeginConditionalRenderingEXT(void)
+{
+    struct vkCmdBeginConditionalRenderingEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pConditionalRenderingBegin);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginConditionalRenderingEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pConditionalRenderingBegin);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginConditionalRenderingEXT(void *args)
 {
@@ -25991,7 +26001,24 @@ static void thunk64_vkCmdBeginConditionalRenderingEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginConditionalRenderingEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pConditionalRenderingBegin);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdBeginConditionalRenderingEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pConditionalRenderingBegin;
+    } params;
+    VkConditionalRenderingBeginInfoEXT pConditionalRenderingBegin_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pConditionalRenderingBegin);
+    convert_VkConditionalRenderingBeginInfoEXT_win32_to_host((const VkConditionalRenderingBeginInfoEXT32 *)UlongToPtr(params.pConditionalRenderingBegin), &pConditionalRenderingBegin_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginConditionalRenderingEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pConditionalRenderingBegin_host);
+}
+#else
 static void thunk32_vkCmdBeginConditionalRenderingEXT(void *args)
 {
     struct
@@ -26004,7 +26031,18 @@ static void thunk32_vkCmdBeginConditionalRenderingEXT(void *args)
     convert_VkConditionalRenderingBeginInfoEXT_win32_to_host((const VkConditionalRenderingBeginInfoEXT32 *)UlongToPtr(params->pConditionalRenderingBegin), &pConditionalRenderingBegin_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginConditionalRenderingEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pConditionalRenderingBegin_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdBeginDebugUtilsLabelEXT(void)
+{
+    struct vkCmdBeginDebugUtilsLabelEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pLabelInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginDebugUtilsLabelEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pLabelInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginDebugUtilsLabelEXT(void *args)
 {
@@ -26013,7 +26051,24 @@ static void thunk64_vkCmdBeginDebugUtilsLabelEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginDebugUtilsLabelEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pLabelInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdBeginDebugUtilsLabelEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pLabelInfo;
+    } params;
+    VkDebugUtilsLabelEXT pLabelInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pLabelInfo);
+    convert_VkDebugUtilsLabelEXT_win32_to_host((const VkDebugUtilsLabelEXT32 *)UlongToPtr(params.pLabelInfo), &pLabelInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginDebugUtilsLabelEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pLabelInfo_host);
+}
+#else
 static void thunk32_vkCmdBeginDebugUtilsLabelEXT(void *args)
 {
     struct
@@ -26026,7 +26081,20 @@ static void thunk32_vkCmdBeginDebugUtilsLabelEXT(void *args)
     convert_VkDebugUtilsLabelEXT_win32_to_host((const VkDebugUtilsLabelEXT32 *)UlongToPtr(params->pLabelInfo), &pLabelInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginDebugUtilsLabelEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pLabelInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdBeginQuery(void)
+{
+    struct vkCmdBeginQuery_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.flags);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginQuery(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.queryPool, params.query, params.flags);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginQuery(void *args)
 {
@@ -26035,7 +26103,26 @@ static void thunk64_vkCmdBeginQuery(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginQuery(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->queryPool, params->query, params->flags);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdBeginQuery(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t query;
+        VkQueryControlFlags flags;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.flags);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginQuery(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.queryPool, params.query, params.flags);
+}
+#else
 static void thunk32_vkCmdBeginQuery(void *args)
 {
     struct
@@ -26048,7 +26135,21 @@ static void thunk32_vkCmdBeginQuery(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginQuery(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->queryPool, params->query, params->flags);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdBeginQueryIndexedEXT(void)
+{
+    struct vkCmdBeginQueryIndexedEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.flags);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.index);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginQueryIndexedEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.queryPool, params.query, params.flags, params.index);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginQueryIndexedEXT(void *args)
 {
@@ -26057,7 +26158,28 @@ static void thunk64_vkCmdBeginQueryIndexedEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginQueryIndexedEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->queryPool, params->query, params->flags, params->index);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdBeginQueryIndexedEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t query;
+        VkQueryControlFlags flags;
+        uint32_t index;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.flags);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.index);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginQueryIndexedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.queryPool, params.query, params.flags, params.index);
+}
+#else
 static void thunk32_vkCmdBeginQueryIndexedEXT(void *args)
 {
     struct
@@ -26071,7 +26193,19 @@ static void thunk32_vkCmdBeginQueryIndexedEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginQueryIndexedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->queryPool, params->query, params->flags, params->index);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBeginRenderPass(void)
+{
+    struct vkCmdBeginRenderPass_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pRenderPassBegin);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.contents);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginRenderPass(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pRenderPassBegin, params.contents);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginRenderPass(void *args)
 {
@@ -26080,7 +26214,29 @@ static void thunk64_vkCmdBeginRenderPass(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginRenderPass(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pRenderPassBegin, params->contents);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBeginRenderPass(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pRenderPassBegin;
+        VkSubpassContents contents;
+    } params;
+    VkRenderPassBeginInfo pRenderPassBegin_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pRenderPassBegin);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.contents);
+    init_conversion_context(&ctx);
+    convert_VkRenderPassBeginInfo_win32_to_host(&ctx, (const VkRenderPassBeginInfo32 *)UlongToPtr(params.pRenderPassBegin), &pRenderPassBegin_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginRenderPass(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pRenderPassBegin_host, params.contents);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBeginRenderPass(void *args)
 {
     struct
@@ -26097,7 +26253,19 @@ static void thunk32_vkCmdBeginRenderPass(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginRenderPass(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pRenderPassBegin_host, params->contents);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBeginRenderPass2(void)
+{
+    struct vkCmdBeginRenderPass2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pRenderPassBegin);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pSubpassBeginInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginRenderPass2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pRenderPassBegin, params.pSubpassBeginInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginRenderPass2(void *args)
 {
@@ -26106,7 +26274,31 @@ static void thunk64_vkCmdBeginRenderPass2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginRenderPass2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pRenderPassBegin, params->pSubpassBeginInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBeginRenderPass2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pRenderPassBegin;
+        PTR32 pSubpassBeginInfo;
+    } params;
+    VkRenderPassBeginInfo pRenderPassBegin_host;
+    VkSubpassBeginInfo pSubpassBeginInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pRenderPassBegin);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pSubpassBeginInfo);
+    init_conversion_context(&ctx);
+    convert_VkRenderPassBeginInfo_win32_to_host(&ctx, (const VkRenderPassBeginInfo32 *)UlongToPtr(params.pRenderPassBegin), &pRenderPassBegin_host);
+    convert_VkSubpassBeginInfo_win32_to_host((const VkSubpassBeginInfo32 *)UlongToPtr(params.pSubpassBeginInfo), &pSubpassBeginInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginRenderPass2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pRenderPassBegin_host, &pSubpassBeginInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBeginRenderPass2(void *args)
 {
     struct
@@ -26125,7 +26317,19 @@ static void thunk32_vkCmdBeginRenderPass2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginRenderPass2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pRenderPassBegin_host, &pSubpassBeginInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBeginRenderPass2KHR(void)
+{
+    struct vkCmdBeginRenderPass2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pRenderPassBegin);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pSubpassBeginInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginRenderPass2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pRenderPassBegin, params.pSubpassBeginInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginRenderPass2KHR(void *args)
 {
@@ -26134,7 +26338,31 @@ static void thunk64_vkCmdBeginRenderPass2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginRenderPass2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pRenderPassBegin, params->pSubpassBeginInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBeginRenderPass2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pRenderPassBegin;
+        PTR32 pSubpassBeginInfo;
+    } params;
+    VkRenderPassBeginInfo pRenderPassBegin_host;
+    VkSubpassBeginInfo pSubpassBeginInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pRenderPassBegin);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pSubpassBeginInfo);
+    init_conversion_context(&ctx);
+    convert_VkRenderPassBeginInfo_win32_to_host(&ctx, (const VkRenderPassBeginInfo32 *)UlongToPtr(params.pRenderPassBegin), &pRenderPassBegin_host);
+    convert_VkSubpassBeginInfo_win32_to_host((const VkSubpassBeginInfo32 *)UlongToPtr(params.pSubpassBeginInfo), &pSubpassBeginInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginRenderPass2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pRenderPassBegin_host, &pSubpassBeginInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBeginRenderPass2KHR(void *args)
 {
     struct
@@ -26153,7 +26381,18 @@ static void thunk32_vkCmdBeginRenderPass2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginRenderPass2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pRenderPassBegin_host, &pSubpassBeginInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdBeginRendering(void)
+{
+    struct vkCmdBeginRendering_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pRenderingInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginRendering(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pRenderingInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginRendering(void *args)
 {
@@ -26162,7 +26401,27 @@ static void thunk64_vkCmdBeginRendering(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginRendering(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pRenderingInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdBeginRendering(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pRenderingInfo;
+    } params;
+    VkRenderingInfo pRenderingInfo_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pRenderingInfo);
+    init_conversion_context(&ctx);
+    convert_VkRenderingInfo_win32_to_host(&ctx, (const VkRenderingInfo32 *)UlongToPtr(params.pRenderingInfo), &pRenderingInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginRendering(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pRenderingInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBeginRendering(void *args)
 {
     struct
@@ -26178,7 +26437,18 @@ static void thunk32_vkCmdBeginRendering(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginRendering(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pRenderingInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdBeginRenderingKHR(void)
+{
+    struct vkCmdBeginRenderingKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pRenderingInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginRenderingKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pRenderingInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginRenderingKHR(void *args)
 {
@@ -26187,7 +26457,27 @@ static void thunk64_vkCmdBeginRenderingKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginRenderingKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pRenderingInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdBeginRenderingKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pRenderingInfo;
+    } params;
+    VkRenderingInfo pRenderingInfo_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pRenderingInfo);
+    init_conversion_context(&ctx);
+    convert_VkRenderingInfo_win32_to_host(&ctx, (const VkRenderingInfo32 *)UlongToPtr(params.pRenderingInfo), &pRenderingInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginRenderingKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pRenderingInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBeginRenderingKHR(void *args)
 {
     struct
@@ -26203,7 +26493,21 @@ static void thunk32_vkCmdBeginRenderingKHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginRenderingKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pRenderingInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdBeginTransformFeedbackEXT(void)
+{
+    struct vkCmdBeginTransformFeedbackEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstCounterBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.counterBufferCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pCounterBuffers);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pCounterBufferOffsets);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBeginTransformFeedbackEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstCounterBuffer, params.counterBufferCount, params.pCounterBuffers, params.pCounterBufferOffsets);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBeginTransformFeedbackEXT(void *args)
 {
@@ -26212,7 +26516,28 @@ static void thunk64_vkCmdBeginTransformFeedbackEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBeginTransformFeedbackEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstCounterBuffer, params->counterBufferCount, params->pCounterBuffers, params->pCounterBufferOffsets);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdBeginTransformFeedbackEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstCounterBuffer;
+        uint32_t counterBufferCount;
+        PTR32 pCounterBuffers;
+        PTR32 pCounterBufferOffsets;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstCounterBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.counterBufferCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pCounterBuffers);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pCounterBufferOffsets);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBeginTransformFeedbackEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstCounterBuffer, params.counterBufferCount, (const VkBuffer *)UlongToPtr(params.pCounterBuffers), (const VkDeviceSize *)UlongToPtr(params.pCounterBufferOffsets));
+}
+#else
 static void thunk32_vkCmdBeginTransformFeedbackEXT(void *args)
 {
     struct
@@ -26226,7 +26551,20 @@ static void thunk32_vkCmdBeginTransformFeedbackEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBeginTransformFeedbackEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstCounterBuffer, params->counterBufferCount, (const VkBuffer *)UlongToPtr(params->pCounterBuffers), (const VkDeviceSize *)UlongToPtr(params->pCounterBufferOffsets));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(void)
+{
+    struct vkCmdBindDescriptorBufferEmbeddedSamplersEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.set);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineBindPoint, params.layout, params.set);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(void *args)
 {
@@ -26235,7 +26573,26 @@ static void thunk64_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineBindPoint, params->layout, params->set);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineBindPoint pipelineBindPoint;
+        VkPipelineLayout DECLSPEC_ALIGN(8) layout;
+        uint32_t set;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.set);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineBindPoint, params.layout, params.set);
+}
+#else
 static void thunk32_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(void *args)
 {
     struct
@@ -26248,7 +26605,19 @@ static void thunk32_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineBindPoint, params->layout, params->set);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBindDescriptorBuffersEXT(void)
+{
+    struct vkCmdBindDescriptorBuffersEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.bufferCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pBindingInfos);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindDescriptorBuffersEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.bufferCount, params.pBindingInfos);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindDescriptorBuffersEXT(void *args)
 {
@@ -26257,7 +26626,29 @@ static void thunk64_vkCmdBindDescriptorBuffersEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindDescriptorBuffersEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->bufferCount, params->pBindingInfos);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBindDescriptorBuffersEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t bufferCount;
+        PTR32 pBindingInfos;
+    } params;
+    const VkDescriptorBufferBindingInfoEXT *pBindingInfos_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.bufferCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pBindingInfos);
+    init_conversion_context(&ctx);
+    pBindingInfos_host = convert_VkDescriptorBufferBindingInfoEXT_array_win32_to_host(&ctx, (const VkDescriptorBufferBindingInfoEXT32 *)UlongToPtr(params.pBindingInfos), params.bufferCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindDescriptorBuffersEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.bufferCount, pBindingInfos_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBindDescriptorBuffersEXT(void *args)
 {
     struct
@@ -26274,7 +26665,24 @@ static void thunk32_vkCmdBindDescriptorBuffersEXT(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindDescriptorBuffersEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->bufferCount, pBindingInfos_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk64_vkCmdBindDescriptorSets(void)
+{
+    struct vkCmdBindDescriptorSets_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstSet);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.descriptorSetCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pDescriptorSets);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.dynamicOffsetCount);
+    VK_FAST_THUNK_GET_ARG(7, void *, params.pDynamicOffsets);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindDescriptorSets(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineBindPoint, params.layout, params.firstSet, params.descriptorSetCount, params.pDescriptorSets, params.dynamicOffsetCount, params.pDynamicOffsets);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindDescriptorSets(void *args)
 {
@@ -26283,7 +26691,34 @@ static void thunk64_vkCmdBindDescriptorSets(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindDescriptorSets(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineBindPoint, params->layout, params->firstSet, params->descriptorSetCount, params->pDescriptorSets, params->dynamicOffsetCount, params->pDynamicOffsets);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk32_vkCmdBindDescriptorSets(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineBindPoint pipelineBindPoint;
+        VkPipelineLayout DECLSPEC_ALIGN(8) layout;
+        uint32_t firstSet;
+        uint32_t descriptorSetCount;
+        PTR32 pDescriptorSets;
+        uint32_t dynamicOffsetCount;
+        PTR32 pDynamicOffsets;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstSet);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.descriptorSetCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pDescriptorSets);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.dynamicOffsetCount);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.pDynamicOffsets);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindDescriptorSets(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineBindPoint, params.layout, params.firstSet, params.descriptorSetCount, (const VkDescriptorSet *)UlongToPtr(params.pDescriptorSets), params.dynamicOffsetCount, (const uint32_t *)UlongToPtr(params.pDynamicOffsets));
+}
+#else
 static void thunk32_vkCmdBindDescriptorSets(void *args)
 {
     struct
@@ -26300,7 +26735,20 @@ static void thunk32_vkCmdBindDescriptorSets(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindDescriptorSets(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineBindPoint, params->layout, params->firstSet, params->descriptorSetCount, (const VkDescriptorSet *)UlongToPtr(params->pDescriptorSets), params->dynamicOffsetCount, (const uint32_t *)UlongToPtr(params->pDynamicOffsets));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdBindIndexBuffer(void)
+{
+    struct vkCmdBindIndexBuffer_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.indexType);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindIndexBuffer(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.indexType);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindIndexBuffer(void *args)
 {
@@ -26309,7 +26757,26 @@ static void thunk64_vkCmdBindIndexBuffer(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindIndexBuffer(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->indexType);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdBindIndexBuffer(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkIndexType indexType;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.indexType);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindIndexBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.indexType);
+}
+#else
 static void thunk32_vkCmdBindIndexBuffer(void *args)
 {
     struct
@@ -26322,7 +26789,19 @@ static void thunk32_vkCmdBindIndexBuffer(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindIndexBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->indexType);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBindInvocationMaskHUAWEI(void)
+{
+    struct vkCmdBindInvocationMaskHUAWEI_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.imageView);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindInvocationMaskHUAWEI(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.imageView, params.imageLayout);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindInvocationMaskHUAWEI(void *args)
 {
@@ -26331,7 +26810,24 @@ static void thunk64_vkCmdBindInvocationMaskHUAWEI(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindInvocationMaskHUAWEI(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->imageView, params->imageLayout);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBindInvocationMaskHUAWEI(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImageView DECLSPEC_ALIGN(8) imageView;
+        VkImageLayout imageLayout;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.imageView);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindInvocationMaskHUAWEI(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.imageView, params.imageLayout);
+}
+#else
 static void thunk32_vkCmdBindInvocationMaskHUAWEI(void *args)
 {
     struct
@@ -26343,7 +26839,19 @@ static void thunk32_vkCmdBindInvocationMaskHUAWEI(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindInvocationMaskHUAWEI(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->imageView, params->imageLayout);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBindPipeline(void)
+{
+    struct vkCmdBindPipeline_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pipeline);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindPipeline(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineBindPoint, params.pipeline);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindPipeline(void *args)
 {
@@ -26352,7 +26860,24 @@ static void thunk64_vkCmdBindPipeline(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindPipeline(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineBindPoint, params->pipeline);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBindPipeline(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineBindPoint pipelineBindPoint;
+        VkPipeline DECLSPEC_ALIGN(8) pipeline;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pipeline);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindPipeline(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineBindPoint, params.pipeline);
+}
+#else
 static void thunk32_vkCmdBindPipeline(void *args)
 {
     struct
@@ -26364,7 +26889,20 @@ static void thunk32_vkCmdBindPipeline(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindPipeline(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineBindPoint, params->pipeline);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdBindPipelineShaderGroupNV(void)
+{
+    struct vkCmdBindPipelineShaderGroupNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pipeline);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.groupIndex);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindPipelineShaderGroupNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineBindPoint, params.pipeline, params.groupIndex);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindPipelineShaderGroupNV(void *args)
 {
@@ -26373,8 +26911,10 @@ static void thunk64_vkCmdBindPipelineShaderGroupNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindPipelineShaderGroupNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineBindPoint, params->pipeline, params->groupIndex);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
-static void thunk32_vkCmdBindPipelineShaderGroupNV(void *args)
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdBindPipelineShaderGroupNV(void)
 {
     struct
     {
@@ -26382,20 +26922,66 @@ static void thunk32_vkCmdBindPipelineShaderGroupNV(void *args)
         VkPipelineBindPoint pipelineBindPoint;
         VkPipeline DECLSPEC_ALIGN(8) pipeline;
         uint32_t groupIndex;
-    } *params = args;
+    } params;
 
-    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindPipelineShaderGroupNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineBindPoint, params->pipeline, params->groupIndex);
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pipeline);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.groupIndex);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindPipelineShaderGroupNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineBindPoint, params.pipeline, params.groupIndex);
 }
-
-#ifdef _WIN64
-static void thunk64_vkCmdBindShadingRateImageNV(void *args)
+#else
+static void thunk32_vkCmdBindPipelineShaderGroupNV(void *args)
 {
-    struct vkCmdBindShadingRateImageNV_params *params = args;
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineBindPoint pipelineBindPoint;
+        VkPipeline DECLSPEC_ALIGN(8) pipeline;
+        uint32_t groupIndex;
+    } *params = args;
+
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindPipelineShaderGroupNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineBindPoint, params->pipeline, params->groupIndex);
+}
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBindShadingRateImageNV(void)
+{
+    struct vkCmdBindShadingRateImageNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.imageView);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindShadingRateImageNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.imageView, params.imageLayout);
+}
+#else
+#ifdef _WIN64
+static void thunk64_vkCmdBindShadingRateImageNV(void *args)
+{
+    struct vkCmdBindShadingRateImageNV_params *params = args;
 
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindShadingRateImageNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->imageView, params->imageLayout);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBindShadingRateImageNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImageView DECLSPEC_ALIGN(8) imageView;
+        VkImageLayout imageLayout;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.imageView);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindShadingRateImageNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.imageView, params.imageLayout);
+}
+#else
 static void thunk32_vkCmdBindShadingRateImageNV(void *args)
 {
     struct
@@ -26407,7 +26993,22 @@ static void thunk32_vkCmdBindShadingRateImageNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindShadingRateImageNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->imageView, params->imageLayout);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdBindTransformFeedbackBuffersEXT(void)
+{
+    struct vkCmdBindTransformFeedbackBuffersEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pOffsets);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pSizes);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindTransformFeedbackBuffersEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstBinding, params.bindingCount, params.pBuffers, params.pOffsets, params.pSizes);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindTransformFeedbackBuffersEXT(void *args)
 {
@@ -26416,7 +27017,30 @@ static void thunk64_vkCmdBindTransformFeedbackBuffersEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindTransformFeedbackBuffersEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstBinding, params->bindingCount, params->pBuffers, params->pOffsets, params->pSizes);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdBindTransformFeedbackBuffersEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstBinding;
+        uint32_t bindingCount;
+        PTR32 pBuffers;
+        PTR32 pOffsets;
+        PTR32 pSizes;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pOffsets);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pSizes);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindTransformFeedbackBuffersEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstBinding, params.bindingCount, (const VkBuffer *)UlongToPtr(params.pBuffers), (const VkDeviceSize *)UlongToPtr(params.pOffsets), (const VkDeviceSize *)UlongToPtr(params.pSizes));
+}
+#else
 static void thunk32_vkCmdBindTransformFeedbackBuffersEXT(void *args)
 {
     struct
@@ -26431,7 +27055,21 @@ static void thunk32_vkCmdBindTransformFeedbackBuffersEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindTransformFeedbackBuffersEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstBinding, params->bindingCount, (const VkBuffer *)UlongToPtr(params->pBuffers), (const VkDeviceSize *)UlongToPtr(params->pOffsets), (const VkDeviceSize *)UlongToPtr(params->pSizes));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdBindVertexBuffers(void)
+{
+    struct vkCmdBindVertexBuffers_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pOffsets);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindVertexBuffers(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstBinding, params.bindingCount, params.pBuffers, params.pOffsets);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindVertexBuffers(void *args)
 {
@@ -26440,7 +27078,28 @@ static void thunk64_vkCmdBindVertexBuffers(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindVertexBuffers(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstBinding, params->bindingCount, params->pBuffers, params->pOffsets);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdBindVertexBuffers(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstBinding;
+        uint32_t bindingCount;
+        PTR32 pBuffers;
+        PTR32 pOffsets;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pOffsets);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindVertexBuffers(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstBinding, params.bindingCount, (const VkBuffer *)UlongToPtr(params.pBuffers), (const VkDeviceSize *)UlongToPtr(params.pOffsets));
+}
+#else
 static void thunk32_vkCmdBindVertexBuffers(void *args)
 {
     struct
@@ -26454,7 +27113,23 @@ static void thunk32_vkCmdBindVertexBuffers(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindVertexBuffers(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstBinding, params->bindingCount, (const VkBuffer *)UlongToPtr(params->pBuffers), (const VkDeviceSize *)UlongToPtr(params->pOffsets));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdBindVertexBuffers2(void)
+{
+    struct vkCmdBindVertexBuffers2_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pOffsets);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pSizes);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pStrides);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindVertexBuffers2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstBinding, params.bindingCount, params.pBuffers, params.pOffsets, params.pSizes, params.pStrides);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindVertexBuffers2(void *args)
 {
@@ -26463,7 +27138,32 @@ static void thunk64_vkCmdBindVertexBuffers2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindVertexBuffers2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstBinding, params->bindingCount, params->pBuffers, params->pOffsets, params->pSizes, params->pStrides);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdBindVertexBuffers2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstBinding;
+        uint32_t bindingCount;
+        PTR32 pBuffers;
+        PTR32 pOffsets;
+        PTR32 pSizes;
+        PTR32 pStrides;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pOffsets);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pSizes);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pStrides);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindVertexBuffers2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstBinding, params.bindingCount, (const VkBuffer *)UlongToPtr(params.pBuffers), (const VkDeviceSize *)UlongToPtr(params.pOffsets), (const VkDeviceSize *)UlongToPtr(params.pSizes), (const VkDeviceSize *)UlongToPtr(params.pStrides));
+}
+#else
 static void thunk32_vkCmdBindVertexBuffers2(void *args)
 {
     struct
@@ -26479,7 +27179,23 @@ static void thunk32_vkCmdBindVertexBuffers2(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindVertexBuffers2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstBinding, params->bindingCount, (const VkBuffer *)UlongToPtr(params->pBuffers), (const VkDeviceSize *)UlongToPtr(params->pOffsets), (const VkDeviceSize *)UlongToPtr(params->pSizes), (const VkDeviceSize *)UlongToPtr(params->pStrides));
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdBindVertexBuffers2EXT(void)
+{
+    struct vkCmdBindVertexBuffers2EXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pOffsets);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pSizes);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pStrides);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBindVertexBuffers2EXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstBinding, params.bindingCount, params.pBuffers, params.pOffsets, params.pSizes, params.pStrides);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBindVertexBuffers2EXT(void *args)
 {
@@ -26488,7 +27204,32 @@ static void thunk64_vkCmdBindVertexBuffers2EXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBindVertexBuffers2EXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstBinding, params->bindingCount, params->pBuffers, params->pOffsets, params->pSizes, params->pStrides);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdBindVertexBuffers2EXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstBinding;
+        uint32_t bindingCount;
+        PTR32 pBuffers;
+        PTR32 pOffsets;
+        PTR32 pSizes;
+        PTR32 pStrides;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstBinding);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.bindingCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pBuffers);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pOffsets);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pSizes);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pStrides);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBindVertexBuffers2EXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstBinding, params.bindingCount, (const VkBuffer *)UlongToPtr(params.pBuffers), (const VkDeviceSize *)UlongToPtr(params.pOffsets), (const VkDeviceSize *)UlongToPtr(params.pSizes), (const VkDeviceSize *)UlongToPtr(params.pStrides));
+}
+#else
 static void thunk32_vkCmdBindVertexBuffers2EXT(void *args)
 {
     struct
@@ -26504,7 +27245,24 @@ static void thunk32_vkCmdBindVertexBuffers2EXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBindVertexBuffers2EXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstBinding, params->bindingCount, (const VkBuffer *)UlongToPtr(params->pBuffers), (const VkDeviceSize *)UlongToPtr(params->pOffsets), (const VkDeviceSize *)UlongToPtr(params->pSizes), (const VkDeviceSize *)UlongToPtr(params->pStrides));
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk64_vkCmdBlitImage(void)
+{
+    struct vkCmdBlitImage_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pRegions);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.filter);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBlitImage(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.srcImage, params.srcImageLayout, params.dstImage, params.dstImageLayout, params.regionCount, params.pRegions, params.filter);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBlitImage(void *args)
 {
@@ -26513,7 +27271,34 @@ static void thunk64_vkCmdBlitImage(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBlitImage(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->srcImage, params->srcImageLayout, params->dstImage, params->dstImageLayout, params->regionCount, params->pRegions, params->filter);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk32_vkCmdBlitImage(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImage DECLSPEC_ALIGN(8) srcImage;
+        VkImageLayout srcImageLayout;
+        VkImage DECLSPEC_ALIGN(8) dstImage;
+        VkImageLayout dstImageLayout;
+        uint32_t regionCount;
+        PTR32 pRegions;
+        VkFilter filter;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pRegions);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.filter);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBlitImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.srcImage, params.srcImageLayout, params.dstImage, params.dstImageLayout, params.regionCount, (const VkImageBlit *)UlongToPtr(params.pRegions), params.filter);
+}
+#else
 static void thunk32_vkCmdBlitImage(void *args)
 {
     struct
@@ -26530,7 +27315,18 @@ static void thunk32_vkCmdBlitImage(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBlitImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->srcImage, params->srcImageLayout, params->dstImage, params->dstImageLayout, params->regionCount, (const VkImageBlit *)UlongToPtr(params->pRegions), params->filter);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdBlitImage2(void)
+{
+    struct vkCmdBlitImage2_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pBlitImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBlitImage2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pBlitImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBlitImage2(void *args)
 {
@@ -26539,7 +27335,27 @@ static void thunk64_vkCmdBlitImage2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBlitImage2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pBlitImageInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdBlitImage2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pBlitImageInfo;
+    } params;
+    VkBlitImageInfo2 pBlitImageInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pBlitImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkBlitImageInfo2_win32_to_host(&ctx, (const VkBlitImageInfo232 *)UlongToPtr(params.pBlitImageInfo), &pBlitImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBlitImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pBlitImageInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBlitImage2(void *args)
 {
     struct
@@ -26555,7 +27371,18 @@ static void thunk32_vkCmdBlitImage2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBlitImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pBlitImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdBlitImage2KHR(void)
+{
+    struct vkCmdBlitImage2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pBlitImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBlitImage2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pBlitImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBlitImage2KHR(void *args)
 {
@@ -26564,7 +27391,27 @@ static void thunk64_vkCmdBlitImage2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBlitImage2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pBlitImageInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdBlitImage2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pBlitImageInfo;
+    } params;
+    VkBlitImageInfo2 pBlitImageInfo_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pBlitImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkBlitImageInfo2_win32_to_host(&ctx, (const VkBlitImageInfo232 *)UlongToPtr(params.pBlitImageInfo), &pBlitImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBlitImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pBlitImageInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBlitImage2KHR(void *args)
 {
     struct
@@ -26580,7 +27427,25 @@ static void thunk32_vkCmdBlitImage2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBlitImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pBlitImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 9
+static void thunk64_vkCmdBuildAccelerationStructureNV(void)
+{
+    struct vkCmdBuildAccelerationStructureNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pInfo);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.instanceData);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.instanceOffset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.update);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.dst);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.src);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.scratch);
+    VK_FAST_THUNK_GET_ARG(8, UINT_PTR, params.scratchOffset);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBuildAccelerationStructureNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pInfo, params.instanceData, params.instanceOffset, params.update, params.dst, params.src, params.scratch, params.scratchOffset);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBuildAccelerationStructureNV(void *args)
 {
@@ -26589,7 +27454,41 @@ static void thunk64_vkCmdBuildAccelerationStructureNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBuildAccelerationStructureNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pInfo, params->instanceData, params->instanceOffset, params->update, params->dst, params->src, params->scratch, params->scratchOffset);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 9
+static void thunk32_vkCmdBuildAccelerationStructureNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pInfo;
+        VkBuffer DECLSPEC_ALIGN(8) instanceData;
+        VkDeviceSize DECLSPEC_ALIGN(8) instanceOffset;
+        VkBool32 update;
+        VkAccelerationStructureNV DECLSPEC_ALIGN(8) dst;
+        VkAccelerationStructureNV DECLSPEC_ALIGN(8) src;
+        VkBuffer DECLSPEC_ALIGN(8) scratch;
+        VkDeviceSize DECLSPEC_ALIGN(8) scratchOffset;
+    } params;
+    VkAccelerationStructureInfoNV pInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pInfo);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.instanceData);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.instanceOffset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.update);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.dst);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.src);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.scratch);
+    VK_FAST_THUNK_GET_ARG(8, UINT_PTR, params.scratchOffset);
+    init_conversion_context(&ctx);
+    convert_VkAccelerationStructureInfoNV_win32_to_host(&ctx, (const VkAccelerationStructureInfoNV32 *)UlongToPtr(params.pInfo), &pInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBuildAccelerationStructureNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pInfo_host, params.instanceData, params.instanceOffset, params.update, params.dst, params.src, params.scratch, params.scratchOffset);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBuildAccelerationStructureNV(void *args)
 {
     struct
@@ -26612,7 +27511,22 @@ static void thunk32_vkCmdBuildAccelerationStructureNV(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBuildAccelerationStructureNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pInfo_host, params->instanceData, params->instanceOffset, params->update, params->dst, params->src, params->scratch, params->scratchOffset);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdBuildAccelerationStructuresIndirectKHR(void)
+{
+    struct vkCmdBuildAccelerationStructuresIndirectKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.infoCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pInfos);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pIndirectDeviceAddresses);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pIndirectStrides);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.ppMaxPrimitiveCounts);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBuildAccelerationStructuresIndirectKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.infoCount, params.pInfos, params.pIndirectDeviceAddresses, params.pIndirectStrides, params.ppMaxPrimitiveCounts);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBuildAccelerationStructuresIndirectKHR(void *args)
 {
@@ -26621,7 +27535,35 @@ static void thunk64_vkCmdBuildAccelerationStructuresIndirectKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBuildAccelerationStructuresIndirectKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->infoCount, params->pInfos, params->pIndirectDeviceAddresses, params->pIndirectStrides, params->ppMaxPrimitiveCounts);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdBuildAccelerationStructuresIndirectKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t infoCount;
+        PTR32 pInfos;
+        PTR32 pIndirectDeviceAddresses;
+        PTR32 pIndirectStrides;
+        PTR32 ppMaxPrimitiveCounts;
+    } params;
+    const VkAccelerationStructureBuildGeometryInfoKHR *pInfos_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.infoCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pInfos);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pIndirectDeviceAddresses);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pIndirectStrides);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.ppMaxPrimitiveCounts);
+    init_conversion_context(&ctx);
+    pInfos_host = convert_VkAccelerationStructureBuildGeometryInfoKHR_array_win32_to_host(&ctx, (const VkAccelerationStructureBuildGeometryInfoKHR32 *)UlongToPtr(params.pInfos), params.infoCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBuildAccelerationStructuresIndirectKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.infoCount, pInfos_host, (const VkDeviceAddress *)UlongToPtr(params.pIndirectDeviceAddresses), (const uint32_t *)UlongToPtr(params.pIndirectStrides), (const uint32_t * const*)UlongToPtr(params.ppMaxPrimitiveCounts));
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBuildAccelerationStructuresIndirectKHR(void *args)
 {
     struct
@@ -26641,7 +27583,20 @@ static void thunk32_vkCmdBuildAccelerationStructuresIndirectKHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBuildAccelerationStructuresIndirectKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->infoCount, pInfos_host, (const VkDeviceAddress *)UlongToPtr(params->pIndirectDeviceAddresses), (const uint32_t *)UlongToPtr(params->pIndirectStrides), (const uint32_t * const*)UlongToPtr(params->ppMaxPrimitiveCounts));
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdBuildAccelerationStructuresKHR(void)
+{
+    struct vkCmdBuildAccelerationStructuresKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.infoCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pInfos);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.ppBuildRangeInfos);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBuildAccelerationStructuresKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.infoCount, params.pInfos, params.ppBuildRangeInfos);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBuildAccelerationStructuresKHR(void *args)
 {
@@ -26650,7 +27605,31 @@ static void thunk64_vkCmdBuildAccelerationStructuresKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBuildAccelerationStructuresKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->infoCount, params->pInfos, params->ppBuildRangeInfos);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdBuildAccelerationStructuresKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t infoCount;
+        PTR32 pInfos;
+        PTR32 ppBuildRangeInfos;
+    } params;
+    const VkAccelerationStructureBuildGeometryInfoKHR *pInfos_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.infoCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pInfos);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.ppBuildRangeInfos);
+    init_conversion_context(&ctx);
+    pInfos_host = convert_VkAccelerationStructureBuildGeometryInfoKHR_array_win32_to_host(&ctx, (const VkAccelerationStructureBuildGeometryInfoKHR32 *)UlongToPtr(params.pInfos), params.infoCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBuildAccelerationStructuresKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.infoCount, pInfos_host, (const VkAccelerationStructureBuildRangeInfoKHR * const*)UlongToPtr(params.ppBuildRangeInfos));
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBuildAccelerationStructuresKHR(void *args)
 {
     struct
@@ -26668,7 +27647,19 @@ static void thunk32_vkCmdBuildAccelerationStructuresKHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBuildAccelerationStructuresKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->infoCount, pInfos_host, (const VkAccelerationStructureBuildRangeInfoKHR * const*)UlongToPtr(params->ppBuildRangeInfos));
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdBuildMicromapsEXT(void)
+{
+    struct vkCmdBuildMicromapsEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.infoCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pInfos);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdBuildMicromapsEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.infoCount, params.pInfos);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdBuildMicromapsEXT(void *args)
 {
@@ -26677,7 +27668,29 @@ static void thunk64_vkCmdBuildMicromapsEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdBuildMicromapsEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->infoCount, params->pInfos);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdBuildMicromapsEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t infoCount;
+        PTR32 pInfos;
+    } params;
+    const VkMicromapBuildInfoEXT *pInfos_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.infoCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pInfos);
+    init_conversion_context(&ctx);
+    pInfos_host = convert_VkMicromapBuildInfoEXT_array_win32_to_host(&ctx, (const VkMicromapBuildInfoEXT32 *)UlongToPtr(params.pInfos), params.infoCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdBuildMicromapsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.infoCount, pInfos_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdBuildMicromapsEXT(void *args)
 {
     struct
@@ -26694,7 +27707,21 @@ static void thunk32_vkCmdBuildMicromapsEXT(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdBuildMicromapsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->infoCount, pInfos_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdClearAttachments(void)
+{
+    struct vkCmdClearAttachments_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pAttachments);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.rectCount);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pRects);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdClearAttachments(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.attachmentCount, params.pAttachments, params.rectCount, params.pRects);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdClearAttachments(void *args)
 {
@@ -26703,7 +27730,28 @@ static void thunk64_vkCmdClearAttachments(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdClearAttachments(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->attachmentCount, params->pAttachments, params->rectCount, params->pRects);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdClearAttachments(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t attachmentCount;
+        PTR32 pAttachments;
+        uint32_t rectCount;
+        PTR32 pRects;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pAttachments);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.rectCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pRects);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdClearAttachments(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.attachmentCount, (const VkClearAttachment *)UlongToPtr(params.pAttachments), params.rectCount, (const VkClearRect *)UlongToPtr(params.pRects));
+}
+#else
 static void thunk32_vkCmdClearAttachments(void *args)
 {
     struct
@@ -26717,7 +27765,22 @@ static void thunk32_vkCmdClearAttachments(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdClearAttachments(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->attachmentCount, (const VkClearAttachment *)UlongToPtr(params->pAttachments), params->rectCount, (const VkClearRect *)UlongToPtr(params->pRects));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdClearColorImage(void)
+{
+    struct vkCmdClearColorImage_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.image);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pColor);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.rangeCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pRanges);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdClearColorImage(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.image, params.imageLayout, params.pColor, params.rangeCount, params.pRanges);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdClearColorImage(void *args)
 {
@@ -26726,7 +27789,30 @@ static void thunk64_vkCmdClearColorImage(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdClearColorImage(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->image, params->imageLayout, params->pColor, params->rangeCount, params->pRanges);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdClearColorImage(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImage DECLSPEC_ALIGN(8) image;
+        VkImageLayout imageLayout;
+        PTR32 pColor;
+        uint32_t rangeCount;
+        PTR32 pRanges;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.image);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pColor);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.rangeCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pRanges);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdClearColorImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.image, params.imageLayout, (const VkClearColorValue *)UlongToPtr(params.pColor), params.rangeCount, (const VkImageSubresourceRange *)UlongToPtr(params.pRanges));
+}
+#else
 static void thunk32_vkCmdClearColorImage(void *args)
 {
     struct
@@ -26741,7 +27827,22 @@ static void thunk32_vkCmdClearColorImage(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdClearColorImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->image, params->imageLayout, (const VkClearColorValue *)UlongToPtr(params->pColor), params->rangeCount, (const VkImageSubresourceRange *)UlongToPtr(params->pRanges));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdClearDepthStencilImage(void)
+{
+    struct vkCmdClearDepthStencilImage_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.image);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pDepthStencil);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.rangeCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pRanges);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdClearDepthStencilImage(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.image, params.imageLayout, params.pDepthStencil, params.rangeCount, params.pRanges);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdClearDepthStencilImage(void *args)
 {
@@ -26750,7 +27851,30 @@ static void thunk64_vkCmdClearDepthStencilImage(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdClearDepthStencilImage(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->image, params->imageLayout, params->pDepthStencil, params->rangeCount, params->pRanges);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdClearDepthStencilImage(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImage DECLSPEC_ALIGN(8) image;
+        VkImageLayout imageLayout;
+        PTR32 pDepthStencil;
+        uint32_t rangeCount;
+        PTR32 pRanges;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.image);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.imageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pDepthStencil);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.rangeCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pRanges);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdClearDepthStencilImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.image, params.imageLayout, (const VkClearDepthStencilValue *)UlongToPtr(params.pDepthStencil), params.rangeCount, (const VkImageSubresourceRange *)UlongToPtr(params.pRanges));
+}
+#else
 static void thunk32_vkCmdClearDepthStencilImage(void *args)
 {
     struct
@@ -26765,7 +27889,18 @@ static void thunk32_vkCmdClearDepthStencilImage(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdClearDepthStencilImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->image, params->imageLayout, (const VkClearDepthStencilValue *)UlongToPtr(params->pDepthStencil), params->rangeCount, (const VkImageSubresourceRange *)UlongToPtr(params->pRanges));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyAccelerationStructureKHR(void)
+{
+    struct vkCmdCopyAccelerationStructureKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyAccelerationStructureKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyAccelerationStructureKHR(void *args)
 {
@@ -26774,7 +27909,24 @@ static void thunk64_vkCmdCopyAccelerationStructureKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyAccelerationStructureKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyAccelerationStructureKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pInfo;
+    } params;
+    VkCopyAccelerationStructureInfoKHR pInfo_host;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pInfo);
+    convert_VkCopyAccelerationStructureInfoKHR_win32_to_host((const VkCopyAccelerationStructureInfoKHR32 *)UlongToPtr(params.pInfo), &pInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyAccelerationStructureKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pInfo_host);
+}
+#else
 static void thunk32_vkCmdCopyAccelerationStructureKHR(void *args)
 {
     struct
@@ -26787,7 +27939,20 @@ static void thunk32_vkCmdCopyAccelerationStructureKHR(void *args)
     convert_VkCopyAccelerationStructureInfoKHR_win32_to_host((const VkCopyAccelerationStructureInfoKHR32 *)UlongToPtr(params->pInfo), &pInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyAccelerationStructureKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pInfo_host);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdCopyAccelerationStructureNV(void)
+{
+    struct vkCmdCopyAccelerationStructureNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.dst);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.src);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.mode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyAccelerationStructureNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.dst, params.src, params.mode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyAccelerationStructureNV(void *args)
 {
@@ -26796,7 +27961,26 @@ static void thunk64_vkCmdCopyAccelerationStructureNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyAccelerationStructureNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->dst, params->src, params->mode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdCopyAccelerationStructureNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkAccelerationStructureNV DECLSPEC_ALIGN(8) dst;
+        VkAccelerationStructureNV DECLSPEC_ALIGN(8) src;
+        VkCopyAccelerationStructureModeKHR mode;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.dst);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.src);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.mode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyAccelerationStructureNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.dst, params.src, params.mode);
+}
+#else
 static void thunk32_vkCmdCopyAccelerationStructureNV(void *args)
 {
     struct
@@ -26809,7 +27993,18 @@ static void thunk32_vkCmdCopyAccelerationStructureNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyAccelerationStructureNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->dst, params->src, params->mode);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyAccelerationStructureToMemoryKHR(void)
+{
+    struct vkCmdCopyAccelerationStructureToMemoryKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyAccelerationStructureToMemoryKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyAccelerationStructureToMemoryKHR(void *args)
 {
@@ -26818,7 +28013,24 @@ static void thunk64_vkCmdCopyAccelerationStructureToMemoryKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyAccelerationStructureToMemoryKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyAccelerationStructureToMemoryKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pInfo;
+    } params;
+    VkCopyAccelerationStructureToMemoryInfoKHR pInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pInfo);
+    convert_VkCopyAccelerationStructureToMemoryInfoKHR_win32_to_host((const VkCopyAccelerationStructureToMemoryInfoKHR32 *)UlongToPtr(params.pInfo), &pInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyAccelerationStructureToMemoryKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pInfo_host);
+}
+#else
 static void thunk32_vkCmdCopyAccelerationStructureToMemoryKHR(void *args)
 {
     struct
@@ -26831,7 +28043,21 @@ static void thunk32_vkCmdCopyAccelerationStructureToMemoryKHR(void *args)
     convert_VkCopyAccelerationStructureToMemoryInfoKHR_win32_to_host((const VkCopyAccelerationStructureToMemoryInfoKHR32 *)UlongToPtr(params->pInfo), &pInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyAccelerationStructureToMemoryKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdCopyBuffer(void)
+{
+    struct vkCmdCopyBuffer_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pRegions);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyBuffer(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.srcBuffer, params.dstBuffer, params.regionCount, params.pRegions);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyBuffer(void *args)
 {
@@ -26840,7 +28066,33 @@ static void thunk64_vkCmdCopyBuffer(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyBuffer(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->srcBuffer, params->dstBuffer, params->regionCount, params->pRegions);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdCopyBuffer(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) srcBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) dstBuffer;
+        uint32_t regionCount;
+        PTR32 pRegions;
+    } params;
+    const VkBufferCopy *pRegions_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pRegions);
+    init_conversion_context(&ctx);
+    pRegions_host = convert_VkBufferCopy_array_win32_to_host(&ctx, (const VkBufferCopy32 *)UlongToPtr(params.pRegions), params.regionCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.srcBuffer, params.dstBuffer, params.regionCount, pRegions_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyBuffer(void *args)
 {
     struct
@@ -26859,7 +28111,18 @@ static void thunk32_vkCmdCopyBuffer(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->srcBuffer, params->dstBuffer, params->regionCount, pRegions_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyBuffer2(void)
+{
+    struct vkCmdCopyBuffer2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyBufferInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyBuffer2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyBufferInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyBuffer2(void *args)
 {
@@ -26868,7 +28131,27 @@ static void thunk64_vkCmdCopyBuffer2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyBuffer2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyBufferInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyBuffer2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyBufferInfo;
+    } params;
+    VkCopyBufferInfo2 pCopyBufferInfo_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyBufferInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyBufferInfo2_win32_to_host(&ctx, (const VkCopyBufferInfo232 *)UlongToPtr(params.pCopyBufferInfo), &pCopyBufferInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyBuffer2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyBufferInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyBuffer2(void *args)
 {
     struct
@@ -26884,7 +28167,18 @@ static void thunk32_vkCmdCopyBuffer2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyBuffer2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyBufferInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyBuffer2KHR(void)
+{
+    struct vkCmdCopyBuffer2KHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyBufferInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyBuffer2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyBufferInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyBuffer2KHR(void *args)
 {
@@ -26893,7 +28187,27 @@ static void thunk64_vkCmdCopyBuffer2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyBuffer2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyBufferInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyBuffer2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyBufferInfo;
+    } params;
+    VkCopyBufferInfo2 pCopyBufferInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyBufferInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyBufferInfo2_win32_to_host(&ctx, (const VkCopyBufferInfo232 *)UlongToPtr(params.pCopyBufferInfo), &pCopyBufferInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyBuffer2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyBufferInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyBuffer2KHR(void *args)
 {
     struct
@@ -26909,7 +28223,22 @@ static void thunk32_vkCmdCopyBuffer2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyBuffer2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyBufferInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdCopyBufferToImage(void)
+{
+    struct vkCmdCopyBufferToImage_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pRegions);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyBufferToImage(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.srcBuffer, params.dstImage, params.dstImageLayout, params.regionCount, params.pRegions);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyBufferToImage(void *args)
 {
@@ -26918,7 +28247,35 @@ static void thunk64_vkCmdCopyBufferToImage(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyBufferToImage(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->srcBuffer, params->dstImage, params->dstImageLayout, params->regionCount, params->pRegions);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdCopyBufferToImage(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) srcBuffer;
+        VkImage DECLSPEC_ALIGN(8) dstImage;
+        VkImageLayout dstImageLayout;
+        uint32_t regionCount;
+        PTR32 pRegions;
+    } params;
+    const VkBufferImageCopy *pRegions_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pRegions);
+    init_conversion_context(&ctx);
+    pRegions_host = convert_VkBufferImageCopy_array_win32_to_host(&ctx, (const VkBufferImageCopy32 *)UlongToPtr(params.pRegions), params.regionCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyBufferToImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.srcBuffer, params.dstImage, params.dstImageLayout, params.regionCount, pRegions_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyBufferToImage(void *args)
 {
     struct
@@ -26938,7 +28295,18 @@ static void thunk32_vkCmdCopyBufferToImage(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyBufferToImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->srcBuffer, params->dstImage, params->dstImageLayout, params->regionCount, pRegions_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyBufferToImage2(void)
+{
+    struct vkCmdCopyBufferToImage2_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyBufferToImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyBufferToImage2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyBufferToImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyBufferToImage2(void *args)
 {
@@ -26947,7 +28315,27 @@ static void thunk64_vkCmdCopyBufferToImage2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyBufferToImage2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyBufferToImageInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyBufferToImage2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyBufferToImageInfo;
+    } params;
+    VkCopyBufferToImageInfo2 pCopyBufferToImageInfo_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyBufferToImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyBufferToImageInfo2_win32_to_host(&ctx, (const VkCopyBufferToImageInfo232 *)UlongToPtr(params.pCopyBufferToImageInfo), &pCopyBufferToImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyBufferToImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyBufferToImageInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyBufferToImage2(void *args)
 {
     struct
@@ -26963,16 +28351,47 @@ static void thunk32_vkCmdCopyBufferToImage2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyBufferToImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyBufferToImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyBufferToImage2KHR(void)
+{
+    struct vkCmdCopyBufferToImage2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyBufferToImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyBufferToImage2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyBufferToImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyBufferToImage2KHR(void *args)
 {
     struct vkCmdCopyBufferToImage2KHR_params *params = args;
 
-    wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyBufferToImage2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyBufferToImageInfo);
+    wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyBufferToImage2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyBufferToImageInfo);
+}
+#endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyBufferToImage2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyBufferToImageInfo;
+    } params;
+    VkCopyBufferToImageInfo2 pCopyBufferToImageInfo_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyBufferToImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyBufferToImageInfo2_win32_to_host(&ctx, (const VkCopyBufferToImageInfo232 *)UlongToPtr(params.pCopyBufferToImageInfo), &pCopyBufferToImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyBufferToImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyBufferToImageInfo_host);
+    free_conversion_context(&ctx);
 }
-#endif /* _WIN64 */
-
+#else
 static void thunk32_vkCmdCopyBufferToImage2KHR(void *args)
 {
     struct
@@ -26988,7 +28407,23 @@ static void thunk32_vkCmdCopyBufferToImage2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyBufferToImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyBufferToImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdCopyImage(void)
+{
+    struct vkCmdCopyImage_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pRegions);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyImage(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.srcImage, params.srcImageLayout, params.dstImage, params.dstImageLayout, params.regionCount, params.pRegions);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyImage(void *args)
 {
@@ -26997,7 +28432,32 @@ static void thunk64_vkCmdCopyImage(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyImage(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->srcImage, params->srcImageLayout, params->dstImage, params->dstImageLayout, params->regionCount, params->pRegions);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdCopyImage(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImage DECLSPEC_ALIGN(8) srcImage;
+        VkImageLayout srcImageLayout;
+        VkImage DECLSPEC_ALIGN(8) dstImage;
+        VkImageLayout dstImageLayout;
+        uint32_t regionCount;
+        PTR32 pRegions;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pRegions);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.srcImage, params.srcImageLayout, params.dstImage, params.dstImageLayout, params.regionCount, (const VkImageCopy *)UlongToPtr(params.pRegions));
+}
+#else
 static void thunk32_vkCmdCopyImage(void *args)
 {
     struct
@@ -27013,7 +28473,18 @@ static void thunk32_vkCmdCopyImage(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->srcImage, params->srcImageLayout, params->dstImage, params->dstImageLayout, params->regionCount, (const VkImageCopy *)UlongToPtr(params->pRegions));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyImage2(void)
+{
+    struct vkCmdCopyImage2_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyImage2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyImage2(void *args)
 {
@@ -27022,7 +28493,27 @@ static void thunk64_vkCmdCopyImage2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyImage2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyImageInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyImage2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyImageInfo;
+    } params;
+    VkCopyImageInfo2 pCopyImageInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyImageInfo2_win32_to_host(&ctx, (const VkCopyImageInfo232 *)UlongToPtr(params.pCopyImageInfo), &pCopyImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyImageInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyImage2(void *args)
 {
     struct
@@ -27038,7 +28529,18 @@ static void thunk32_vkCmdCopyImage2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyImage2KHR(void)
+{
+    struct vkCmdCopyImage2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyImage2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyImage2KHR(void *args)
 {
@@ -27047,7 +28549,27 @@ static void thunk64_vkCmdCopyImage2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyImage2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyImageInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyImage2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyImageInfo;
+    } params;
+    VkCopyImageInfo2 pCopyImageInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyImageInfo2_win32_to_host(&ctx, (const VkCopyImageInfo232 *)UlongToPtr(params.pCopyImageInfo), &pCopyImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyImageInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyImage2KHR(void *args)
 {
     struct
@@ -27063,7 +28585,22 @@ static void thunk32_vkCmdCopyImage2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdCopyImageToBuffer(void)
+{
+    struct vkCmdCopyImageToBuffer_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pRegions);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyImageToBuffer(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.srcImage, params.srcImageLayout, params.dstBuffer, params.regionCount, params.pRegions);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyImageToBuffer(void *args)
 {
@@ -27072,7 +28609,35 @@ static void thunk64_vkCmdCopyImageToBuffer(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyImageToBuffer(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->srcImage, params->srcImageLayout, params->dstBuffer, params->regionCount, params->pRegions);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdCopyImageToBuffer(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImage DECLSPEC_ALIGN(8) srcImage;
+        VkImageLayout srcImageLayout;
+        VkBuffer DECLSPEC_ALIGN(8) dstBuffer;
+        uint32_t regionCount;
+        PTR32 pRegions;
+    } params;
+    const VkBufferImageCopy *pRegions_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pRegions);
+    init_conversion_context(&ctx);
+    pRegions_host = convert_VkBufferImageCopy_array_win32_to_host(&ctx, (const VkBufferImageCopy32 *)UlongToPtr(params.pRegions), params.regionCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyImageToBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.srcImage, params.srcImageLayout, params.dstBuffer, params.regionCount, pRegions_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyImageToBuffer(void *args)
 {
     struct
@@ -27092,7 +28657,18 @@ static void thunk32_vkCmdCopyImageToBuffer(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyImageToBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->srcImage, params->srcImageLayout, params->dstBuffer, params->regionCount, pRegions_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyImageToBuffer2(void)
+{
+    struct vkCmdCopyImageToBuffer2_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyImageToBufferInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyImageToBuffer2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyImageToBufferInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyImageToBuffer2(void *args)
 {
@@ -27101,7 +28677,27 @@ static void thunk64_vkCmdCopyImageToBuffer2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyImageToBuffer2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyImageToBufferInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyImageToBuffer2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyImageToBufferInfo;
+    } params;
+    VkCopyImageToBufferInfo2 pCopyImageToBufferInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyImageToBufferInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyImageToBufferInfo2_win32_to_host(&ctx, (const VkCopyImageToBufferInfo232 *)UlongToPtr(params.pCopyImageToBufferInfo), &pCopyImageToBufferInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyImageToBuffer2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyImageToBufferInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyImageToBuffer2(void *args)
 {
     struct
@@ -27117,7 +28713,18 @@ static void thunk32_vkCmdCopyImageToBuffer2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyImageToBuffer2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyImageToBufferInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyImageToBuffer2KHR(void)
+{
+    struct vkCmdCopyImageToBuffer2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCopyImageToBufferInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyImageToBuffer2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCopyImageToBufferInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyImageToBuffer2KHR(void *args)
 {
@@ -27126,7 +28733,27 @@ static void thunk64_vkCmdCopyImageToBuffer2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyImageToBuffer2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCopyImageToBufferInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyImageToBuffer2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCopyImageToBufferInfo;
+    } params;
+    VkCopyImageToBufferInfo2 pCopyImageToBufferInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCopyImageToBufferInfo);
+    init_conversion_context(&ctx);
+    convert_VkCopyImageToBufferInfo2_win32_to_host(&ctx, (const VkCopyImageToBufferInfo232 *)UlongToPtr(params.pCopyImageToBufferInfo), &pCopyImageToBufferInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyImageToBuffer2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pCopyImageToBufferInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdCopyImageToBuffer2KHR(void *args)
 {
     struct
@@ -27142,7 +28769,20 @@ static void thunk32_vkCmdCopyImageToBuffer2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyImageToBuffer2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pCopyImageToBufferInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdCopyMemoryIndirectNV(void)
+{
+    struct vkCmdCopyMemoryIndirectNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.copyBufferAddress);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.copyCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyMemoryIndirectNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.copyBufferAddress, params.copyCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyMemoryIndirectNV(void *args)
 {
@@ -27151,7 +28791,26 @@ static void thunk64_vkCmdCopyMemoryIndirectNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyMemoryIndirectNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->copyBufferAddress, params->copyCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdCopyMemoryIndirectNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkDeviceAddress DECLSPEC_ALIGN(8) copyBufferAddress;
+        uint32_t copyCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.copyBufferAddress);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.copyCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyMemoryIndirectNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.copyBufferAddress, params.copyCount, params.stride);
+}
+#else
 static void thunk32_vkCmdCopyMemoryIndirectNV(void *args)
 {
     struct
@@ -27164,7 +28823,18 @@ static void thunk32_vkCmdCopyMemoryIndirectNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyMemoryIndirectNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->copyBufferAddress, params->copyCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyMemoryToAccelerationStructureKHR(void)
+{
+    struct vkCmdCopyMemoryToAccelerationStructureKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyMemoryToAccelerationStructureKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyMemoryToAccelerationStructureKHR(void *args)
 {
@@ -27173,7 +28843,24 @@ static void thunk64_vkCmdCopyMemoryToAccelerationStructureKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyMemoryToAccelerationStructureKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyMemoryToAccelerationStructureKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pInfo;
+    } params;
+    VkCopyMemoryToAccelerationStructureInfoKHR pInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pInfo);
+    convert_VkCopyMemoryToAccelerationStructureInfoKHR_win32_to_host((const VkCopyMemoryToAccelerationStructureInfoKHR32 *)UlongToPtr(params.pInfo), &pInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyMemoryToAccelerationStructureKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pInfo_host);
+}
+#else
 static void thunk32_vkCmdCopyMemoryToAccelerationStructureKHR(void *args)
 {
     struct
@@ -27186,7 +28873,23 @@ static void thunk32_vkCmdCopyMemoryToAccelerationStructureKHR(void *args)
     convert_VkCopyMemoryToAccelerationStructureInfoKHR_win32_to_host((const VkCopyMemoryToAccelerationStructureInfoKHR32 *)UlongToPtr(params->pInfo), &pInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyMemoryToAccelerationStructureKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pInfo_host);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdCopyMemoryToImageIndirectNV(void)
+{
+    struct vkCmdCopyMemoryToImageIndirectNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.copyBufferAddress);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.copyCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.stride);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pImageSubresources);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyMemoryToImageIndirectNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.copyBufferAddress, params.copyCount, params.stride, params.dstImage, params.dstImageLayout, params.pImageSubresources);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyMemoryToImageIndirectNV(void *args)
 {
@@ -27195,7 +28898,32 @@ static void thunk64_vkCmdCopyMemoryToImageIndirectNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyMemoryToImageIndirectNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->copyBufferAddress, params->copyCount, params->stride, params->dstImage, params->dstImageLayout, params->pImageSubresources);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdCopyMemoryToImageIndirectNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkDeviceAddress DECLSPEC_ALIGN(8) copyBufferAddress;
+        uint32_t copyCount;
+        uint32_t stride;
+        VkImage DECLSPEC_ALIGN(8) dstImage;
+        VkImageLayout dstImageLayout;
+        PTR32 pImageSubresources;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.copyBufferAddress);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.copyCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.stride);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pImageSubresources);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyMemoryToImageIndirectNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.copyBufferAddress, params.copyCount, params.stride, params.dstImage, params.dstImageLayout, (const VkImageSubresourceLayers *)UlongToPtr(params.pImageSubresources));
+}
+#else
 static void thunk32_vkCmdCopyMemoryToImageIndirectNV(void *args)
 {
     struct
@@ -27211,7 +28939,18 @@ static void thunk32_vkCmdCopyMemoryToImageIndirectNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyMemoryToImageIndirectNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->copyBufferAddress, params->copyCount, params->stride, params->dstImage, params->dstImageLayout, (const VkImageSubresourceLayers *)UlongToPtr(params->pImageSubresources));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyMemoryToMicromapEXT(void)
+{
+    struct vkCmdCopyMemoryToMicromapEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyMemoryToMicromapEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyMemoryToMicromapEXT(void *args)
 {
@@ -27220,7 +28959,24 @@ static void thunk64_vkCmdCopyMemoryToMicromapEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyMemoryToMicromapEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyMemoryToMicromapEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pInfo;
+    } params;
+    VkCopyMemoryToMicromapInfoEXT pInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pInfo);
+    convert_VkCopyMemoryToMicromapInfoEXT_win32_to_host((const VkCopyMemoryToMicromapInfoEXT32 *)UlongToPtr(params.pInfo), &pInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyMemoryToMicromapEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pInfo_host);
+}
+#else
 static void thunk32_vkCmdCopyMemoryToMicromapEXT(void *args)
 {
     struct
@@ -27233,7 +28989,18 @@ static void thunk32_vkCmdCopyMemoryToMicromapEXT(void *args)
     convert_VkCopyMemoryToMicromapInfoEXT_win32_to_host((const VkCopyMemoryToMicromapInfoEXT32 *)UlongToPtr(params->pInfo), &pInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyMemoryToMicromapEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyMicromapEXT(void)
+{
+    struct vkCmdCopyMicromapEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyMicromapEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyMicromapEXT(void *args)
 {
@@ -27242,7 +29009,24 @@ static void thunk64_vkCmdCopyMicromapEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyMicromapEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyMicromapEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pInfo;
+    } params;
+    VkCopyMicromapInfoEXT pInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pInfo);
+    convert_VkCopyMicromapInfoEXT_win32_to_host((const VkCopyMicromapInfoEXT32 *)UlongToPtr(params.pInfo), &pInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyMicromapEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pInfo_host);
+}
+#else
 static void thunk32_vkCmdCopyMicromapEXT(void *args)
 {
     struct
@@ -27255,7 +29039,18 @@ static void thunk32_vkCmdCopyMicromapEXT(void *args)
     convert_VkCopyMicromapInfoEXT_win32_to_host((const VkCopyMicromapInfoEXT32 *)UlongToPtr(params->pInfo), &pInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyMicromapEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCopyMicromapToMemoryEXT(void)
+{
+    struct vkCmdCopyMicromapToMemoryEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyMicromapToMemoryEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyMicromapToMemoryEXT(void *args)
 {
@@ -27264,7 +29059,24 @@ static void thunk64_vkCmdCopyMicromapToMemoryEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyMicromapToMemoryEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCopyMicromapToMemoryEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pInfo;
+    } params;
+    VkCopyMicromapToMemoryInfoEXT pInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pInfo);
+    convert_VkCopyMicromapToMemoryInfoEXT_win32_to_host((const VkCopyMicromapToMemoryInfoEXT32 *)UlongToPtr(params.pInfo), &pInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyMicromapToMemoryEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pInfo_host);
+}
+#else
 static void thunk32_vkCmdCopyMicromapToMemoryEXT(void *args)
 {
     struct
@@ -27277,7 +29089,24 @@ static void thunk32_vkCmdCopyMicromapToMemoryEXT(void *args)
     convert_VkCopyMicromapToMemoryInfoEXT_win32_to_host((const VkCopyMicromapToMemoryInfoEXT32 *)UlongToPtr(params->pInfo), &pInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyMicromapToMemoryEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pInfo_host);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk64_vkCmdCopyQueryPoolResults(void)
+{
+    struct vkCmdCopyQueryPoolResults_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstQuery);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.flags);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCopyQueryPoolResults(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.queryPool, params.firstQuery, params.queryCount, params.dstBuffer, params.dstOffset, params.stride, params.flags);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCopyQueryPoolResults(void *args)
 {
@@ -27286,7 +29115,34 @@ static void thunk64_vkCmdCopyQueryPoolResults(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCopyQueryPoolResults(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->queryPool, params->firstQuery, params->queryCount, params->dstBuffer, params->dstOffset, params->stride, params->flags);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk32_vkCmdCopyQueryPoolResults(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t firstQuery;
+        uint32_t queryCount;
+        VkBuffer DECLSPEC_ALIGN(8) dstBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) dstOffset;
+        VkDeviceSize DECLSPEC_ALIGN(8) stride;
+        VkQueryResultFlags flags;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstQuery);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.flags);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCopyQueryPoolResults(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.queryPool, params.firstQuery, params.queryCount, params.dstBuffer, params.dstOffset, params.stride, params.flags);
+}
+#else
 static void thunk32_vkCmdCopyQueryPoolResults(void *args)
 {
     struct
@@ -27303,7 +29159,18 @@ static void thunk32_vkCmdCopyQueryPoolResults(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCopyQueryPoolResults(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->queryPool, params->firstQuery, params->queryCount, params->dstBuffer, params->dstOffset, params->stride, params->flags);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdCuLaunchKernelNVX(void)
+{
+    struct vkCmdCuLaunchKernelNVX_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pLaunchInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdCuLaunchKernelNVX(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pLaunchInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdCuLaunchKernelNVX(void *args)
 {
@@ -27312,7 +29179,24 @@ static void thunk64_vkCmdCuLaunchKernelNVX(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdCuLaunchKernelNVX(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pLaunchInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdCuLaunchKernelNVX(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pLaunchInfo;
+    } params;
+    VkCuLaunchInfoNVX pLaunchInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pLaunchInfo);
+    convert_VkCuLaunchInfoNVX_win32_to_host((const VkCuLaunchInfoNVX32 *)UlongToPtr(params.pLaunchInfo), &pLaunchInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdCuLaunchKernelNVX(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pLaunchInfo_host);
+}
+#else
 static void thunk32_vkCmdCuLaunchKernelNVX(void *args)
 {
     struct
@@ -27325,7 +29209,18 @@ static void thunk32_vkCmdCuLaunchKernelNVX(void *args)
     convert_VkCuLaunchInfoNVX_win32_to_host((const VkCuLaunchInfoNVX32 *)UlongToPtr(params->pLaunchInfo), &pLaunchInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdCuLaunchKernelNVX(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pLaunchInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdDebugMarkerBeginEXT(void)
+{
+    struct vkCmdDebugMarkerBeginEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pMarkerInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDebugMarkerBeginEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pMarkerInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDebugMarkerBeginEXT(void *args)
 {
@@ -27334,7 +29229,24 @@ static void thunk64_vkCmdDebugMarkerBeginEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDebugMarkerBeginEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pMarkerInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdDebugMarkerBeginEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pMarkerInfo;
+    } params;
+    VkDebugMarkerMarkerInfoEXT pMarkerInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pMarkerInfo);
+    convert_VkDebugMarkerMarkerInfoEXT_win32_to_host((const VkDebugMarkerMarkerInfoEXT32 *)UlongToPtr(params.pMarkerInfo), &pMarkerInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDebugMarkerBeginEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pMarkerInfo_host);
+}
+#else
 static void thunk32_vkCmdDebugMarkerBeginEXT(void *args)
 {
     struct
@@ -27347,7 +29259,17 @@ static void thunk32_vkCmdDebugMarkerBeginEXT(void *args)
     convert_VkDebugMarkerMarkerInfoEXT_win32_to_host((const VkDebugMarkerMarkerInfoEXT32 *)UlongToPtr(params->pMarkerInfo), &pMarkerInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDebugMarkerBeginEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pMarkerInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk64_vkCmdDebugMarkerEndEXT(void)
+{
+    struct vkCmdDebugMarkerEndEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDebugMarkerEndEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDebugMarkerEndEXT(void *args)
 {
@@ -27356,7 +29278,20 @@ static void thunk64_vkCmdDebugMarkerEndEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDebugMarkerEndEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk32_vkCmdDebugMarkerEndEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDebugMarkerEndEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer);
+}
+#else
 static void thunk32_vkCmdDebugMarkerEndEXT(void *args)
 {
     struct
@@ -27366,7 +29301,18 @@ static void thunk32_vkCmdDebugMarkerEndEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDebugMarkerEndEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdDebugMarkerInsertEXT(void)
+{
+    struct vkCmdDebugMarkerInsertEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pMarkerInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDebugMarkerInsertEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pMarkerInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDebugMarkerInsertEXT(void *args)
 {
@@ -27375,7 +29321,24 @@ static void thunk64_vkCmdDebugMarkerInsertEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDebugMarkerInsertEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pMarkerInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdDebugMarkerInsertEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pMarkerInfo;
+    } params;
+    VkDebugMarkerMarkerInfoEXT pMarkerInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pMarkerInfo);
+    convert_VkDebugMarkerMarkerInfoEXT_win32_to_host((const VkDebugMarkerMarkerInfoEXT32 *)UlongToPtr(params.pMarkerInfo), &pMarkerInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDebugMarkerInsertEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pMarkerInfo_host);
+}
+#else
 static void thunk32_vkCmdDebugMarkerInsertEXT(void *args)
 {
     struct
@@ -27388,7 +29351,20 @@ static void thunk32_vkCmdDebugMarkerInsertEXT(void *args)
     convert_VkDebugMarkerMarkerInfoEXT_win32_to_host((const VkDebugMarkerMarkerInfoEXT32 *)UlongToPtr(params->pMarkerInfo), &pMarkerInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDebugMarkerInsertEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pMarkerInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdDecompressMemoryIndirectCountNV(void)
+{
+    struct vkCmdDecompressMemoryIndirectCountNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.indirectCommandsAddress);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.indirectCommandsCountAddress);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDecompressMemoryIndirectCountNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.indirectCommandsAddress, params.indirectCommandsCountAddress, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDecompressMemoryIndirectCountNV(void *args)
 {
@@ -27397,7 +29373,26 @@ static void thunk64_vkCmdDecompressMemoryIndirectCountNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDecompressMemoryIndirectCountNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->indirectCommandsAddress, params->indirectCommandsCountAddress, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdDecompressMemoryIndirectCountNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkDeviceAddress DECLSPEC_ALIGN(8) indirectCommandsAddress;
+        VkDeviceAddress DECLSPEC_ALIGN(8) indirectCommandsCountAddress;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.indirectCommandsAddress);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.indirectCommandsCountAddress);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDecompressMemoryIndirectCountNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.indirectCommandsAddress, params.indirectCommandsCountAddress, params.stride);
+}
+#else
 static void thunk32_vkCmdDecompressMemoryIndirectCountNV(void *args)
 {
     struct
@@ -27410,7 +29405,19 @@ static void thunk32_vkCmdDecompressMemoryIndirectCountNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDecompressMemoryIndirectCountNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->indirectCommandsAddress, params->indirectCommandsCountAddress, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdDecompressMemoryNV(void)
+{
+    struct vkCmdDecompressMemoryNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.decompressRegionCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pDecompressMemoryRegions);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDecompressMemoryNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.decompressRegionCount, params.pDecompressMemoryRegions);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDecompressMemoryNV(void *args)
 {
@@ -27419,7 +29426,29 @@ static void thunk64_vkCmdDecompressMemoryNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDecompressMemoryNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->decompressRegionCount, params->pDecompressMemoryRegions);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdDecompressMemoryNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t decompressRegionCount;
+        PTR32 pDecompressMemoryRegions;
+    } params;
+    const VkDecompressMemoryRegionNV *pDecompressMemoryRegions_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.decompressRegionCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pDecompressMemoryRegions);
+    init_conversion_context(&ctx);
+    pDecompressMemoryRegions_host = convert_VkDecompressMemoryRegionNV_array_win32_to_host(&ctx, (const VkDecompressMemoryRegionNV32 *)UlongToPtr(params.pDecompressMemoryRegions), params.decompressRegionCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDecompressMemoryNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.decompressRegionCount, pDecompressMemoryRegions_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdDecompressMemoryNV(void *args)
 {
     struct
@@ -27436,7 +29465,20 @@ static void thunk32_vkCmdDecompressMemoryNV(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDecompressMemoryNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->decompressRegionCount, pDecompressMemoryRegions_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdDispatch(void)
+{
+    struct vkCmdDispatch_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDispatch(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDispatch(void *args)
 {
@@ -27445,7 +29487,26 @@ static void thunk64_vkCmdDispatch(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDispatch(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdDispatch(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t groupCountX;
+        uint32_t groupCountY;
+        uint32_t groupCountZ;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDispatch(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 static void thunk32_vkCmdDispatch(void *args)
 {
     struct
@@ -27458,7 +29519,23 @@ static void thunk32_vkCmdDispatch(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDispatch(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDispatchBase(void)
+{
+    struct vkCmdDispatchBase_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.baseGroupX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.baseGroupY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.baseGroupZ);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDispatchBase(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.baseGroupX, params.baseGroupY, params.baseGroupZ, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDispatchBase(void *args)
 {
@@ -27467,7 +29544,32 @@ static void thunk64_vkCmdDispatchBase(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDispatchBase(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->baseGroupX, params->baseGroupY, params->baseGroupZ, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDispatchBase(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t baseGroupX;
+        uint32_t baseGroupY;
+        uint32_t baseGroupZ;
+        uint32_t groupCountX;
+        uint32_t groupCountY;
+        uint32_t groupCountZ;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.baseGroupX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.baseGroupY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.baseGroupZ);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDispatchBase(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.baseGroupX, params.baseGroupY, params.baseGroupZ, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 static void thunk32_vkCmdDispatchBase(void *args)
 {
     struct
@@ -27483,7 +29585,23 @@ static void thunk32_vkCmdDispatchBase(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDispatchBase(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->baseGroupX, params->baseGroupY, params->baseGroupZ, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDispatchBaseKHR(void)
+{
+    struct vkCmdDispatchBaseKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.baseGroupX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.baseGroupY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.baseGroupZ);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDispatchBaseKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.baseGroupX, params.baseGroupY, params.baseGroupZ, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDispatchBaseKHR(void *args)
 {
@@ -27492,7 +29610,32 @@ static void thunk64_vkCmdDispatchBaseKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDispatchBaseKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->baseGroupX, params->baseGroupY, params->baseGroupZ, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDispatchBaseKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t baseGroupX;
+        uint32_t baseGroupY;
+        uint32_t baseGroupZ;
+        uint32_t groupCountX;
+        uint32_t groupCountY;
+        uint32_t groupCountZ;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.baseGroupX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.baseGroupY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.baseGroupZ);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDispatchBaseKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.baseGroupX, params.baseGroupY, params.baseGroupZ, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 static void thunk32_vkCmdDispatchBaseKHR(void *args)
 {
     struct
@@ -27508,7 +29651,19 @@ static void thunk32_vkCmdDispatchBaseKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDispatchBaseKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->baseGroupX, params->baseGroupY, params->baseGroupZ, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdDispatchIndirect(void)
+{
+    struct vkCmdDispatchIndirect_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDispatchIndirect(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDispatchIndirect(void *args)
 {
@@ -27517,7 +29672,24 @@ static void thunk64_vkCmdDispatchIndirect(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDispatchIndirect(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdDispatchIndirect(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDispatchIndirect(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset);
+}
+#else
 static void thunk32_vkCmdDispatchIndirect(void *args)
 {
     struct
@@ -27529,7 +29701,21 @@ static void thunk32_vkCmdDispatchIndirect(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDispatchIndirect(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdDraw(void)
+{
+    struct vkCmdDraw_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.vertexCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstVertex);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.firstInstance);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDraw(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.vertexCount, params.instanceCount, params.firstVertex, params.firstInstance);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDraw(void *args)
 {
@@ -27538,7 +29724,28 @@ static void thunk64_vkCmdDraw(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDraw(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->vertexCount, params->instanceCount, params->firstVertex, params->firstInstance);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdDraw(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t vertexCount;
+        uint32_t instanceCount;
+        uint32_t firstVertex;
+        uint32_t firstInstance;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.vertexCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstVertex);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.firstInstance);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDraw(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.vertexCount, params.instanceCount, params.firstVertex, params.firstInstance);
+}
+#else
 static void thunk32_vkCmdDraw(void *args)
 {
     struct
@@ -27552,7 +29759,22 @@ static void thunk32_vkCmdDraw(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDraw(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->vertexCount, params->instanceCount, params->firstVertex, params->firstInstance);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdDrawIndexed(void)
+{
+    struct vkCmdDrawIndexed_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.indexCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstIndex);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.vertexOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstInstance);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndexed(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.indexCount, params.instanceCount, params.firstIndex, params.vertexOffset, params.firstInstance);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndexed(void *args)
 {
@@ -27561,7 +29783,30 @@ static void thunk64_vkCmdDrawIndexed(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndexed(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->indexCount, params->instanceCount, params->firstIndex, params->vertexOffset, params->firstInstance);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdDrawIndexed(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t indexCount;
+        uint32_t instanceCount;
+        uint32_t firstIndex;
+        int32_t vertexOffset;
+        uint32_t firstInstance;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.indexCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstIndex);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.vertexOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstInstance);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndexed(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.indexCount, params.instanceCount, params.firstIndex, params.vertexOffset, params.firstInstance);
+}
+#else
 static void thunk32_vkCmdDrawIndexed(void *args)
 {
     struct
@@ -27576,7 +29821,21 @@ static void thunk32_vkCmdDrawIndexed(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndexed(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->indexCount, params->instanceCount, params->firstIndex, params->vertexOffset, params->firstInstance);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdDrawIndexedIndirect(void)
+{
+    struct vkCmdDrawIndexedIndirect_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirect(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndexedIndirect(void *args)
 {
@@ -27585,7 +29844,28 @@ static void thunk64_vkCmdDrawIndexedIndirect(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirect(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdDrawIndexedIndirect(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        uint32_t drawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirect(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawIndexedIndirect(void *args)
 {
     struct
@@ -27599,7 +29879,23 @@ static void thunk32_vkCmdDrawIndexedIndirect(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirect(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawIndexedIndirectCount(void)
+{
+    struct vkCmdDrawIndexedIndirectCount_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirectCount(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndexedIndirectCount(void *args)
 {
@@ -27608,7 +29904,32 @@ static void thunk64_vkCmdDrawIndexedIndirectCount(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirectCount(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawIndexedIndirectCount(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirectCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawIndexedIndirectCount(void *args)
 {
     struct
@@ -27624,7 +29945,23 @@ static void thunk32_vkCmdDrawIndexedIndirectCount(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirectCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawIndexedIndirectCountAMD(void)
+{
+    struct vkCmdDrawIndexedIndirectCountAMD_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirectCountAMD(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndexedIndirectCountAMD(void *args)
 {
@@ -27633,7 +29970,32 @@ static void thunk64_vkCmdDrawIndexedIndirectCountAMD(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirectCountAMD(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawIndexedIndirectCountAMD(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirectCountAMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawIndexedIndirectCountAMD(void *args)
 {
     struct
@@ -27649,7 +30011,23 @@ static void thunk32_vkCmdDrawIndexedIndirectCountAMD(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirectCountAMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawIndexedIndirectCountKHR(void)
+{
+    struct vkCmdDrawIndexedIndirectCountKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirectCountKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndexedIndirectCountKHR(void *args)
 {
@@ -27658,7 +30036,32 @@ static void thunk64_vkCmdDrawIndexedIndirectCountKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndexedIndirectCountKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawIndexedIndirectCountKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirectCountKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawIndexedIndirectCountKHR(void *args)
 {
     struct
@@ -27674,7 +30077,21 @@ static void thunk32_vkCmdDrawIndexedIndirectCountKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndexedIndirectCountKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdDrawIndirect(void)
+{
+    struct vkCmdDrawIndirect_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndirect(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndirect(void *args)
 {
@@ -27683,7 +30100,28 @@ static void thunk64_vkCmdDrawIndirect(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndirect(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdDrawIndirect(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        uint32_t drawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndirect(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawIndirect(void *args)
 {
     struct
@@ -27697,7 +30135,23 @@ static void thunk32_vkCmdDrawIndirect(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndirect(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawIndirectByteCountEXT(void)
+{
+    struct vkCmdDrawIndirectByteCountEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstInstance);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.counterBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.counterBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.counterOffset);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.vertexStride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndirectByteCountEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.instanceCount, params.firstInstance, params.counterBuffer, params.counterBufferOffset, params.counterOffset, params.vertexStride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndirectByteCountEXT(void *args)
 {
@@ -27706,7 +30160,32 @@ static void thunk64_vkCmdDrawIndirectByteCountEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndirectByteCountEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->instanceCount, params->firstInstance, params->counterBuffer, params->counterBufferOffset, params->counterOffset, params->vertexStride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawIndirectByteCountEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t instanceCount;
+        uint32_t firstInstance;
+        VkBuffer DECLSPEC_ALIGN(8) counterBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) counterBufferOffset;
+        uint32_t counterOffset;
+        uint32_t vertexStride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstInstance);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.counterBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.counterBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.counterOffset);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.vertexStride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndirectByteCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.instanceCount, params.firstInstance, params.counterBuffer, params.counterBufferOffset, params.counterOffset, params.vertexStride);
+}
+#else
 static void thunk32_vkCmdDrawIndirectByteCountEXT(void *args)
 {
     struct
@@ -27722,7 +30201,23 @@ static void thunk32_vkCmdDrawIndirectByteCountEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndirectByteCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->instanceCount, params->firstInstance, params->counterBuffer, params->counterBufferOffset, params->counterOffset, params->vertexStride);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawIndirectCount(void)
+{
+    struct vkCmdDrawIndirectCount_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndirectCount(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndirectCount(void *args)
 {
@@ -27731,7 +30226,32 @@ static void thunk64_vkCmdDrawIndirectCount(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndirectCount(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawIndirectCount(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndirectCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawIndirectCount(void *args)
 {
     struct
@@ -27747,16 +30267,57 @@ static void thunk32_vkCmdDrawIndirectCount(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndirectCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawIndirectCountAMD(void)
+{
+    struct vkCmdDrawIndirectCountAMD_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndirectCountAMD(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndirectCountAMD(void *args)
 {
     struct vkCmdDrawIndirectCountAMD_params *params = args;
 
-    wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndirectCountAMD(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
+    wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndirectCountAMD(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
+}
+#endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawIndirectCountAMD(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndirectCountAMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
 }
-#endif /* _WIN64 */
-
+#else
 static void thunk32_vkCmdDrawIndirectCountAMD(void *args)
 {
     struct
@@ -27772,7 +30333,23 @@ static void thunk32_vkCmdDrawIndirectCountAMD(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndirectCountAMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawIndirectCountKHR(void)
+{
+    struct vkCmdDrawIndirectCountKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawIndirectCountKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawIndirectCountKHR(void *args)
 {
@@ -27781,7 +30358,32 @@ static void thunk64_vkCmdDrawIndirectCountKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawIndirectCountKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawIndirectCountKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawIndirectCountKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawIndirectCountKHR(void *args)
 {
     struct
@@ -27797,7 +30399,20 @@ static void thunk32_vkCmdDrawIndirectCountKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawIndirectCountKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdDrawMeshTasksEXT(void)
+{
+    struct vkCmdDrawMeshTasksEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMeshTasksEXT(void *args)
 {
@@ -27806,7 +30421,26 @@ static void thunk64_vkCmdDrawMeshTasksEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdDrawMeshTasksEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t groupCountX;
+        uint32_t groupCountY;
+        uint32_t groupCountZ;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.groupCountX);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.groupCountY);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.groupCountZ);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.groupCountX, params.groupCountY, params.groupCountZ);
+}
+#else
 static void thunk32_vkCmdDrawMeshTasksEXT(void *args)
 {
     struct
@@ -27819,7 +30453,23 @@ static void thunk32_vkCmdDrawMeshTasksEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->groupCountX, params->groupCountY, params->groupCountZ);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawMeshTasksIndirectCountEXT(void)
+{
+    struct vkCmdDrawMeshTasksIndirectCountEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectCountEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMeshTasksIndirectCountEXT(void *args)
 {
@@ -27828,7 +30478,32 @@ static void thunk64_vkCmdDrawMeshTasksIndirectCountEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectCountEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawMeshTasksIndirectCountEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawMeshTasksIndirectCountEXT(void *args)
 {
     struct
@@ -27844,7 +30519,23 @@ static void thunk32_vkCmdDrawMeshTasksIndirectCountEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawMeshTasksIndirectCountNV(void)
+{
+    struct vkCmdDrawMeshTasksIndirectCountNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectCountNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMeshTasksIndirectCountNV(void *args)
 {
@@ -27853,7 +30544,32 @@ static void thunk64_vkCmdDrawMeshTasksIndirectCountNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectCountNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawMeshTasksIndirectCountNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        VkBuffer DECLSPEC_ALIGN(8) countBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) countBufferOffset;
+        uint32_t maxDrawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.countBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.countBufferOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.maxDrawCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectCountNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.countBuffer, params.countBufferOffset, params.maxDrawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawMeshTasksIndirectCountNV(void *args)
 {
     struct
@@ -27869,7 +30585,21 @@ static void thunk32_vkCmdDrawMeshTasksIndirectCountNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectCountNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->countBuffer, params->countBufferOffset, params->maxDrawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdDrawMeshTasksIndirectEXT(void)
+{
+    struct vkCmdDrawMeshTasksIndirectEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMeshTasksIndirectEXT(void *args)
 {
@@ -27878,7 +30608,28 @@ static void thunk64_vkCmdDrawMeshTasksIndirectEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdDrawMeshTasksIndirectEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        uint32_t drawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawMeshTasksIndirectEXT(void *args)
 {
     struct
@@ -27892,7 +30643,21 @@ static void thunk32_vkCmdDrawMeshTasksIndirectEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdDrawMeshTasksIndirectNV(void)
+{
+    struct vkCmdDrawMeshTasksIndirectNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMeshTasksIndirectNV(void *args)
 {
@@ -27901,7 +30666,28 @@ static void thunk64_vkCmdDrawMeshTasksIndirectNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksIndirectNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdDrawMeshTasksIndirectNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) buffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) offset;
+        uint32_t drawCount;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.buffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.buffer, params.offset, params.drawCount, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawMeshTasksIndirectNV(void *args)
 {
     struct
@@ -27915,7 +30701,19 @@ static void thunk32_vkCmdDrawMeshTasksIndirectNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksIndirectNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->buffer, params->offset, params->drawCount, params->stride);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdDrawMeshTasksNV(void)
+{
+    struct vkCmdDrawMeshTasksNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.taskCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstTask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.taskCount, params.firstTask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMeshTasksNV(void *args)
 {
@@ -27924,7 +30722,24 @@ static void thunk64_vkCmdDrawMeshTasksNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMeshTasksNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->taskCount, params->firstTask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdDrawMeshTasksNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t taskCount;
+        uint32_t firstTask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.taskCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstTask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.taskCount, params.firstTask);
+}
+#else
 static void thunk32_vkCmdDrawMeshTasksNV(void *args)
 {
     struct
@@ -27936,7 +30751,22 @@ static void thunk32_vkCmdDrawMeshTasksNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMeshTasksNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->taskCount, params->firstTask);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdDrawMultiEXT(void)
+{
+    struct vkCmdDrawMultiEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pVertexInfo);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.firstInstance);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMultiEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.drawCount, params.pVertexInfo, params.instanceCount, params.firstInstance, params.stride);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMultiEXT(void *args)
 {
@@ -27945,7 +30775,30 @@ static void thunk64_vkCmdDrawMultiEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMultiEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->drawCount, params->pVertexInfo, params->instanceCount, params->firstInstance, params->stride);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdDrawMultiEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t drawCount;
+        PTR32 pVertexInfo;
+        uint32_t instanceCount;
+        uint32_t firstInstance;
+        uint32_t stride;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pVertexInfo);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.firstInstance);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.stride);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMultiEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.drawCount, (const VkMultiDrawInfoEXT *)UlongToPtr(params.pVertexInfo), params.instanceCount, params.firstInstance, params.stride);
+}
+#else
 static void thunk32_vkCmdDrawMultiEXT(void *args)
 {
     struct
@@ -27960,7 +30813,23 @@ static void thunk32_vkCmdDrawMultiEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMultiEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->drawCount, (const VkMultiDrawInfoEXT *)UlongToPtr(params->pVertexInfo), params->instanceCount, params->firstInstance, params->stride);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdDrawMultiIndexedEXT(void)
+{
+    struct vkCmdDrawMultiIndexedEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pIndexInfo);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.firstInstance);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.stride);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pVertexOffset);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdDrawMultiIndexedEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.drawCount, params.pIndexInfo, params.instanceCount, params.firstInstance, params.stride, params.pVertexOffset);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdDrawMultiIndexedEXT(void *args)
 {
@@ -27969,7 +30838,32 @@ static void thunk64_vkCmdDrawMultiIndexedEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdDrawMultiIndexedEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->drawCount, params->pIndexInfo, params->instanceCount, params->firstInstance, params->stride, params->pVertexOffset);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdDrawMultiIndexedEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t drawCount;
+        PTR32 pIndexInfo;
+        uint32_t instanceCount;
+        uint32_t firstInstance;
+        uint32_t stride;
+        PTR32 pVertexOffset;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.drawCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pIndexInfo);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.instanceCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.firstInstance);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.stride);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pVertexOffset);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdDrawMultiIndexedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.drawCount, (const VkMultiDrawIndexedInfoEXT *)UlongToPtr(params.pIndexInfo), params.instanceCount, params.firstInstance, params.stride, (const int32_t *)UlongToPtr(params.pVertexOffset));
+}
+#else
 static void thunk32_vkCmdDrawMultiIndexedEXT(void *args)
 {
     struct
@@ -27985,7 +30879,17 @@ static void thunk32_vkCmdDrawMultiIndexedEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdDrawMultiIndexedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->drawCount, (const VkMultiDrawIndexedInfoEXT *)UlongToPtr(params->pIndexInfo), params->instanceCount, params->firstInstance, params->stride, (const int32_t *)UlongToPtr(params->pVertexOffset));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk64_vkCmdEndConditionalRenderingEXT(void)
+{
+    struct vkCmdEndConditionalRenderingEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndConditionalRenderingEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndConditionalRenderingEXT(void *args)
 {
@@ -27994,7 +30898,20 @@ static void thunk64_vkCmdEndConditionalRenderingEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndConditionalRenderingEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk32_vkCmdEndConditionalRenderingEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndConditionalRenderingEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer);
+}
+#else
 static void thunk32_vkCmdEndConditionalRenderingEXT(void *args)
 {
     struct
@@ -28004,7 +30921,17 @@ static void thunk32_vkCmdEndConditionalRenderingEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndConditionalRenderingEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk64_vkCmdEndDebugUtilsLabelEXT(void)
+{
+    struct vkCmdEndDebugUtilsLabelEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndDebugUtilsLabelEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndDebugUtilsLabelEXT(void *args)
 {
@@ -28013,7 +30940,20 @@ static void thunk64_vkCmdEndDebugUtilsLabelEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndDebugUtilsLabelEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk32_vkCmdEndDebugUtilsLabelEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndDebugUtilsLabelEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer);
+}
+#else
 static void thunk32_vkCmdEndDebugUtilsLabelEXT(void *args)
 {
     struct
@@ -28023,7 +30963,19 @@ static void thunk32_vkCmdEndDebugUtilsLabelEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndDebugUtilsLabelEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdEndQuery(void)
+{
+    struct vkCmdEndQuery_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndQuery(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.queryPool, params.query);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndQuery(void *args)
 {
@@ -28032,7 +30984,24 @@ static void thunk64_vkCmdEndQuery(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndQuery(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->queryPool, params->query);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdEndQuery(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t query;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndQuery(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.queryPool, params.query);
+}
+#else
 static void thunk32_vkCmdEndQuery(void *args)
 {
     struct
@@ -28044,7 +31013,20 @@ static void thunk32_vkCmdEndQuery(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndQuery(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->queryPool, params->query);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdEndQueryIndexedEXT(void)
+{
+    struct vkCmdEndQueryIndexedEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.index);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndQueryIndexedEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.queryPool, params.query, params.index);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndQueryIndexedEXT(void *args)
 {
@@ -28053,7 +31035,26 @@ static void thunk64_vkCmdEndQueryIndexedEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndQueryIndexedEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->queryPool, params->query, params->index);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdEndQueryIndexedEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t query;
+        uint32_t index;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.query);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.index);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndQueryIndexedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.queryPool, params.query, params.index);
+}
+#else
 static void thunk32_vkCmdEndQueryIndexedEXT(void *args)
 {
     struct
@@ -28066,7 +31067,17 @@ static void thunk32_vkCmdEndQueryIndexedEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndQueryIndexedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->queryPool, params->query, params->index);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk64_vkCmdEndRenderPass(void)
+{
+    struct vkCmdEndRenderPass_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndRenderPass(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndRenderPass(void *args)
 {
@@ -28075,7 +31086,20 @@ static void thunk64_vkCmdEndRenderPass(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndRenderPass(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk32_vkCmdEndRenderPass(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndRenderPass(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer);
+}
+#else
 static void thunk32_vkCmdEndRenderPass(void *args)
 {
     struct
@@ -28085,7 +31109,18 @@ static void thunk32_vkCmdEndRenderPass(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndRenderPass(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdEndRenderPass2(void)
+{
+    struct vkCmdEndRenderPass2_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pSubpassEndInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndRenderPass2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pSubpassEndInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndRenderPass2(void *args)
 {
@@ -28094,7 +31129,27 @@ static void thunk64_vkCmdEndRenderPass2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndRenderPass2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pSubpassEndInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdEndRenderPass2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pSubpassEndInfo;
+    } params;
+    VkSubpassEndInfo pSubpassEndInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pSubpassEndInfo);
+    init_conversion_context(&ctx);
+    convert_VkSubpassEndInfo_win32_to_host(&ctx, (const VkSubpassEndInfo32 *)UlongToPtr(params.pSubpassEndInfo), &pSubpassEndInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndRenderPass2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pSubpassEndInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdEndRenderPass2(void *args)
 {
     struct
@@ -28110,7 +31165,18 @@ static void thunk32_vkCmdEndRenderPass2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndRenderPass2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pSubpassEndInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdEndRenderPass2KHR(void)
+{
+    struct vkCmdEndRenderPass2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pSubpassEndInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndRenderPass2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pSubpassEndInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndRenderPass2KHR(void *args)
 {
@@ -28119,7 +31185,27 @@ static void thunk64_vkCmdEndRenderPass2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndRenderPass2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pSubpassEndInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdEndRenderPass2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pSubpassEndInfo;
+    } params;
+    VkSubpassEndInfo pSubpassEndInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pSubpassEndInfo);
+    init_conversion_context(&ctx);
+    convert_VkSubpassEndInfo_win32_to_host(&ctx, (const VkSubpassEndInfo32 *)UlongToPtr(params.pSubpassEndInfo), &pSubpassEndInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndRenderPass2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pSubpassEndInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdEndRenderPass2KHR(void *args)
 {
     struct
@@ -28135,7 +31221,17 @@ static void thunk32_vkCmdEndRenderPass2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndRenderPass2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pSubpassEndInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk64_vkCmdEndRendering(void)
+{
+    struct vkCmdEndRendering_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndRendering(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndRendering(void *args)
 {
@@ -28144,7 +31240,20 @@ static void thunk64_vkCmdEndRendering(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndRendering(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk32_vkCmdEndRendering(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndRendering(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer);
+}
+#else
 static void thunk32_vkCmdEndRendering(void *args)
 {
     struct
@@ -28154,7 +31263,17 @@ static void thunk32_vkCmdEndRendering(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndRendering(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk64_vkCmdEndRenderingKHR(void)
+{
+    struct vkCmdEndRenderingKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndRenderingKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndRenderingKHR(void *args)
 {
@@ -28163,7 +31282,20 @@ static void thunk64_vkCmdEndRenderingKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndRenderingKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk32_vkCmdEndRenderingKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndRenderingKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer);
+}
+#else
 static void thunk32_vkCmdEndRenderingKHR(void *args)
 {
     struct
@@ -28173,7 +31305,21 @@ static void thunk32_vkCmdEndRenderingKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndRenderingKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdEndTransformFeedbackEXT(void)
+{
+    struct vkCmdEndTransformFeedbackEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstCounterBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.counterBufferCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pCounterBuffers);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pCounterBufferOffsets);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdEndTransformFeedbackEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstCounterBuffer, params.counterBufferCount, params.pCounterBuffers, params.pCounterBufferOffsets);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdEndTransformFeedbackEXT(void *args)
 {
@@ -28182,7 +31328,28 @@ static void thunk64_vkCmdEndTransformFeedbackEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdEndTransformFeedbackEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstCounterBuffer, params->counterBufferCount, params->pCounterBuffers, params->pCounterBufferOffsets);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdEndTransformFeedbackEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstCounterBuffer;
+        uint32_t counterBufferCount;
+        PTR32 pCounterBuffers;
+        PTR32 pCounterBufferOffsets;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstCounterBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.counterBufferCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pCounterBuffers);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pCounterBufferOffsets);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdEndTransformFeedbackEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstCounterBuffer, params.counterBufferCount, (const VkBuffer *)UlongToPtr(params.pCounterBuffers), (const VkDeviceSize *)UlongToPtr(params.pCounterBufferOffsets));
+}
+#else
 static void thunk32_vkCmdEndTransformFeedbackEXT(void *args)
 {
     struct
@@ -28196,7 +31363,24 @@ static void thunk32_vkCmdEndTransformFeedbackEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdEndTransformFeedbackEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstCounterBuffer, params->counterBufferCount, (const VkBuffer *)UlongToPtr(params->pCounterBuffers), (const VkDeviceSize *)UlongToPtr(params->pCounterBufferOffsets));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdExecuteCommands(void)
+{
+    struct vkCmdExecuteCommands_params params;
+    const VkCommandBuffer *pCommandBuffers_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.commandBufferCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pCommandBuffers);
+    init_conversion_context(&ctx);
+    pCommandBuffers_host = convert_VkCommandBuffer_array_win64_to_host(&ctx, params.pCommandBuffers, params.commandBufferCount);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdExecuteCommands(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.commandBufferCount, pCommandBuffers_host);
+    free_conversion_context(&ctx);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdExecuteCommands(void *args)
 {
@@ -28210,7 +31394,29 @@ static void thunk64_vkCmdExecuteCommands(void *args)
     free_conversion_context(&ctx);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdExecuteCommands(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t commandBufferCount;
+        PTR32 pCommandBuffers;
+    } params;
+    const VkCommandBuffer *pCommandBuffers_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.commandBufferCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pCommandBuffers);
+    init_conversion_context(&ctx);
+    pCommandBuffers_host = convert_VkCommandBuffer_array_win32_to_host(&ctx, (const PTR32 *)UlongToPtr(params.pCommandBuffers), params.commandBufferCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdExecuteCommands(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.commandBufferCount, pCommandBuffers_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdExecuteCommands(void *args)
 {
     struct
@@ -28227,7 +31433,19 @@ static void thunk32_vkCmdExecuteCommands(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdExecuteCommands(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->commandBufferCount, pCommandBuffers_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdExecuteGeneratedCommandsNV(void)
+{
+    struct vkCmdExecuteGeneratedCommandsNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.isPreprocessed);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pGeneratedCommandsInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdExecuteGeneratedCommandsNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.isPreprocessed, params.pGeneratedCommandsInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdExecuteGeneratedCommandsNV(void *args)
 {
@@ -28236,7 +31454,29 @@ static void thunk64_vkCmdExecuteGeneratedCommandsNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdExecuteGeneratedCommandsNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->isPreprocessed, params->pGeneratedCommandsInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdExecuteGeneratedCommandsNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 isPreprocessed;
+        PTR32 pGeneratedCommandsInfo;
+    } params;
+    VkGeneratedCommandsInfoNV pGeneratedCommandsInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.isPreprocessed);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pGeneratedCommandsInfo);
+    init_conversion_context(&ctx);
+    convert_VkGeneratedCommandsInfoNV_win32_to_host(&ctx, (const VkGeneratedCommandsInfoNV32 *)UlongToPtr(params.pGeneratedCommandsInfo), &pGeneratedCommandsInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdExecuteGeneratedCommandsNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.isPreprocessed, &pGeneratedCommandsInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdExecuteGeneratedCommandsNV(void *args)
 {
     struct
@@ -28253,7 +31493,21 @@ static void thunk32_vkCmdExecuteGeneratedCommandsNV(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdExecuteGeneratedCommandsNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->isPreprocessed, &pGeneratedCommandsInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdFillBuffer(void)
+{
+    struct vkCmdFillBuffer_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.size);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.data);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdFillBuffer(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.dstBuffer, params.dstOffset, params.size, params.data);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdFillBuffer(void *args)
 {
@@ -28262,7 +31516,28 @@ static void thunk64_vkCmdFillBuffer(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdFillBuffer(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->dstBuffer, params->dstOffset, params->size, params->data);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdFillBuffer(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) dstBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) dstOffset;
+        VkDeviceSize DECLSPEC_ALIGN(8) size;
+        uint32_t data;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.size);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.data);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdFillBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.dstBuffer, params.dstOffset, params.size, params.data);
+}
+#else
 static void thunk32_vkCmdFillBuffer(void *args)
 {
     struct
@@ -28276,7 +31551,18 @@ static void thunk32_vkCmdFillBuffer(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdFillBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->dstBuffer, params->dstOffset, params->size, params->data);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdInsertDebugUtilsLabelEXT(void)
+{
+    struct vkCmdInsertDebugUtilsLabelEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pLabelInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdInsertDebugUtilsLabelEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pLabelInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdInsertDebugUtilsLabelEXT(void *args)
 {
@@ -28285,7 +31571,24 @@ static void thunk64_vkCmdInsertDebugUtilsLabelEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdInsertDebugUtilsLabelEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pLabelInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdInsertDebugUtilsLabelEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pLabelInfo;
+    } params;
+    VkDebugUtilsLabelEXT pLabelInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pLabelInfo);
+    convert_VkDebugUtilsLabelEXT_win32_to_host((const VkDebugUtilsLabelEXT32 *)UlongToPtr(params.pLabelInfo), &pLabelInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdInsertDebugUtilsLabelEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pLabelInfo_host);
+}
+#else
 static void thunk32_vkCmdInsertDebugUtilsLabelEXT(void *args)
 {
     struct
@@ -28298,7 +31601,18 @@ static void thunk32_vkCmdInsertDebugUtilsLabelEXT(void *args)
     convert_VkDebugUtilsLabelEXT_win32_to_host((const VkDebugUtilsLabelEXT32 *)UlongToPtr(params->pLabelInfo), &pLabelInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdInsertDebugUtilsLabelEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pLabelInfo_host);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdNextSubpass(void)
+{
+    struct vkCmdNextSubpass_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.contents);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdNextSubpass(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.contents);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdNextSubpass(void *args)
 {
@@ -28307,7 +31621,22 @@ static void thunk64_vkCmdNextSubpass(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdNextSubpass(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->contents);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdNextSubpass(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkSubpassContents contents;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.contents);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdNextSubpass(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.contents);
+}
+#else
 static void thunk32_vkCmdNextSubpass(void *args)
 {
     struct
@@ -28318,7 +31647,19 @@ static void thunk32_vkCmdNextSubpass(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdNextSubpass(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->contents);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdNextSubpass2(void)
+{
+    struct vkCmdNextSubpass2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pSubpassBeginInfo);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pSubpassEndInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdNextSubpass2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pSubpassBeginInfo, params.pSubpassEndInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdNextSubpass2(void *args)
 {
@@ -28327,7 +31668,31 @@ static void thunk64_vkCmdNextSubpass2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdNextSubpass2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pSubpassBeginInfo, params->pSubpassEndInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdNextSubpass2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pSubpassBeginInfo;
+        PTR32 pSubpassEndInfo;
+    } params;
+    VkSubpassBeginInfo pSubpassBeginInfo_host;
+    VkSubpassEndInfo pSubpassEndInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pSubpassBeginInfo);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pSubpassEndInfo);
+    init_conversion_context(&ctx);
+    convert_VkSubpassBeginInfo_win32_to_host((const VkSubpassBeginInfo32 *)UlongToPtr(params.pSubpassBeginInfo), &pSubpassBeginInfo_host);
+    convert_VkSubpassEndInfo_win32_to_host(&ctx, (const VkSubpassEndInfo32 *)UlongToPtr(params.pSubpassEndInfo), &pSubpassEndInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdNextSubpass2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pSubpassBeginInfo_host, &pSubpassEndInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdNextSubpass2(void *args)
 {
     struct
@@ -28346,7 +31711,19 @@ static void thunk32_vkCmdNextSubpass2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdNextSubpass2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pSubpassBeginInfo_host, &pSubpassEndInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdNextSubpass2KHR(void)
+{
+    struct vkCmdNextSubpass2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pSubpassBeginInfo);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pSubpassEndInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdNextSubpass2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pSubpassBeginInfo, params.pSubpassEndInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdNextSubpass2KHR(void *args)
 {
@@ -28355,7 +31732,31 @@ static void thunk64_vkCmdNextSubpass2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdNextSubpass2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pSubpassBeginInfo, params->pSubpassEndInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdNextSubpass2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pSubpassBeginInfo;
+        PTR32 pSubpassEndInfo;
+    } params;
+    VkSubpassBeginInfo pSubpassBeginInfo_host;
+    VkSubpassEndInfo pSubpassEndInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pSubpassBeginInfo);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pSubpassEndInfo);
+    init_conversion_context(&ctx);
+    convert_VkSubpassBeginInfo_win32_to_host((const VkSubpassBeginInfo32 *)UlongToPtr(params.pSubpassBeginInfo), &pSubpassBeginInfo_host);
+    convert_VkSubpassEndInfo_win32_to_host(&ctx, (const VkSubpassEndInfo32 *)UlongToPtr(params.pSubpassEndInfo), &pSubpassEndInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdNextSubpass2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pSubpassBeginInfo_host, &pSubpassEndInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdNextSubpass2KHR(void *args)
 {
     struct
@@ -28374,7 +31775,19 @@ static void thunk32_vkCmdNextSubpass2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdNextSubpass2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pSubpassBeginInfo_host, &pSubpassEndInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdOpticalFlowExecuteNV(void)
+{
+    struct vkCmdOpticalFlowExecuteNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.session);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pExecuteInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdOpticalFlowExecuteNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.session, params.pExecuteInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdOpticalFlowExecuteNV(void *args)
 {
@@ -28383,7 +31796,26 @@ static void thunk64_vkCmdOpticalFlowExecuteNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdOpticalFlowExecuteNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->session, params->pExecuteInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdOpticalFlowExecuteNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkOpticalFlowSessionNV DECLSPEC_ALIGN(8) session;
+        PTR32 pExecuteInfo;
+    } params;
+    VkOpticalFlowExecuteInfoNV pExecuteInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.session);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pExecuteInfo);
+    convert_VkOpticalFlowExecuteInfoNV_win32_to_host((const VkOpticalFlowExecuteInfoNV32 *)UlongToPtr(params.pExecuteInfo), &pExecuteInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdOpticalFlowExecuteNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.session, &pExecuteInfo_host);
+}
+#else
 static void thunk32_vkCmdOpticalFlowExecuteNV(void *args)
 {
     struct
@@ -28397,7 +31829,26 @@ static void thunk32_vkCmdOpticalFlowExecuteNV(void *args)
     convert_VkOpticalFlowExecuteInfoNV_win32_to_host((const VkOpticalFlowExecuteInfoNV32 *)UlongToPtr(params->pExecuteInfo), &pExecuteInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdOpticalFlowExecuteNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->session, &pExecuteInfo_host);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 10
+static void thunk64_vkCmdPipelineBarrier(void)
+{
+    struct vkCmdPipelineBarrier_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcStageMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstStageMask);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dependencyFlags);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.memoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.bufferMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(7, void *, params.pBufferMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(8, UINT_PTR, params.imageMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(9, void *, params.pImageMemoryBarriers);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdPipelineBarrier(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.srcStageMask, params.dstStageMask, params.dependencyFlags, params.memoryBarrierCount, params.pMemoryBarriers, params.bufferMemoryBarrierCount, params.pBufferMemoryBarriers, params.imageMemoryBarrierCount, params.pImageMemoryBarriers);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdPipelineBarrier(void *args)
 {
@@ -28406,7 +31857,47 @@ static void thunk64_vkCmdPipelineBarrier(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdPipelineBarrier(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->srcStageMask, params->dstStageMask, params->dependencyFlags, params->memoryBarrierCount, params->pMemoryBarriers, params->bufferMemoryBarrierCount, params->pBufferMemoryBarriers, params->imageMemoryBarrierCount, params->pImageMemoryBarriers);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 10
+static void thunk32_vkCmdPipelineBarrier(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineStageFlags srcStageMask;
+        VkPipelineStageFlags dstStageMask;
+        VkDependencyFlags dependencyFlags;
+        uint32_t memoryBarrierCount;
+        PTR32 pMemoryBarriers;
+        uint32_t bufferMemoryBarrierCount;
+        PTR32 pBufferMemoryBarriers;
+        uint32_t imageMemoryBarrierCount;
+        PTR32 pImageMemoryBarriers;
+    } params;
+    const VkMemoryBarrier *pMemoryBarriers_host;
+    const VkBufferMemoryBarrier *pBufferMemoryBarriers_host;
+    const VkImageMemoryBarrier *pImageMemoryBarriers_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcStageMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstStageMask);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dependencyFlags);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.memoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.bufferMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.pBufferMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(8, UINT_PTR, params.imageMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(9, UINT_PTR, params.pImageMemoryBarriers);
+    init_conversion_context(&ctx);
+    pMemoryBarriers_host = convert_VkMemoryBarrier_array_win32_to_host(&ctx, (const VkMemoryBarrier32 *)UlongToPtr(params.pMemoryBarriers), params.memoryBarrierCount);
+    pBufferMemoryBarriers_host = convert_VkBufferMemoryBarrier_array_win32_to_host(&ctx, (const VkBufferMemoryBarrier32 *)UlongToPtr(params.pBufferMemoryBarriers), params.bufferMemoryBarrierCount);
+    pImageMemoryBarriers_host = convert_VkImageMemoryBarrier_array_win32_to_host(&ctx, (const VkImageMemoryBarrier32 *)UlongToPtr(params.pImageMemoryBarriers), params.imageMemoryBarrierCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdPipelineBarrier(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.srcStageMask, params.dstStageMask, params.dependencyFlags, params.memoryBarrierCount, pMemoryBarriers_host, params.bufferMemoryBarrierCount, pBufferMemoryBarriers_host, params.imageMemoryBarrierCount, pImageMemoryBarriers_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdPipelineBarrier(void *args)
 {
     struct
@@ -28434,7 +31925,18 @@ static void thunk32_vkCmdPipelineBarrier(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdPipelineBarrier(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->srcStageMask, params->dstStageMask, params->dependencyFlags, params->memoryBarrierCount, pMemoryBarriers_host, params->bufferMemoryBarrierCount, pBufferMemoryBarriers_host, params->imageMemoryBarrierCount, pImageMemoryBarriers_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdPipelineBarrier2(void)
+{
+    struct vkCmdPipelineBarrier2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pDependencyInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdPipelineBarrier2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pDependencyInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdPipelineBarrier2(void *args)
 {
@@ -28443,7 +31945,27 @@ static void thunk64_vkCmdPipelineBarrier2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdPipelineBarrier2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pDependencyInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdPipelineBarrier2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pDependencyInfo;
+    } params;
+    VkDependencyInfo pDependencyInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pDependencyInfo);
+    init_conversion_context(&ctx);
+    convert_VkDependencyInfo_win32_to_host(&ctx, (const VkDependencyInfo32 *)UlongToPtr(params.pDependencyInfo), &pDependencyInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdPipelineBarrier2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pDependencyInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdPipelineBarrier2(void *args)
 {
     struct
@@ -28459,7 +31981,18 @@ static void thunk32_vkCmdPipelineBarrier2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdPipelineBarrier2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pDependencyInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdPipelineBarrier2KHR(void)
+{
+    struct vkCmdPipelineBarrier2KHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pDependencyInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdPipelineBarrier2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pDependencyInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdPipelineBarrier2KHR(void *args)
 {
@@ -28468,7 +32001,27 @@ static void thunk64_vkCmdPipelineBarrier2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdPipelineBarrier2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pDependencyInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdPipelineBarrier2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pDependencyInfo;
+    } params;
+    VkDependencyInfo pDependencyInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pDependencyInfo);
+    init_conversion_context(&ctx);
+    convert_VkDependencyInfo_win32_to_host(&ctx, (const VkDependencyInfo32 *)UlongToPtr(params.pDependencyInfo), &pDependencyInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdPipelineBarrier2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pDependencyInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdPipelineBarrier2KHR(void *args)
 {
     struct
@@ -28484,7 +32037,18 @@ static void thunk32_vkCmdPipelineBarrier2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdPipelineBarrier2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pDependencyInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdPreprocessGeneratedCommandsNV(void)
+{
+    struct vkCmdPreprocessGeneratedCommandsNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pGeneratedCommandsInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdPreprocessGeneratedCommandsNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pGeneratedCommandsInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdPreprocessGeneratedCommandsNV(void *args)
 {
@@ -28493,7 +32057,27 @@ static void thunk64_vkCmdPreprocessGeneratedCommandsNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdPreprocessGeneratedCommandsNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pGeneratedCommandsInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdPreprocessGeneratedCommandsNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pGeneratedCommandsInfo;
+    } params;
+    VkGeneratedCommandsInfoNV pGeneratedCommandsInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pGeneratedCommandsInfo);
+    init_conversion_context(&ctx);
+    convert_VkGeneratedCommandsInfoNV_win32_to_host(&ctx, (const VkGeneratedCommandsInfoNV32 *)UlongToPtr(params.pGeneratedCommandsInfo), &pGeneratedCommandsInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdPreprocessGeneratedCommandsNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pGeneratedCommandsInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdPreprocessGeneratedCommandsNV(void *args)
 {
     struct
@@ -28509,7 +32093,22 @@ static void thunk32_vkCmdPreprocessGeneratedCommandsNV(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdPreprocessGeneratedCommandsNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pGeneratedCommandsInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdPushConstants(void)
+{
+    struct vkCmdPushConstants_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageFlags);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.size);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pValues);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdPushConstants(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.layout, params.stageFlags, params.offset, params.size, params.pValues);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdPushConstants(void *args)
 {
@@ -28518,7 +32117,30 @@ static void thunk64_vkCmdPushConstants(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdPushConstants(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->layout, params->stageFlags, params->offset, params->size, params->pValues);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdPushConstants(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineLayout DECLSPEC_ALIGN(8) layout;
+        VkShaderStageFlags stageFlags;
+        uint32_t offset;
+        uint32_t size;
+        PTR32 pValues;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageFlags);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.offset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.size);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pValues);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdPushConstants(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.layout, params.stageFlags, params.offset, params.size, (const void *)UlongToPtr(params.pValues));
+}
+#else
 static void thunk32_vkCmdPushConstants(void *args)
 {
     struct
@@ -28533,7 +32155,22 @@ static void thunk32_vkCmdPushConstants(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdPushConstants(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->layout, params->stageFlags, params->offset, params->size, (const void *)UlongToPtr(params->pValues));
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdPushDescriptorSetKHR(void)
+{
+    struct vkCmdPushDescriptorSetKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.set);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.descriptorWriteCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pDescriptorWrites);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdPushDescriptorSetKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineBindPoint, params.layout, params.set, params.descriptorWriteCount, params.pDescriptorWrites);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdPushDescriptorSetKHR(void *args)
 {
@@ -28542,7 +32179,35 @@ static void thunk64_vkCmdPushDescriptorSetKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdPushDescriptorSetKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineBindPoint, params->layout, params->set, params->descriptorWriteCount, params->pDescriptorWrites);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdPushDescriptorSetKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineBindPoint pipelineBindPoint;
+        VkPipelineLayout DECLSPEC_ALIGN(8) layout;
+        uint32_t set;
+        uint32_t descriptorWriteCount;
+        PTR32 pDescriptorWrites;
+    } params;
+    const VkWriteDescriptorSet *pDescriptorWrites_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.set);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.descriptorWriteCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pDescriptorWrites);
+    init_conversion_context(&ctx);
+    pDescriptorWrites_host = convert_VkWriteDescriptorSet_array_win32_to_host(&ctx, (const VkWriteDescriptorSet32 *)UlongToPtr(params.pDescriptorWrites), params.descriptorWriteCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdPushDescriptorSetKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineBindPoint, params.layout, params.set, params.descriptorWriteCount, pDescriptorWrites_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdPushDescriptorSetKHR(void *args)
 {
     struct
@@ -28562,7 +32227,21 @@ static void thunk32_vkCmdPushDescriptorSetKHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdPushDescriptorSetKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineBindPoint, params->layout, params->set, params->descriptorWriteCount, pDescriptorWrites_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdPushDescriptorSetWithTemplateKHR(void)
+{
+    struct vkCmdPushDescriptorSetWithTemplateKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.descriptorUpdateTemplate);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.set);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pData);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdPushDescriptorSetWithTemplateKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.descriptorUpdateTemplate, params.layout, params.set, params.pData);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdPushDescriptorSetWithTemplateKHR(void *args)
 {
@@ -28571,7 +32250,28 @@ static void thunk64_vkCmdPushDescriptorSetWithTemplateKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdPushDescriptorSetWithTemplateKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->descriptorUpdateTemplate, params->layout, params->set, params->pData);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdPushDescriptorSetWithTemplateKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkDescriptorUpdateTemplate DECLSPEC_ALIGN(8) descriptorUpdateTemplate;
+        VkPipelineLayout DECLSPEC_ALIGN(8) layout;
+        uint32_t set;
+        PTR32 pData;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.descriptorUpdateTemplate);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.set);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pData);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdPushDescriptorSetWithTemplateKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.descriptorUpdateTemplate, params.layout, params.set, (const void *)UlongToPtr(params.pData));
+}
+#else
 static void thunk32_vkCmdPushDescriptorSetWithTemplateKHR(void *args)
 {
     struct
@@ -28585,7 +32285,19 @@ static void thunk32_vkCmdPushDescriptorSetWithTemplateKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdPushDescriptorSetWithTemplateKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->descriptorUpdateTemplate, params->layout, params->set, (const void *)UlongToPtr(params->pData));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdResetEvent(void)
+{
+    struct vkCmdResetEvent_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdResetEvent(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.event, params.stageMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdResetEvent(void *args)
 {
@@ -28594,7 +32306,24 @@ static void thunk64_vkCmdResetEvent(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdResetEvent(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->event, params->stageMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdResetEvent(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkEvent DECLSPEC_ALIGN(8) event;
+        VkPipelineStageFlags stageMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdResetEvent(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.event, params.stageMask);
+}
+#else
 static void thunk32_vkCmdResetEvent(void *args)
 {
     struct
@@ -28606,7 +32335,19 @@ static void thunk32_vkCmdResetEvent(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdResetEvent(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->event, params->stageMask);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdResetEvent2(void)
+{
+    struct vkCmdResetEvent2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdResetEvent2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.event, params.stageMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdResetEvent2(void *args)
 {
@@ -28615,7 +32356,24 @@ static void thunk64_vkCmdResetEvent2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdResetEvent2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->event, params->stageMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdResetEvent2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkEvent DECLSPEC_ALIGN(8) event;
+        VkPipelineStageFlags2 DECLSPEC_ALIGN(8) stageMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdResetEvent2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.event, params.stageMask);
+}
+#else
 static void thunk32_vkCmdResetEvent2(void *args)
 {
     struct
@@ -28627,7 +32385,19 @@ static void thunk32_vkCmdResetEvent2(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdResetEvent2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->event, params->stageMask);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdResetEvent2KHR(void)
+{
+    struct vkCmdResetEvent2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdResetEvent2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.event, params.stageMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdResetEvent2KHR(void *args)
 {
@@ -28636,7 +32406,24 @@ static void thunk64_vkCmdResetEvent2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdResetEvent2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->event, params->stageMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdResetEvent2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkEvent DECLSPEC_ALIGN(8) event;
+        VkPipelineStageFlags2 DECLSPEC_ALIGN(8) stageMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdResetEvent2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.event, params.stageMask);
+}
+#else
 static void thunk32_vkCmdResetEvent2KHR(void *args)
 {
     struct
@@ -28648,7 +32435,20 @@ static void thunk32_vkCmdResetEvent2KHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdResetEvent2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->event, params->stageMask);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdResetQueryPool(void)
+{
+    struct vkCmdResetQueryPool_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstQuery);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryCount);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdResetQueryPool(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.queryPool, params.firstQuery, params.queryCount);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdResetQueryPool(void *args)
 {
@@ -28657,7 +32457,26 @@ static void thunk64_vkCmdResetQueryPool(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdResetQueryPool(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->queryPool, params->firstQuery, params->queryCount);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdResetQueryPool(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t firstQuery;
+        uint32_t queryCount;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.firstQuery);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdResetQueryPool(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.queryPool, params.firstQuery, params.queryCount);
+}
+#else
 static void thunk32_vkCmdResetQueryPool(void *args)
 {
     struct
@@ -28670,7 +32489,23 @@ static void thunk32_vkCmdResetQueryPool(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdResetQueryPool(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->queryPool, params->firstQuery, params->queryCount);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdResolveImage(void)
+{
+    struct vkCmdResolveImage_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pRegions);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdResolveImage(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.srcImage, params.srcImageLayout, params.dstImage, params.dstImageLayout, params.regionCount, params.pRegions);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdResolveImage(void *args)
 {
@@ -28679,7 +32514,32 @@ static void thunk64_vkCmdResolveImage(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdResolveImage(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->srcImage, params->srcImageLayout, params->dstImage, params->dstImageLayout, params->regionCount, params->pRegions);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdResolveImage(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkImage DECLSPEC_ALIGN(8) srcImage;
+        VkImageLayout srcImageLayout;
+        VkImage DECLSPEC_ALIGN(8) dstImage;
+        VkImageLayout dstImageLayout;
+        uint32_t regionCount;
+        PTR32 pRegions;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.srcImage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.srcImageLayout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstImage);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstImageLayout);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.regionCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pRegions);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdResolveImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.srcImage, params.srcImageLayout, params.dstImage, params.dstImageLayout, params.regionCount, (const VkImageResolve *)UlongToPtr(params.pRegions));
+}
+#else
 static void thunk32_vkCmdResolveImage(void *args)
 {
     struct
@@ -28695,7 +32555,18 @@ static void thunk32_vkCmdResolveImage(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdResolveImage(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->srcImage, params->srcImageLayout, params->dstImage, params->dstImageLayout, params->regionCount, (const VkImageResolve *)UlongToPtr(params->pRegions));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdResolveImage2(void)
+{
+    struct vkCmdResolveImage2_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pResolveImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdResolveImage2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pResolveImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdResolveImage2(void *args)
 {
@@ -28704,7 +32575,27 @@ static void thunk64_vkCmdResolveImage2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdResolveImage2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pResolveImageInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdResolveImage2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pResolveImageInfo;
+    } params;
+    VkResolveImageInfo2 pResolveImageInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pResolveImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkResolveImageInfo2_win32_to_host(&ctx, (const VkResolveImageInfo232 *)UlongToPtr(params.pResolveImageInfo), &pResolveImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdResolveImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pResolveImageInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdResolveImage2(void *args)
 {
     struct
@@ -28720,7 +32611,18 @@ static void thunk32_vkCmdResolveImage2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdResolveImage2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pResolveImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdResolveImage2KHR(void)
+{
+    struct vkCmdResolveImage2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pResolveImageInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdResolveImage2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pResolveImageInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdResolveImage2KHR(void *args)
 {
@@ -28729,7 +32631,27 @@ static void thunk64_vkCmdResolveImage2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdResolveImage2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pResolveImageInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdResolveImage2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pResolveImageInfo;
+    } params;
+    VkResolveImageInfo2 pResolveImageInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pResolveImageInfo);
+    init_conversion_context(&ctx);
+    convert_VkResolveImageInfo2_win32_to_host(&ctx, (const VkResolveImageInfo232 *)UlongToPtr(params.pResolveImageInfo), &pResolveImageInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdResolveImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pResolveImageInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdResolveImage2KHR(void *args)
 {
     struct
@@ -28745,7 +32667,18 @@ static void thunk32_vkCmdResolveImage2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdResolveImage2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pResolveImageInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetAlphaToCoverageEnableEXT(void)
+{
+    struct vkCmdSetAlphaToCoverageEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.alphaToCoverageEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetAlphaToCoverageEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.alphaToCoverageEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetAlphaToCoverageEnableEXT(void *args)
 {
@@ -28754,7 +32687,22 @@ static void thunk64_vkCmdSetAlphaToCoverageEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetAlphaToCoverageEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->alphaToCoverageEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetAlphaToCoverageEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 alphaToCoverageEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.alphaToCoverageEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetAlphaToCoverageEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.alphaToCoverageEnable);
+}
+#else
 static void thunk32_vkCmdSetAlphaToCoverageEnableEXT(void *args)
 {
     struct
@@ -28765,7 +32713,18 @@ static void thunk32_vkCmdSetAlphaToCoverageEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetAlphaToCoverageEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->alphaToCoverageEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetAlphaToOneEnableEXT(void)
+{
+    struct vkCmdSetAlphaToOneEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.alphaToOneEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetAlphaToOneEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.alphaToOneEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetAlphaToOneEnableEXT(void *args)
 {
@@ -28774,7 +32733,22 @@ static void thunk64_vkCmdSetAlphaToOneEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetAlphaToOneEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->alphaToOneEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetAlphaToOneEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 alphaToOneEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.alphaToOneEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetAlphaToOneEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.alphaToOneEnable);
+}
+#else
 static void thunk32_vkCmdSetAlphaToOneEnableEXT(void *args)
 {
     struct
@@ -28785,6 +32759,7 @@ static void thunk32_vkCmdSetAlphaToOneEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetAlphaToOneEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->alphaToOneEnable);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static void thunk64_vkCmdSetBlendConstants(void *args)
@@ -28806,6 +32781,16 @@ static void thunk32_vkCmdSetBlendConstants(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetBlendConstants(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, (const float *)UlongToPtr(params->blendConstants));
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCheckpointNV(void)
+{
+    struct vkCmdSetCheckpointNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pCheckpointMarker);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCheckpointNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pCheckpointMarker);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCheckpointNV(void *args)
 {
@@ -28814,7 +32799,22 @@ static void thunk64_vkCmdSetCheckpointNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCheckpointNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pCheckpointMarker);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCheckpointNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pCheckpointMarker;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pCheckpointMarker);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCheckpointNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, (const void *)UlongToPtr(params.pCheckpointMarker));
+}
+#else
 static void thunk32_vkCmdSetCheckpointNV(void *args)
 {
     struct
@@ -28825,7 +32825,20 @@ static void thunk32_vkCmdSetCheckpointNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCheckpointNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, (const void *)UlongToPtr(params->pCheckpointMarker));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetCoarseSampleOrderNV(void)
+{
+    struct vkCmdSetCoarseSampleOrderNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.sampleOrderType);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.customSampleOrderCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pCustomSampleOrders);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCoarseSampleOrderNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.sampleOrderType, params.customSampleOrderCount, params.pCustomSampleOrders);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCoarseSampleOrderNV(void *args)
 {
@@ -28834,7 +32847,31 @@ static void thunk64_vkCmdSetCoarseSampleOrderNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCoarseSampleOrderNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->sampleOrderType, params->customSampleOrderCount, params->pCustomSampleOrders);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetCoarseSampleOrderNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkCoarseSampleOrderTypeNV sampleOrderType;
+        uint32_t customSampleOrderCount;
+        PTR32 pCustomSampleOrders;
+    } params;
+    const VkCoarseSampleOrderCustomNV *pCustomSampleOrders_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.sampleOrderType);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.customSampleOrderCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pCustomSampleOrders);
+    init_conversion_context(&ctx);
+    pCustomSampleOrders_host = convert_VkCoarseSampleOrderCustomNV_array_win32_to_host(&ctx, (const VkCoarseSampleOrderCustomNV32 *)UlongToPtr(params.pCustomSampleOrders), params.customSampleOrderCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCoarseSampleOrderNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.sampleOrderType, params.customSampleOrderCount, pCustomSampleOrders_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdSetCoarseSampleOrderNV(void *args)
 {
     struct
@@ -28852,7 +32889,20 @@ static void thunk32_vkCmdSetCoarseSampleOrderNV(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCoarseSampleOrderNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->sampleOrderType, params->customSampleOrderCount, pCustomSampleOrders_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetColorBlendAdvancedEXT(void)
+{
+    struct vkCmdSetColorBlendAdvancedEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pColorBlendAdvanced);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetColorBlendAdvancedEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstAttachment, params.attachmentCount, params.pColorBlendAdvanced);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetColorBlendAdvancedEXT(void *args)
 {
@@ -28861,7 +32911,26 @@ static void thunk64_vkCmdSetColorBlendAdvancedEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetColorBlendAdvancedEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstAttachment, params->attachmentCount, params->pColorBlendAdvanced);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetColorBlendAdvancedEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstAttachment;
+        uint32_t attachmentCount;
+        PTR32 pColorBlendAdvanced;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pColorBlendAdvanced);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetColorBlendAdvancedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstAttachment, params.attachmentCount, (const VkColorBlendAdvancedEXT *)UlongToPtr(params.pColorBlendAdvanced));
+}
+#else
 static void thunk32_vkCmdSetColorBlendAdvancedEXT(void *args)
 {
     struct
@@ -28874,7 +32943,20 @@ static void thunk32_vkCmdSetColorBlendAdvancedEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetColorBlendAdvancedEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstAttachment, params->attachmentCount, (const VkColorBlendAdvancedEXT *)UlongToPtr(params->pColorBlendAdvanced));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetColorBlendEnableEXT(void)
+{
+    struct vkCmdSetColorBlendEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pColorBlendEnables);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetColorBlendEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstAttachment, params.attachmentCount, params.pColorBlendEnables);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetColorBlendEnableEXT(void *args)
 {
@@ -28883,7 +32965,26 @@ static void thunk64_vkCmdSetColorBlendEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetColorBlendEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstAttachment, params->attachmentCount, params->pColorBlendEnables);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetColorBlendEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstAttachment;
+        uint32_t attachmentCount;
+        PTR32 pColorBlendEnables;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pColorBlendEnables);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetColorBlendEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstAttachment, params.attachmentCount, (const VkBool32 *)UlongToPtr(params.pColorBlendEnables));
+}
+#else
 static void thunk32_vkCmdSetColorBlendEnableEXT(void *args)
 {
     struct
@@ -28896,7 +32997,20 @@ static void thunk32_vkCmdSetColorBlendEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetColorBlendEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstAttachment, params->attachmentCount, (const VkBool32 *)UlongToPtr(params->pColorBlendEnables));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetColorBlendEquationEXT(void)
+{
+    struct vkCmdSetColorBlendEquationEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pColorBlendEquations);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetColorBlendEquationEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstAttachment, params.attachmentCount, params.pColorBlendEquations);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetColorBlendEquationEXT(void *args)
 {
@@ -28905,7 +33019,26 @@ static void thunk64_vkCmdSetColorBlendEquationEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetColorBlendEquationEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstAttachment, params->attachmentCount, params->pColorBlendEquations);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetColorBlendEquationEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstAttachment;
+        uint32_t attachmentCount;
+        PTR32 pColorBlendEquations;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pColorBlendEquations);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetColorBlendEquationEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstAttachment, params.attachmentCount, (const VkColorBlendEquationEXT *)UlongToPtr(params.pColorBlendEquations));
+}
+#else
 static void thunk32_vkCmdSetColorBlendEquationEXT(void *args)
 {
     struct
@@ -28918,7 +33051,19 @@ static void thunk32_vkCmdSetColorBlendEquationEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetColorBlendEquationEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstAttachment, params->attachmentCount, (const VkColorBlendEquationEXT *)UlongToPtr(params->pColorBlendEquations));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetColorWriteEnableEXT(void)
+{
+    struct vkCmdSetColorWriteEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pColorWriteEnables);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetColorWriteEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.attachmentCount, params.pColorWriteEnables);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetColorWriteEnableEXT(void *args)
 {
@@ -28927,7 +33072,24 @@ static void thunk64_vkCmdSetColorWriteEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetColorWriteEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->attachmentCount, params->pColorWriteEnables);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetColorWriteEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t attachmentCount;
+        PTR32 pColorWriteEnables;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pColorWriteEnables);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetColorWriteEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.attachmentCount, (const VkBool32 *)UlongToPtr(params.pColorWriteEnables));
+}
+#else
 static void thunk32_vkCmdSetColorWriteEnableEXT(void *args)
 {
     struct
@@ -28939,7 +33101,20 @@ static void thunk32_vkCmdSetColorWriteEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetColorWriteEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->attachmentCount, (const VkBool32 *)UlongToPtr(params->pColorWriteEnables));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetColorWriteMaskEXT(void)
+{
+    struct vkCmdSetColorWriteMaskEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pColorWriteMasks);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetColorWriteMaskEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstAttachment, params.attachmentCount, params.pColorWriteMasks);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetColorWriteMaskEXT(void *args)
 {
@@ -28948,7 +33123,26 @@ static void thunk64_vkCmdSetColorWriteMaskEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetColorWriteMaskEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstAttachment, params->attachmentCount, params->pColorWriteMasks);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetColorWriteMaskEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstAttachment;
+        uint32_t attachmentCount;
+        PTR32 pColorWriteMasks;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstAttachment);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.attachmentCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pColorWriteMasks);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetColorWriteMaskEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstAttachment, params.attachmentCount, (const VkColorComponentFlags *)UlongToPtr(params.pColorWriteMasks));
+}
+#else
 static void thunk32_vkCmdSetColorWriteMaskEXT(void *args)
 {
     struct
@@ -28961,7 +33155,18 @@ static void thunk32_vkCmdSetColorWriteMaskEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetColorWriteMaskEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstAttachment, params->attachmentCount, (const VkColorComponentFlags *)UlongToPtr(params->pColorWriteMasks));
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetConservativeRasterizationModeEXT(void)
+{
+    struct vkCmdSetConservativeRasterizationModeEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.conservativeRasterizationMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetConservativeRasterizationModeEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.conservativeRasterizationMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetConservativeRasterizationModeEXT(void *args)
 {
@@ -28970,7 +33175,22 @@ static void thunk64_vkCmdSetConservativeRasterizationModeEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetConservativeRasterizationModeEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->conservativeRasterizationMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetConservativeRasterizationModeEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkConservativeRasterizationModeEXT conservativeRasterizationMode;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.conservativeRasterizationMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetConservativeRasterizationModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.conservativeRasterizationMode);
+}
+#else
 static void thunk32_vkCmdSetConservativeRasterizationModeEXT(void *args)
 {
     struct
@@ -28981,7 +33201,18 @@ static void thunk32_vkCmdSetConservativeRasterizationModeEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetConservativeRasterizationModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->conservativeRasterizationMode);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCoverageModulationModeNV(void)
+{
+    struct vkCmdSetCoverageModulationModeNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageModulationMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCoverageModulationModeNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.coverageModulationMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCoverageModulationModeNV(void *args)
 {
@@ -28990,7 +33221,22 @@ static void thunk64_vkCmdSetCoverageModulationModeNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCoverageModulationModeNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->coverageModulationMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCoverageModulationModeNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkCoverageModulationModeNV coverageModulationMode;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageModulationMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCoverageModulationModeNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.coverageModulationMode);
+}
+#else
 static void thunk32_vkCmdSetCoverageModulationModeNV(void *args)
 {
     struct
@@ -29001,7 +33247,18 @@ static void thunk32_vkCmdSetCoverageModulationModeNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCoverageModulationModeNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->coverageModulationMode);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCoverageModulationTableEnableNV(void)
+{
+    struct vkCmdSetCoverageModulationTableEnableNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageModulationTableEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCoverageModulationTableEnableNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.coverageModulationTableEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCoverageModulationTableEnableNV(void *args)
 {
@@ -29010,7 +33267,22 @@ static void thunk64_vkCmdSetCoverageModulationTableEnableNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCoverageModulationTableEnableNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->coverageModulationTableEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCoverageModulationTableEnableNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 coverageModulationTableEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageModulationTableEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCoverageModulationTableEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.coverageModulationTableEnable);
+}
+#else
 static void thunk32_vkCmdSetCoverageModulationTableEnableNV(void *args)
 {
     struct
@@ -29021,6 +33293,7 @@ static void thunk32_vkCmdSetCoverageModulationTableEnableNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCoverageModulationTableEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->coverageModulationTableEnable);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static void thunk64_vkCmdSetCoverageModulationTableNV(void *args)
@@ -29043,6 +33316,16 @@ static void thunk32_vkCmdSetCoverageModulationTableNV(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCoverageModulationTableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->coverageModulationTableCount, (const float *)UlongToPtr(params->pCoverageModulationTable));
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCoverageReductionModeNV(void)
+{
+    struct vkCmdSetCoverageReductionModeNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageReductionMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCoverageReductionModeNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.coverageReductionMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCoverageReductionModeNV(void *args)
 {
@@ -29051,7 +33334,22 @@ static void thunk64_vkCmdSetCoverageReductionModeNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCoverageReductionModeNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->coverageReductionMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCoverageReductionModeNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkCoverageReductionModeNV coverageReductionMode;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageReductionMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCoverageReductionModeNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.coverageReductionMode);
+}
+#else
 static void thunk32_vkCmdSetCoverageReductionModeNV(void *args)
 {
     struct
@@ -29062,7 +33360,18 @@ static void thunk32_vkCmdSetCoverageReductionModeNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCoverageReductionModeNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->coverageReductionMode);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCoverageToColorEnableNV(void)
+{
+    struct vkCmdSetCoverageToColorEnableNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageToColorEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCoverageToColorEnableNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.coverageToColorEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCoverageToColorEnableNV(void *args)
 {
@@ -29071,7 +33380,22 @@ static void thunk64_vkCmdSetCoverageToColorEnableNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCoverageToColorEnableNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->coverageToColorEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCoverageToColorEnableNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 coverageToColorEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageToColorEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCoverageToColorEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.coverageToColorEnable);
+}
+#else
 static void thunk32_vkCmdSetCoverageToColorEnableNV(void *args)
 {
     struct
@@ -29082,7 +33406,18 @@ static void thunk32_vkCmdSetCoverageToColorEnableNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCoverageToColorEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->coverageToColorEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCoverageToColorLocationNV(void)
+{
+    struct vkCmdSetCoverageToColorLocationNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageToColorLocation);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCoverageToColorLocationNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.coverageToColorLocation);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCoverageToColorLocationNV(void *args)
 {
@@ -29091,7 +33426,22 @@ static void thunk64_vkCmdSetCoverageToColorLocationNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCoverageToColorLocationNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->coverageToColorLocation);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCoverageToColorLocationNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t coverageToColorLocation;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.coverageToColorLocation);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCoverageToColorLocationNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.coverageToColorLocation);
+}
+#else
 static void thunk32_vkCmdSetCoverageToColorLocationNV(void *args)
 {
     struct
@@ -29102,7 +33452,18 @@ static void thunk32_vkCmdSetCoverageToColorLocationNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCoverageToColorLocationNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->coverageToColorLocation);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCullMode(void)
+{
+    struct vkCmdSetCullMode_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.cullMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCullMode(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.cullMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCullMode(void *args)
 {
@@ -29111,7 +33472,22 @@ static void thunk64_vkCmdSetCullMode(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCullMode(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->cullMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCullMode(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkCullModeFlags cullMode;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.cullMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCullMode(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.cullMode);
+}
+#else
 static void thunk32_vkCmdSetCullMode(void *args)
 {
     struct
@@ -29122,7 +33498,18 @@ static void thunk32_vkCmdSetCullMode(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCullMode(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->cullMode);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetCullModeEXT(void)
+{
+    struct vkCmdSetCullModeEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.cullMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetCullModeEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.cullMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetCullModeEXT(void *args)
 {
@@ -29131,7 +33518,22 @@ static void thunk64_vkCmdSetCullModeEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetCullModeEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->cullMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetCullModeEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkCullModeFlags cullMode;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.cullMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetCullModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.cullMode);
+}
+#else
 static void thunk32_vkCmdSetCullModeEXT(void *args)
 {
     struct
@@ -29142,6 +33544,7 @@ static void thunk32_vkCmdSetCullModeEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetCullModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->cullMode);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthBias(void *args)
@@ -29165,6 +33568,16 @@ static void thunk32_vkCmdSetDepthBias(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthBias(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthBiasConstantFactor, params->depthBiasClamp, params->depthBiasSlopeFactor);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthBiasEnable(void)
+{
+    struct vkCmdSetDepthBiasEnable_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBiasEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthBiasEnable(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthBiasEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthBiasEnable(void *args)
 {
@@ -29173,7 +33586,22 @@ static void thunk64_vkCmdSetDepthBiasEnable(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthBiasEnable(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthBiasEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthBiasEnable(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthBiasEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBiasEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthBiasEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthBiasEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthBiasEnable(void *args)
 {
     struct
@@ -29184,7 +33612,18 @@ static void thunk32_vkCmdSetDepthBiasEnable(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthBiasEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthBiasEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthBiasEnableEXT(void)
+{
+    struct vkCmdSetDepthBiasEnableEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBiasEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthBiasEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthBiasEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthBiasEnableEXT(void *args)
 {
@@ -29193,7 +33632,22 @@ static void thunk64_vkCmdSetDepthBiasEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthBiasEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthBiasEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthBiasEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthBiasEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBiasEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthBiasEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthBiasEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthBiasEnableEXT(void *args)
 {
     struct
@@ -29204,6 +33658,7 @@ static void thunk32_vkCmdSetDepthBiasEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthBiasEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthBiasEnable);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthBounds(void *args)
@@ -29226,6 +33681,16 @@ static void thunk32_vkCmdSetDepthBounds(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthBounds(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->minDepthBounds, params->maxDepthBounds);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthBoundsTestEnable(void)
+{
+    struct vkCmdSetDepthBoundsTestEnable_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBoundsTestEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthBoundsTestEnable(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthBoundsTestEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthBoundsTestEnable(void *args)
 {
@@ -29234,7 +33699,22 @@ static void thunk64_vkCmdSetDepthBoundsTestEnable(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthBoundsTestEnable(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthBoundsTestEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthBoundsTestEnable(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthBoundsTestEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBoundsTestEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthBoundsTestEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthBoundsTestEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthBoundsTestEnable(void *args)
 {
     struct
@@ -29245,7 +33725,18 @@ static void thunk32_vkCmdSetDepthBoundsTestEnable(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthBoundsTestEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthBoundsTestEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthBoundsTestEnableEXT(void)
+{
+    struct vkCmdSetDepthBoundsTestEnableEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBoundsTestEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthBoundsTestEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthBoundsTestEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthBoundsTestEnableEXT(void *args)
 {
@@ -29254,7 +33745,22 @@ static void thunk64_vkCmdSetDepthBoundsTestEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthBoundsTestEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthBoundsTestEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthBoundsTestEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthBoundsTestEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthBoundsTestEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthBoundsTestEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthBoundsTestEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthBoundsTestEnableEXT(void *args)
 {
     struct
@@ -29265,7 +33771,18 @@ static void thunk32_vkCmdSetDepthBoundsTestEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthBoundsTestEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthBoundsTestEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthClampEnableEXT(void)
+{
+    struct vkCmdSetDepthClampEnableEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthClampEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthClampEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthClampEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthClampEnableEXT(void *args)
 {
@@ -29274,7 +33791,22 @@ static void thunk64_vkCmdSetDepthClampEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthClampEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthClampEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthClampEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthClampEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthClampEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthClampEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthClampEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthClampEnableEXT(void *args)
 {
     struct
@@ -29285,7 +33817,18 @@ static void thunk32_vkCmdSetDepthClampEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthClampEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthClampEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthClipEnableEXT(void)
+{
+    struct vkCmdSetDepthClipEnableEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthClipEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthClipEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthClipEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthClipEnableEXT(void *args)
 {
@@ -29294,7 +33837,22 @@ static void thunk64_vkCmdSetDepthClipEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthClipEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthClipEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthClipEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthClipEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthClipEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthClipEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthClipEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthClipEnableEXT(void *args)
 {
     struct
@@ -29305,7 +33863,18 @@ static void thunk32_vkCmdSetDepthClipEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthClipEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthClipEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthClipNegativeOneToOneEXT(void)
+{
+    struct vkCmdSetDepthClipNegativeOneToOneEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.negativeOneToOne);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthClipNegativeOneToOneEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.negativeOneToOne);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthClipNegativeOneToOneEXT(void *args)
 {
@@ -29314,7 +33883,22 @@ static void thunk64_vkCmdSetDepthClipNegativeOneToOneEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthClipNegativeOneToOneEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->negativeOneToOne);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthClipNegativeOneToOneEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 negativeOneToOne;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.negativeOneToOne);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthClipNegativeOneToOneEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.negativeOneToOne);
+}
+#else
 static void thunk32_vkCmdSetDepthClipNegativeOneToOneEXT(void *args)
 {
     struct
@@ -29325,7 +33909,18 @@ static void thunk32_vkCmdSetDepthClipNegativeOneToOneEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthClipNegativeOneToOneEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->negativeOneToOne);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthCompareOp(void)
+{
+    struct vkCmdSetDepthCompareOp_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthCompareOp);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthCompareOp(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthCompareOp);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthCompareOp(void *args)
 {
@@ -29334,7 +33929,22 @@ static void thunk64_vkCmdSetDepthCompareOp(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthCompareOp(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthCompareOp);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthCompareOp(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkCompareOp depthCompareOp;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthCompareOp);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthCompareOp(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthCompareOp);
+}
+#else
 static void thunk32_vkCmdSetDepthCompareOp(void *args)
 {
     struct
@@ -29345,7 +33955,18 @@ static void thunk32_vkCmdSetDepthCompareOp(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthCompareOp(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthCompareOp);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthCompareOpEXT(void)
+{
+    struct vkCmdSetDepthCompareOpEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthCompareOp);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthCompareOpEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthCompareOp);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthCompareOpEXT(void *args)
 {
@@ -29354,7 +33975,22 @@ static void thunk64_vkCmdSetDepthCompareOpEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthCompareOpEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthCompareOp);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthCompareOpEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkCompareOp depthCompareOp;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthCompareOp);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthCompareOpEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthCompareOp);
+}
+#else
 static void thunk32_vkCmdSetDepthCompareOpEXT(void *args)
 {
     struct
@@ -29365,7 +34001,18 @@ static void thunk32_vkCmdSetDepthCompareOpEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthCompareOpEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthCompareOp);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthTestEnable(void)
+{
+    struct vkCmdSetDepthTestEnable_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthTestEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthTestEnable(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthTestEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthTestEnable(void *args)
 {
@@ -29374,7 +34021,22 @@ static void thunk64_vkCmdSetDepthTestEnable(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthTestEnable(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthTestEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthTestEnable(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthTestEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthTestEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthTestEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthTestEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthTestEnable(void *args)
 {
     struct
@@ -29385,7 +34047,18 @@ static void thunk32_vkCmdSetDepthTestEnable(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthTestEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthTestEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthTestEnableEXT(void)
+{
+    struct vkCmdSetDepthTestEnableEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthTestEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthTestEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthTestEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthTestEnableEXT(void *args)
 {
@@ -29394,7 +34067,22 @@ static void thunk64_vkCmdSetDepthTestEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthTestEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthTestEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthTestEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthTestEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthTestEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthTestEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthTestEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthTestEnableEXT(void *args)
 {
     struct
@@ -29405,7 +34093,18 @@ static void thunk32_vkCmdSetDepthTestEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthTestEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthTestEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthWriteEnable(void)
+{
+    struct vkCmdSetDepthWriteEnable_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthWriteEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthWriteEnable(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthWriteEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthWriteEnable(void *args)
 {
@@ -29414,7 +34113,22 @@ static void thunk64_vkCmdSetDepthWriteEnable(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthWriteEnable(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthWriteEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthWriteEnable(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthWriteEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthWriteEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthWriteEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthWriteEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthWriteEnable(void *args)
 {
     struct
@@ -29425,7 +34139,18 @@ static void thunk32_vkCmdSetDepthWriteEnable(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthWriteEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthWriteEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDepthWriteEnableEXT(void)
+{
+    struct vkCmdSetDepthWriteEnableEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthWriteEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDepthWriteEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.depthWriteEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDepthWriteEnableEXT(void *args)
 {
@@ -29434,7 +34159,22 @@ static void thunk64_vkCmdSetDepthWriteEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDepthWriteEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->depthWriteEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDepthWriteEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 depthWriteEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.depthWriteEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDepthWriteEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.depthWriteEnable);
+}
+#else
 static void thunk32_vkCmdSetDepthWriteEnableEXT(void *args)
 {
     struct
@@ -29445,7 +34185,23 @@ static void thunk32_vkCmdSetDepthWriteEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDepthWriteEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->depthWriteEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk64_vkCmdSetDescriptorBufferOffsetsEXT(void)
+{
+    struct vkCmdSetDescriptorBufferOffsetsEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstSet);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.setCount);
+    VK_FAST_THUNK_GET_ARG(5, void *, params.pBufferIndices);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pOffsets);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDescriptorBufferOffsetsEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineBindPoint, params.layout, params.firstSet, params.setCount, params.pBufferIndices, params.pOffsets);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDescriptorBufferOffsetsEXT(void *args)
 {
@@ -29454,7 +34210,32 @@ static void thunk64_vkCmdSetDescriptorBufferOffsetsEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDescriptorBufferOffsetsEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineBindPoint, params->layout, params->firstSet, params->setCount, params->pBufferIndices, params->pOffsets);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 7
+static void thunk32_vkCmdSetDescriptorBufferOffsetsEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineBindPoint pipelineBindPoint;
+        VkPipelineLayout DECLSPEC_ALIGN(8) layout;
+        uint32_t firstSet;
+        uint32_t setCount;
+        PTR32 pBufferIndices;
+        PTR32 pOffsets;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineBindPoint);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.layout);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.firstSet);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.setCount);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.pBufferIndices);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pOffsets);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDescriptorBufferOffsetsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineBindPoint, params.layout, params.firstSet, params.setCount, (const uint32_t *)UlongToPtr(params.pBufferIndices), (const VkDeviceSize *)UlongToPtr(params.pOffsets));
+}
+#else
 static void thunk32_vkCmdSetDescriptorBufferOffsetsEXT(void *args)
 {
     struct
@@ -29470,7 +34251,18 @@ static void thunk32_vkCmdSetDescriptorBufferOffsetsEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDescriptorBufferOffsetsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineBindPoint, params->layout, params->firstSet, params->setCount, (const uint32_t *)UlongToPtr(params->pBufferIndices), (const VkDeviceSize *)UlongToPtr(params->pOffsets));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDeviceMask(void)
+{
+    struct vkCmdSetDeviceMask_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.deviceMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDeviceMask(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.deviceMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDeviceMask(void *args)
 {
@@ -29479,7 +34271,22 @@ static void thunk64_vkCmdSetDeviceMask(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDeviceMask(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->deviceMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDeviceMask(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t deviceMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.deviceMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDeviceMask(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.deviceMask);
+}
+#else
 static void thunk32_vkCmdSetDeviceMask(void *args)
 {
     struct
@@ -29490,7 +34297,18 @@ static void thunk32_vkCmdSetDeviceMask(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDeviceMask(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->deviceMask);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetDeviceMaskKHR(void)
+{
+    struct vkCmdSetDeviceMaskKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.deviceMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDeviceMaskKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.deviceMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDeviceMaskKHR(void *args)
 {
@@ -29499,7 +34317,22 @@ static void thunk64_vkCmdSetDeviceMaskKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDeviceMaskKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->deviceMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetDeviceMaskKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t deviceMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.deviceMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDeviceMaskKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.deviceMask);
+}
+#else
 static void thunk32_vkCmdSetDeviceMaskKHR(void *args)
 {
     struct
@@ -29510,7 +34343,20 @@ static void thunk32_vkCmdSetDeviceMaskKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDeviceMaskKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->deviceMask);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetDiscardRectangleEXT(void)
+{
+    struct vkCmdSetDiscardRectangleEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstDiscardRectangle);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.discardRectangleCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pDiscardRectangles);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetDiscardRectangleEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstDiscardRectangle, params.discardRectangleCount, params.pDiscardRectangles);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetDiscardRectangleEXT(void *args)
 {
@@ -29519,7 +34365,26 @@ static void thunk64_vkCmdSetDiscardRectangleEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetDiscardRectangleEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstDiscardRectangle, params->discardRectangleCount, params->pDiscardRectangles);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetDiscardRectangleEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstDiscardRectangle;
+        uint32_t discardRectangleCount;
+        PTR32 pDiscardRectangles;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstDiscardRectangle);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.discardRectangleCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pDiscardRectangles);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetDiscardRectangleEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstDiscardRectangle, params.discardRectangleCount, (const VkRect2D *)UlongToPtr(params.pDiscardRectangles));
+}
+#else
 static void thunk32_vkCmdSetDiscardRectangleEXT(void *args)
 {
     struct
@@ -29532,7 +34397,19 @@ static void thunk32_vkCmdSetDiscardRectangleEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetDiscardRectangleEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstDiscardRectangle, params->discardRectangleCount, (const VkRect2D *)UlongToPtr(params->pDiscardRectangles));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetEvent(void)
+{
+    struct vkCmdSetEvent_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetEvent(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.event, params.stageMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetEvent(void *args)
 {
@@ -29541,7 +34418,24 @@ static void thunk64_vkCmdSetEvent(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetEvent(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->event, params->stageMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetEvent(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkEvent DECLSPEC_ALIGN(8) event;
+        VkPipelineStageFlags stageMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.stageMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetEvent(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.event, params.stageMask);
+}
+#else
 static void thunk32_vkCmdSetEvent(void *args)
 {
     struct
@@ -29553,7 +34447,19 @@ static void thunk32_vkCmdSetEvent(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetEvent(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->event, params->stageMask);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetEvent2(void)
+{
+    struct vkCmdSetEvent2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pDependencyInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetEvent2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.event, params.pDependencyInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetEvent2(void *args)
 {
@@ -29562,7 +34468,29 @@ static void thunk64_vkCmdSetEvent2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetEvent2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->event, params->pDependencyInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetEvent2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkEvent DECLSPEC_ALIGN(8) event;
+        PTR32 pDependencyInfo;
+    } params;
+    VkDependencyInfo pDependencyInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pDependencyInfo);
+    init_conversion_context(&ctx);
+    convert_VkDependencyInfo_win32_to_host(&ctx, (const VkDependencyInfo32 *)UlongToPtr(params.pDependencyInfo), &pDependencyInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetEvent2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.event, &pDependencyInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdSetEvent2(void *args)
 {
     struct
@@ -29579,7 +34507,19 @@ static void thunk32_vkCmdSetEvent2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetEvent2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->event, &pDependencyInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetEvent2KHR(void)
+{
+    struct vkCmdSetEvent2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pDependencyInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetEvent2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.event, params.pDependencyInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetEvent2KHR(void *args)
 {
@@ -29588,7 +34528,29 @@ static void thunk64_vkCmdSetEvent2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetEvent2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->event, params->pDependencyInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetEvent2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkEvent DECLSPEC_ALIGN(8) event;
+        PTR32 pDependencyInfo;
+    } params;
+    VkDependencyInfo pDependencyInfo_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.event);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pDependencyInfo);
+    init_conversion_context(&ctx);
+    convert_VkDependencyInfo_win32_to_host(&ctx, (const VkDependencyInfo32 *)UlongToPtr(params.pDependencyInfo), &pDependencyInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetEvent2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.event, &pDependencyInfo_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdSetEvent2KHR(void *args)
 {
     struct
@@ -29605,7 +34567,20 @@ static void thunk32_vkCmdSetEvent2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetEvent2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->event, &pDependencyInfo_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetExclusiveScissorNV(void)
+{
+    struct vkCmdSetExclusiveScissorNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstExclusiveScissor);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.exclusiveScissorCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pExclusiveScissors);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetExclusiveScissorNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstExclusiveScissor, params.exclusiveScissorCount, params.pExclusiveScissors);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetExclusiveScissorNV(void *args)
 {
@@ -29614,7 +34589,26 @@ static void thunk64_vkCmdSetExclusiveScissorNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetExclusiveScissorNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstExclusiveScissor, params->exclusiveScissorCount, params->pExclusiveScissors);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetExclusiveScissorNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstExclusiveScissor;
+        uint32_t exclusiveScissorCount;
+        PTR32 pExclusiveScissors;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstExclusiveScissor);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.exclusiveScissorCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pExclusiveScissors);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetExclusiveScissorNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstExclusiveScissor, params.exclusiveScissorCount, (const VkRect2D *)UlongToPtr(params.pExclusiveScissors));
+}
+#else
 static void thunk32_vkCmdSetExclusiveScissorNV(void *args)
 {
     struct
@@ -29627,6 +34621,7 @@ static void thunk32_vkCmdSetExclusiveScissorNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetExclusiveScissorNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstExclusiveScissor, params->exclusiveScissorCount, (const VkRect2D *)UlongToPtr(params->pExclusiveScissors));
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static void thunk64_vkCmdSetExtraPrimitiveOverestimationSizeEXT(void *args)
@@ -29648,6 +34643,17 @@ static void thunk32_vkCmdSetExtraPrimitiveOverestimationSizeEXT(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetExtraPrimitiveOverestimationSizeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->extraPrimitiveOverestimationSize);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetFragmentShadingRateEnumNV(void)
+{
+    struct vkCmdSetFragmentShadingRateEnumNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.shadingRate);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.combinerOps);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetFragmentShadingRateEnumNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.shadingRate, params.combinerOps);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetFragmentShadingRateEnumNV(void *args)
 {
@@ -29656,7 +34662,24 @@ static void thunk64_vkCmdSetFragmentShadingRateEnumNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetFragmentShadingRateEnumNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->shadingRate, params->combinerOps);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetFragmentShadingRateEnumNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkFragmentShadingRateNV shadingRate;
+        PTR32 combinerOps;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.shadingRate);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.combinerOps);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetFragmentShadingRateEnumNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.shadingRate, (const VkFragmentShadingRateCombinerOpKHR *)UlongToPtr(params.combinerOps));
+}
+#else
 static void thunk32_vkCmdSetFragmentShadingRateEnumNV(void *args)
 {
     struct
@@ -29668,7 +34691,19 @@ static void thunk32_vkCmdSetFragmentShadingRateEnumNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetFragmentShadingRateEnumNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->shadingRate, (const VkFragmentShadingRateCombinerOpKHR *)UlongToPtr(params->combinerOps));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetFragmentShadingRateKHR(void)
+{
+    struct vkCmdSetFragmentShadingRateKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pFragmentSize);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.combinerOps);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetFragmentShadingRateKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pFragmentSize, params.combinerOps);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetFragmentShadingRateKHR(void *args)
 {
@@ -29677,7 +34712,24 @@ static void thunk64_vkCmdSetFragmentShadingRateKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetFragmentShadingRateKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pFragmentSize, params->combinerOps);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetFragmentShadingRateKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pFragmentSize;
+        PTR32 combinerOps;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pFragmentSize);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.combinerOps);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetFragmentShadingRateKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, (const VkExtent2D *)UlongToPtr(params.pFragmentSize), (const VkFragmentShadingRateCombinerOpKHR *)UlongToPtr(params.combinerOps));
+}
+#else
 static void thunk32_vkCmdSetFragmentShadingRateKHR(void *args)
 {
     struct
@@ -29689,7 +34741,18 @@ static void thunk32_vkCmdSetFragmentShadingRateKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetFragmentShadingRateKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, (const VkExtent2D *)UlongToPtr(params->pFragmentSize), (const VkFragmentShadingRateCombinerOpKHR *)UlongToPtr(params->combinerOps));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetFrontFace(void)
+{
+    struct vkCmdSetFrontFace_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.frontFace);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetFrontFace(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.frontFace);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetFrontFace(void *args)
 {
@@ -29698,7 +34761,22 @@ static void thunk64_vkCmdSetFrontFace(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetFrontFace(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->frontFace);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetFrontFace(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkFrontFace frontFace;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.frontFace);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetFrontFace(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.frontFace);
+}
+#else
 static void thunk32_vkCmdSetFrontFace(void *args)
 {
     struct
@@ -29709,7 +34787,18 @@ static void thunk32_vkCmdSetFrontFace(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetFrontFace(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->frontFace);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetFrontFaceEXT(void)
+{
+    struct vkCmdSetFrontFaceEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.frontFace);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetFrontFaceEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.frontFace);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetFrontFaceEXT(void *args)
 {
@@ -29718,7 +34807,22 @@ static void thunk64_vkCmdSetFrontFaceEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetFrontFaceEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->frontFace);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetFrontFaceEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkFrontFace frontFace;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.frontFace);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetFrontFaceEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.frontFace);
+}
+#else
 static void thunk32_vkCmdSetFrontFaceEXT(void *args)
 {
     struct
@@ -29729,7 +34833,18 @@ static void thunk32_vkCmdSetFrontFaceEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetFrontFaceEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->frontFace);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetLineRasterizationModeEXT(void)
+{
+    struct vkCmdSetLineRasterizationModeEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.lineRasterizationMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetLineRasterizationModeEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.lineRasterizationMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetLineRasterizationModeEXT(void *args)
 {
@@ -29738,7 +34853,22 @@ static void thunk64_vkCmdSetLineRasterizationModeEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetLineRasterizationModeEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->lineRasterizationMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetLineRasterizationModeEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkLineRasterizationModeEXT lineRasterizationMode;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.lineRasterizationMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetLineRasterizationModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.lineRasterizationMode);
+}
+#else
 static void thunk32_vkCmdSetLineRasterizationModeEXT(void *args)
 {
     struct
@@ -29749,7 +34879,19 @@ static void thunk32_vkCmdSetLineRasterizationModeEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetLineRasterizationModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->lineRasterizationMode);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetLineStippleEXT(void)
+{
+    struct vkCmdSetLineStippleEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.lineStippleFactor);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.lineStipplePattern);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetLineStippleEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.lineStippleFactor, params.lineStipplePattern);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetLineStippleEXT(void *args)
 {
@@ -29758,7 +34900,24 @@ static void thunk64_vkCmdSetLineStippleEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetLineStippleEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->lineStippleFactor, params->lineStipplePattern);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetLineStippleEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t lineStippleFactor;
+        uint16_t lineStipplePattern;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.lineStippleFactor);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.lineStipplePattern);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetLineStippleEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.lineStippleFactor, params.lineStipplePattern);
+}
+#else
 static void thunk32_vkCmdSetLineStippleEXT(void *args)
 {
     struct
@@ -29770,7 +34929,18 @@ static void thunk32_vkCmdSetLineStippleEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetLineStippleEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->lineStippleFactor, params->lineStipplePattern);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetLineStippleEnableEXT(void)
+{
+    struct vkCmdSetLineStippleEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stippledLineEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetLineStippleEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.stippledLineEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetLineStippleEnableEXT(void *args)
 {
@@ -29779,7 +34949,22 @@ static void thunk64_vkCmdSetLineStippleEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetLineStippleEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->stippledLineEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetLineStippleEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 stippledLineEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stippledLineEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetLineStippleEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.stippledLineEnable);
+}
+#else
 static void thunk32_vkCmdSetLineStippleEnableEXT(void *args)
 {
     struct
@@ -29790,6 +34975,7 @@ static void thunk32_vkCmdSetLineStippleEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetLineStippleEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->stippledLineEnable);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static void thunk64_vkCmdSetLineWidth(void *args)
@@ -29811,6 +34997,16 @@ static void thunk32_vkCmdSetLineWidth(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetLineWidth(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->lineWidth);
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetLogicOpEXT(void)
+{
+    struct vkCmdSetLogicOpEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.logicOp);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetLogicOpEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.logicOp);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetLogicOpEXT(void *args)
 {
@@ -29819,7 +35015,22 @@ static void thunk64_vkCmdSetLogicOpEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetLogicOpEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->logicOp);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetLogicOpEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkLogicOp logicOp;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.logicOp);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetLogicOpEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.logicOp);
+}
+#else
 static void thunk32_vkCmdSetLogicOpEXT(void *args)
 {
     struct
@@ -29830,7 +35041,18 @@ static void thunk32_vkCmdSetLogicOpEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetLogicOpEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->logicOp);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetLogicOpEnableEXT(void)
+{
+    struct vkCmdSetLogicOpEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.logicOpEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetLogicOpEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.logicOpEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetLogicOpEnableEXT(void *args)
 {
@@ -29839,7 +35061,22 @@ static void thunk64_vkCmdSetLogicOpEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetLogicOpEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->logicOpEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetLogicOpEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 logicOpEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.logicOpEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetLogicOpEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.logicOpEnable);
+}
+#else
 static void thunk32_vkCmdSetLogicOpEnableEXT(void *args)
 {
     struct
@@ -29850,7 +35087,18 @@ static void thunk32_vkCmdSetLogicOpEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetLogicOpEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->logicOpEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetPatchControlPointsEXT(void)
+{
+    struct vkCmdSetPatchControlPointsEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.patchControlPoints);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetPatchControlPointsEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.patchControlPoints);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetPatchControlPointsEXT(void *args)
 {
@@ -29859,7 +35107,22 @@ static void thunk64_vkCmdSetPatchControlPointsEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetPatchControlPointsEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->patchControlPoints);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetPatchControlPointsEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t patchControlPoints;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.patchControlPoints);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetPatchControlPointsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.patchControlPoints);
+}
+#else
 static void thunk32_vkCmdSetPatchControlPointsEXT(void *args)
 {
     struct
@@ -29870,6 +35133,7 @@ static void thunk32_vkCmdSetPatchControlPointsEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetPatchControlPointsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->patchControlPoints);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static NTSTATUS thunk64_vkCmdSetPerformanceMarkerINTEL(void *args)
@@ -29958,6 +35222,16 @@ static NTSTATUS thunk32_vkCmdSetPerformanceStreamMarkerINTEL(void *args)
     return STATUS_SUCCESS;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetPolygonModeEXT(void)
+{
+    struct vkCmdSetPolygonModeEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.polygonMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetPolygonModeEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.polygonMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetPolygonModeEXT(void *args)
 {
@@ -29966,7 +35240,22 @@ static void thunk64_vkCmdSetPolygonModeEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetPolygonModeEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->polygonMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetPolygonModeEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPolygonMode polygonMode;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.polygonMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetPolygonModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.polygonMode);
+}
+#else
 static void thunk32_vkCmdSetPolygonModeEXT(void *args)
 {
     struct
@@ -29977,7 +35266,18 @@ static void thunk32_vkCmdSetPolygonModeEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetPolygonModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->polygonMode);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetPrimitiveRestartEnable(void)
+{
+    struct vkCmdSetPrimitiveRestartEnable_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveRestartEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetPrimitiveRestartEnable(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.primitiveRestartEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetPrimitiveRestartEnable(void *args)
 {
@@ -29986,7 +35286,22 @@ static void thunk64_vkCmdSetPrimitiveRestartEnable(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetPrimitiveRestartEnable(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->primitiveRestartEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetPrimitiveRestartEnable(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 primitiveRestartEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveRestartEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetPrimitiveRestartEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.primitiveRestartEnable);
+}
+#else
 static void thunk32_vkCmdSetPrimitiveRestartEnable(void *args)
 {
     struct
@@ -29997,7 +35312,18 @@ static void thunk32_vkCmdSetPrimitiveRestartEnable(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetPrimitiveRestartEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->primitiveRestartEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetPrimitiveRestartEnableEXT(void)
+{
+    struct vkCmdSetPrimitiveRestartEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveRestartEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetPrimitiveRestartEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.primitiveRestartEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetPrimitiveRestartEnableEXT(void *args)
 {
@@ -30006,7 +35332,22 @@ static void thunk64_vkCmdSetPrimitiveRestartEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetPrimitiveRestartEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->primitiveRestartEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetPrimitiveRestartEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 primitiveRestartEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveRestartEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetPrimitiveRestartEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.primitiveRestartEnable);
+}
+#else
 static void thunk32_vkCmdSetPrimitiveRestartEnableEXT(void *args)
 {
     struct
@@ -30017,7 +35358,18 @@ static void thunk32_vkCmdSetPrimitiveRestartEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetPrimitiveRestartEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->primitiveRestartEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetPrimitiveTopology(void)
+{
+    struct vkCmdSetPrimitiveTopology_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveTopology);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetPrimitiveTopology(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.primitiveTopology);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetPrimitiveTopology(void *args)
 {
@@ -30026,7 +35378,22 @@ static void thunk64_vkCmdSetPrimitiveTopology(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetPrimitiveTopology(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->primitiveTopology);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetPrimitiveTopology(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPrimitiveTopology primitiveTopology;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveTopology);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetPrimitiveTopology(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.primitiveTopology);
+}
+#else
 static void thunk32_vkCmdSetPrimitiveTopology(void *args)
 {
     struct
@@ -30037,7 +35404,18 @@ static void thunk32_vkCmdSetPrimitiveTopology(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetPrimitiveTopology(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->primitiveTopology);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetPrimitiveTopologyEXT(void)
+{
+    struct vkCmdSetPrimitiveTopologyEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveTopology);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetPrimitiveTopologyEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.primitiveTopology);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetPrimitiveTopologyEXT(void *args)
 {
@@ -30046,7 +35424,22 @@ static void thunk64_vkCmdSetPrimitiveTopologyEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetPrimitiveTopologyEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->primitiveTopology);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetPrimitiveTopologyEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPrimitiveTopology primitiveTopology;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.primitiveTopology);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetPrimitiveTopologyEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.primitiveTopology);
+}
+#else
 static void thunk32_vkCmdSetPrimitiveTopologyEXT(void *args)
 {
     struct
@@ -30057,7 +35450,18 @@ static void thunk32_vkCmdSetPrimitiveTopologyEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetPrimitiveTopologyEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->primitiveTopology);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetProvokingVertexModeEXT(void)
+{
+    struct vkCmdSetProvokingVertexModeEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.provokingVertexMode);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetProvokingVertexModeEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.provokingVertexMode);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetProvokingVertexModeEXT(void *args)
 {
@@ -30066,7 +35470,22 @@ static void thunk64_vkCmdSetProvokingVertexModeEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetProvokingVertexModeEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->provokingVertexMode);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetProvokingVertexModeEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkProvokingVertexModeEXT provokingVertexMode;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.provokingVertexMode);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetProvokingVertexModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.provokingVertexMode);
+}
+#else
 static void thunk32_vkCmdSetProvokingVertexModeEXT(void *args)
 {
     struct
@@ -30077,7 +35496,18 @@ static void thunk32_vkCmdSetProvokingVertexModeEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetProvokingVertexModeEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->provokingVertexMode);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetRasterizationSamplesEXT(void)
+{
+    struct vkCmdSetRasterizationSamplesEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizationSamples);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetRasterizationSamplesEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.rasterizationSamples);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetRasterizationSamplesEXT(void *args)
 {
@@ -30086,7 +35516,22 @@ static void thunk64_vkCmdSetRasterizationSamplesEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetRasterizationSamplesEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->rasterizationSamples);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetRasterizationSamplesEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkSampleCountFlagBits rasterizationSamples;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizationSamples);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetRasterizationSamplesEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.rasterizationSamples);
+}
+#else
 static void thunk32_vkCmdSetRasterizationSamplesEXT(void *args)
 {
     struct
@@ -30097,7 +35542,18 @@ static void thunk32_vkCmdSetRasterizationSamplesEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetRasterizationSamplesEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->rasterizationSamples);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetRasterizationStreamEXT(void)
+{
+    struct vkCmdSetRasterizationStreamEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizationStream);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetRasterizationStreamEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.rasterizationStream);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetRasterizationStreamEXT(void *args)
 {
@@ -30106,7 +35562,22 @@ static void thunk64_vkCmdSetRasterizationStreamEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetRasterizationStreamEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->rasterizationStream);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetRasterizationStreamEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t rasterizationStream;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizationStream);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetRasterizationStreamEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.rasterizationStream);
+}
+#else
 static void thunk32_vkCmdSetRasterizationStreamEXT(void *args)
 {
     struct
@@ -30117,7 +35588,18 @@ static void thunk32_vkCmdSetRasterizationStreamEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetRasterizationStreamEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->rasterizationStream);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetRasterizerDiscardEnable(void)
+{
+    struct vkCmdSetRasterizerDiscardEnable_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizerDiscardEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetRasterizerDiscardEnable(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.rasterizerDiscardEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetRasterizerDiscardEnable(void *args)
 {
@@ -30126,7 +35608,22 @@ static void thunk64_vkCmdSetRasterizerDiscardEnable(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetRasterizerDiscardEnable(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->rasterizerDiscardEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetRasterizerDiscardEnable(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 rasterizerDiscardEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizerDiscardEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetRasterizerDiscardEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.rasterizerDiscardEnable);
+}
+#else
 static void thunk32_vkCmdSetRasterizerDiscardEnable(void *args)
 {
     struct
@@ -30137,7 +35634,18 @@ static void thunk32_vkCmdSetRasterizerDiscardEnable(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetRasterizerDiscardEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->rasterizerDiscardEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetRasterizerDiscardEnableEXT(void)
+{
+    struct vkCmdSetRasterizerDiscardEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizerDiscardEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetRasterizerDiscardEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.rasterizerDiscardEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetRasterizerDiscardEnableEXT(void *args)
 {
@@ -30146,7 +35654,22 @@ static void thunk64_vkCmdSetRasterizerDiscardEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetRasterizerDiscardEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->rasterizerDiscardEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetRasterizerDiscardEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 rasterizerDiscardEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.rasterizerDiscardEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetRasterizerDiscardEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.rasterizerDiscardEnable);
+}
+#else
 static void thunk32_vkCmdSetRasterizerDiscardEnableEXT(void *args)
 {
     struct
@@ -30157,7 +35680,18 @@ static void thunk32_vkCmdSetRasterizerDiscardEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetRasterizerDiscardEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->rasterizerDiscardEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetRayTracingPipelineStackSizeKHR(void)
+{
+    struct vkCmdSetRayTracingPipelineStackSizeKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineStackSize);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetRayTracingPipelineStackSizeKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineStackSize);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetRayTracingPipelineStackSizeKHR(void *args)
 {
@@ -30166,7 +35700,22 @@ static void thunk64_vkCmdSetRayTracingPipelineStackSizeKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetRayTracingPipelineStackSizeKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineStackSize);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetRayTracingPipelineStackSizeKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t pipelineStackSize;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineStackSize);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetRayTracingPipelineStackSizeKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineStackSize);
+}
+#else
 static void thunk32_vkCmdSetRayTracingPipelineStackSizeKHR(void *args)
 {
     struct
@@ -30177,7 +35726,18 @@ static void thunk32_vkCmdSetRayTracingPipelineStackSizeKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetRayTracingPipelineStackSizeKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineStackSize);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetRepresentativeFragmentTestEnableNV(void)
+{
+    struct vkCmdSetRepresentativeFragmentTestEnableNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.representativeFragmentTestEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetRepresentativeFragmentTestEnableNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.representativeFragmentTestEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetRepresentativeFragmentTestEnableNV(void *args)
 {
@@ -30186,7 +35746,22 @@ static void thunk64_vkCmdSetRepresentativeFragmentTestEnableNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetRepresentativeFragmentTestEnableNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->representativeFragmentTestEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetRepresentativeFragmentTestEnableNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 representativeFragmentTestEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.representativeFragmentTestEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetRepresentativeFragmentTestEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.representativeFragmentTestEnable);
+}
+#else
 static void thunk32_vkCmdSetRepresentativeFragmentTestEnableNV(void *args)
 {
     struct
@@ -30197,7 +35772,18 @@ static void thunk32_vkCmdSetRepresentativeFragmentTestEnableNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetRepresentativeFragmentTestEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->representativeFragmentTestEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetSampleLocationsEXT(void)
+{
+    struct vkCmdSetSampleLocationsEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pSampleLocationsInfo);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetSampleLocationsEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pSampleLocationsInfo);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetSampleLocationsEXT(void *args)
 {
@@ -30206,7 +35792,24 @@ static void thunk64_vkCmdSetSampleLocationsEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetSampleLocationsEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pSampleLocationsInfo);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetSampleLocationsEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pSampleLocationsInfo;
+    } params;
+    VkSampleLocationsInfoEXT pSampleLocationsInfo_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pSampleLocationsInfo);
+    convert_VkSampleLocationsInfoEXT_win32_to_host((const VkSampleLocationsInfoEXT32 *)UlongToPtr(params.pSampleLocationsInfo), &pSampleLocationsInfo_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetSampleLocationsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pSampleLocationsInfo_host);
+}
+#else
 static void thunk32_vkCmdSetSampleLocationsEXT(void *args)
 {
     struct
@@ -30219,7 +35822,18 @@ static void thunk32_vkCmdSetSampleLocationsEXT(void *args)
     convert_VkSampleLocationsInfoEXT_win32_to_host((const VkSampleLocationsInfoEXT32 *)UlongToPtr(params->pSampleLocationsInfo), &pSampleLocationsInfo_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetSampleLocationsEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pSampleLocationsInfo_host);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetSampleLocationsEnableEXT(void)
+{
+    struct vkCmdSetSampleLocationsEnableEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.sampleLocationsEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetSampleLocationsEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.sampleLocationsEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetSampleLocationsEnableEXT(void *args)
 {
@@ -30228,7 +35842,22 @@ static void thunk64_vkCmdSetSampleLocationsEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetSampleLocationsEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->sampleLocationsEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetSampleLocationsEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 sampleLocationsEnable;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.sampleLocationsEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetSampleLocationsEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.sampleLocationsEnable);
+}
+#else
 static void thunk32_vkCmdSetSampleLocationsEnableEXT(void *args)
 {
     struct
@@ -30239,7 +35868,19 @@ static void thunk32_vkCmdSetSampleLocationsEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetSampleLocationsEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->sampleLocationsEnable);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetSampleMaskEXT(void)
+{
+    struct vkCmdSetSampleMaskEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.samples);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pSampleMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetSampleMaskEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.samples, params.pSampleMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetSampleMaskEXT(void *args)
 {
@@ -30248,7 +35889,24 @@ static void thunk64_vkCmdSetSampleMaskEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetSampleMaskEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->samples, params->pSampleMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetSampleMaskEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkSampleCountFlagBits samples;
+        PTR32 pSampleMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.samples);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pSampleMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetSampleMaskEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.samples, (const VkSampleMask *)UlongToPtr(params.pSampleMask));
+}
+#else
 static void thunk32_vkCmdSetSampleMaskEXT(void *args)
 {
     struct
@@ -30260,7 +35918,20 @@ static void thunk32_vkCmdSetSampleMaskEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetSampleMaskEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->samples, (const VkSampleMask *)UlongToPtr(params->pSampleMask));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetScissor(void)
+{
+    struct vkCmdSetScissor_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstScissor);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.scissorCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pScissors);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetScissor(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstScissor, params.scissorCount, params.pScissors);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetScissor(void *args)
 {
@@ -30269,7 +35940,26 @@ static void thunk64_vkCmdSetScissor(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetScissor(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstScissor, params->scissorCount, params->pScissors);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetScissor(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstScissor;
+        uint32_t scissorCount;
+        PTR32 pScissors;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstScissor);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.scissorCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pScissors);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetScissor(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstScissor, params.scissorCount, (const VkRect2D *)UlongToPtr(params.pScissors));
+}
+#else
 static void thunk32_vkCmdSetScissor(void *args)
 {
     struct
@@ -30282,7 +35972,19 @@ static void thunk32_vkCmdSetScissor(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetScissor(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstScissor, params->scissorCount, (const VkRect2D *)UlongToPtr(params->pScissors));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetScissorWithCount(void)
+{
+    struct vkCmdSetScissorWithCount_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.scissorCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pScissors);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetScissorWithCount(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.scissorCount, params.pScissors);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetScissorWithCount(void *args)
 {
@@ -30291,7 +35993,24 @@ static void thunk64_vkCmdSetScissorWithCount(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetScissorWithCount(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->scissorCount, params->pScissors);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetScissorWithCount(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t scissorCount;
+        PTR32 pScissors;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.scissorCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pScissors);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetScissorWithCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.scissorCount, (const VkRect2D *)UlongToPtr(params.pScissors));
+}
+#else
 static void thunk32_vkCmdSetScissorWithCount(void *args)
 {
     struct
@@ -30303,7 +36022,19 @@ static void thunk32_vkCmdSetScissorWithCount(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetScissorWithCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->scissorCount, (const VkRect2D *)UlongToPtr(params->pScissors));
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetScissorWithCountEXT(void)
+{
+    struct vkCmdSetScissorWithCountEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.scissorCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pScissors);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetScissorWithCountEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.scissorCount, params.pScissors);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetScissorWithCountEXT(void *args)
 {
@@ -30312,7 +36043,24 @@ static void thunk64_vkCmdSetScissorWithCountEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetScissorWithCountEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->scissorCount, params->pScissors);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetScissorWithCountEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t scissorCount;
+        PTR32 pScissors;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.scissorCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pScissors);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetScissorWithCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.scissorCount, (const VkRect2D *)UlongToPtr(params.pScissors));
+}
+#else
 static void thunk32_vkCmdSetScissorWithCountEXT(void *args)
 {
     struct
@@ -30324,7 +36072,18 @@ static void thunk32_vkCmdSetScissorWithCountEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetScissorWithCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->scissorCount, (const VkRect2D *)UlongToPtr(params->pScissors));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetShadingRateImageEnableNV(void)
+{
+    struct vkCmdSetShadingRateImageEnableNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.shadingRateImageEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetShadingRateImageEnableNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.shadingRateImageEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetShadingRateImageEnableNV(void *args)
 {
@@ -30333,7 +36092,22 @@ static void thunk64_vkCmdSetShadingRateImageEnableNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetShadingRateImageEnableNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->shadingRateImageEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetShadingRateImageEnableNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 shadingRateImageEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.shadingRateImageEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetShadingRateImageEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.shadingRateImageEnable);
+}
+#else
 static void thunk32_vkCmdSetShadingRateImageEnableNV(void *args)
 {
     struct
@@ -30344,7 +36118,19 @@ static void thunk32_vkCmdSetShadingRateImageEnableNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetShadingRateImageEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->shadingRateImageEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetStencilCompareMask(void)
+{
+    struct vkCmdSetStencilCompareMask_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.compareMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetStencilCompareMask(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.faceMask, params.compareMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetStencilCompareMask(void *args)
 {
@@ -30353,7 +36139,24 @@ static void thunk64_vkCmdSetStencilCompareMask(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetStencilCompareMask(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->faceMask, params->compareMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetStencilCompareMask(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkStencilFaceFlags faceMask;
+        uint32_t compareMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.compareMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetStencilCompareMask(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.faceMask, params.compareMask);
+}
+#else
 static void thunk32_vkCmdSetStencilCompareMask(void *args)
 {
     struct
@@ -30365,7 +36168,22 @@ static void thunk32_vkCmdSetStencilCompareMask(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetStencilCompareMask(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->faceMask, params->compareMask);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdSetStencilOp(void)
+{
+    struct vkCmdSetStencilOp_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.failOp);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.passOp);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.depthFailOp);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.compareOp);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetStencilOp(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.faceMask, params.failOp, params.passOp, params.depthFailOp, params.compareOp);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetStencilOp(void *args)
 {
@@ -30374,7 +36192,30 @@ static void thunk64_vkCmdSetStencilOp(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetStencilOp(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->faceMask, params->failOp, params->passOp, params->depthFailOp, params->compareOp);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdSetStencilOp(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkStencilFaceFlags faceMask;
+        VkStencilOp failOp;
+        VkStencilOp passOp;
+        VkStencilOp depthFailOp;
+        VkCompareOp compareOp;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.failOp);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.passOp);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.depthFailOp);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.compareOp);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetStencilOp(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.faceMask, params.failOp, params.passOp, params.depthFailOp, params.compareOp);
+}
+#else
 static void thunk32_vkCmdSetStencilOp(void *args)
 {
     struct
@@ -30389,7 +36230,22 @@ static void thunk32_vkCmdSetStencilOp(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetStencilOp(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->faceMask, params->failOp, params->passOp, params->depthFailOp, params->compareOp);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdSetStencilOpEXT(void)
+{
+    struct vkCmdSetStencilOpEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.failOp);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.passOp);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.depthFailOp);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.compareOp);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetStencilOpEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.faceMask, params.failOp, params.passOp, params.depthFailOp, params.compareOp);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetStencilOpEXT(void *args)
 {
@@ -30398,7 +36254,30 @@ static void thunk64_vkCmdSetStencilOpEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetStencilOpEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->faceMask, params->failOp, params->passOp, params->depthFailOp, params->compareOp);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdSetStencilOpEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkStencilFaceFlags faceMask;
+        VkStencilOp failOp;
+        VkStencilOp passOp;
+        VkStencilOp depthFailOp;
+        VkCompareOp compareOp;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.failOp);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.passOp);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.depthFailOp);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.compareOp);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetStencilOpEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.faceMask, params.failOp, params.passOp, params.depthFailOp, params.compareOp);
+}
+#else
 static void thunk32_vkCmdSetStencilOpEXT(void *args)
 {
     struct
@@ -30413,7 +36292,19 @@ static void thunk32_vkCmdSetStencilOpEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetStencilOpEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->faceMask, params->failOp, params->passOp, params->depthFailOp, params->compareOp);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetStencilReference(void)
+{
+    struct vkCmdSetStencilReference_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.reference);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetStencilReference(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.faceMask, params.reference);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetStencilReference(void *args)
 {
@@ -30422,7 +36313,24 @@ static void thunk64_vkCmdSetStencilReference(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetStencilReference(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->faceMask, params->reference);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetStencilReference(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkStencilFaceFlags faceMask;
+        uint32_t reference;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.reference);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetStencilReference(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.faceMask, params.reference);
+}
+#else
 static void thunk32_vkCmdSetStencilReference(void *args)
 {
     struct
@@ -30434,7 +36342,18 @@ static void thunk32_vkCmdSetStencilReference(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetStencilReference(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->faceMask, params->reference);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetStencilTestEnable(void)
+{
+    struct vkCmdSetStencilTestEnable_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stencilTestEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetStencilTestEnable(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.stencilTestEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetStencilTestEnable(void *args)
 {
@@ -30443,7 +36362,22 @@ static void thunk64_vkCmdSetStencilTestEnable(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetStencilTestEnable(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->stencilTestEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetStencilTestEnable(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 stencilTestEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stencilTestEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetStencilTestEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.stencilTestEnable);
+}
+#else
 static void thunk32_vkCmdSetStencilTestEnable(void *args)
 {
     struct
@@ -30454,7 +36388,18 @@ static void thunk32_vkCmdSetStencilTestEnable(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetStencilTestEnable(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->stencilTestEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetStencilTestEnableEXT(void)
+{
+    struct vkCmdSetStencilTestEnableEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stencilTestEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetStencilTestEnableEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.stencilTestEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetStencilTestEnableEXT(void *args)
 {
@@ -30463,7 +36408,22 @@ static void thunk64_vkCmdSetStencilTestEnableEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetStencilTestEnableEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->stencilTestEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetStencilTestEnableEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 stencilTestEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stencilTestEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetStencilTestEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.stencilTestEnable);
+}
+#else
 static void thunk32_vkCmdSetStencilTestEnableEXT(void *args)
 {
     struct
@@ -30474,7 +36434,19 @@ static void thunk32_vkCmdSetStencilTestEnableEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetStencilTestEnableEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->stencilTestEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetStencilWriteMask(void)
+{
+    struct vkCmdSetStencilWriteMask_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.writeMask);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetStencilWriteMask(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.faceMask, params.writeMask);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetStencilWriteMask(void *args)
 {
@@ -30483,7 +36455,24 @@ static void thunk64_vkCmdSetStencilWriteMask(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetStencilWriteMask(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->faceMask, params->writeMask);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetStencilWriteMask(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkStencilFaceFlags faceMask;
+        uint32_t writeMask;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.faceMask);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.writeMask);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetStencilWriteMask(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.faceMask, params.writeMask);
+}
+#else
 static void thunk32_vkCmdSetStencilWriteMask(void *args)
 {
     struct
@@ -30495,7 +36484,18 @@ static void thunk32_vkCmdSetStencilWriteMask(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetStencilWriteMask(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->faceMask, params->writeMask);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetTessellationDomainOriginEXT(void)
+{
+    struct vkCmdSetTessellationDomainOriginEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.domainOrigin);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetTessellationDomainOriginEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.domainOrigin);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetTessellationDomainOriginEXT(void *args)
 {
@@ -30504,7 +36504,22 @@ static void thunk64_vkCmdSetTessellationDomainOriginEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetTessellationDomainOriginEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->domainOrigin);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetTessellationDomainOriginEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkTessellationDomainOrigin domainOrigin;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.domainOrigin);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetTessellationDomainOriginEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.domainOrigin);
+}
+#else
 static void thunk32_vkCmdSetTessellationDomainOriginEXT(void *args)
 {
     struct
@@ -30515,7 +36530,21 @@ static void thunk32_vkCmdSetTessellationDomainOriginEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetTessellationDomainOriginEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->domainOrigin);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdSetVertexInputEXT(void)
+{
+    struct vkCmdSetVertexInputEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.vertexBindingDescriptionCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pVertexBindingDescriptions);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.vertexAttributeDescriptionCount);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pVertexAttributeDescriptions);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetVertexInputEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.vertexBindingDescriptionCount, params.pVertexBindingDescriptions, params.vertexAttributeDescriptionCount, params.pVertexAttributeDescriptions);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetVertexInputEXT(void *args)
 {
@@ -30524,7 +36553,35 @@ static void thunk64_vkCmdSetVertexInputEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetVertexInputEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->vertexBindingDescriptionCount, params->pVertexBindingDescriptions, params->vertexAttributeDescriptionCount, params->pVertexAttributeDescriptions);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdSetVertexInputEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t vertexBindingDescriptionCount;
+        PTR32 pVertexBindingDescriptions;
+        uint32_t vertexAttributeDescriptionCount;
+        PTR32 pVertexAttributeDescriptions;
+    } params;
+    const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions_host;
+    const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.vertexBindingDescriptionCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pVertexBindingDescriptions);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.vertexAttributeDescriptionCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pVertexAttributeDescriptions);
+    init_conversion_context(&ctx);
+    pVertexBindingDescriptions_host = convert_VkVertexInputBindingDescription2EXT_array_win32_to_host(&ctx, (const VkVertexInputBindingDescription2EXT32 *)UlongToPtr(params.pVertexBindingDescriptions), params.vertexBindingDescriptionCount);
+    pVertexAttributeDescriptions_host = convert_VkVertexInputAttributeDescription2EXT_array_win32_to_host(&ctx, (const VkVertexInputAttributeDescription2EXT32 *)UlongToPtr(params.pVertexAttributeDescriptions), params.vertexAttributeDescriptionCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetVertexInputEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.vertexBindingDescriptionCount, pVertexBindingDescriptions_host, params.vertexAttributeDescriptionCount, pVertexAttributeDescriptions_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdSetVertexInputEXT(void *args)
 {
     struct
@@ -30545,7 +36602,20 @@ static void thunk32_vkCmdSetVertexInputEXT(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetVertexInputEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->vertexBindingDescriptionCount, pVertexBindingDescriptions_host, params->vertexAttributeDescriptionCount, pVertexAttributeDescriptions_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetViewport(void)
+{
+    struct vkCmdSetViewport_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pViewports);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetViewport(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstViewport, params.viewportCount, params.pViewports);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetViewport(void *args)
 {
@@ -30554,7 +36624,26 @@ static void thunk64_vkCmdSetViewport(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetViewport(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstViewport, params->viewportCount, params->pViewports);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetViewport(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstViewport;
+        uint32_t viewportCount;
+        PTR32 pViewports;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pViewports);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetViewport(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstViewport, params.viewportCount, (const VkViewport *)UlongToPtr(params.pViewports));
+}
+#else
 static void thunk32_vkCmdSetViewport(void *args)
 {
     struct
@@ -30567,7 +36656,20 @@ static void thunk32_vkCmdSetViewport(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetViewport(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstViewport, params->viewportCount, (const VkViewport *)UlongToPtr(params->pViewports));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetViewportShadingRatePaletteNV(void)
+{
+    struct vkCmdSetViewportShadingRatePaletteNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pShadingRatePalettes);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetViewportShadingRatePaletteNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstViewport, params.viewportCount, params.pShadingRatePalettes);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetViewportShadingRatePaletteNV(void *args)
 {
@@ -30576,7 +36678,31 @@ static void thunk64_vkCmdSetViewportShadingRatePaletteNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetViewportShadingRatePaletteNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstViewport, params->viewportCount, params->pShadingRatePalettes);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetViewportShadingRatePaletteNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstViewport;
+        uint32_t viewportCount;
+        PTR32 pShadingRatePalettes;
+    } params;
+    const VkShadingRatePaletteNV *pShadingRatePalettes_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pShadingRatePalettes);
+    init_conversion_context(&ctx);
+    pShadingRatePalettes_host = convert_VkShadingRatePaletteNV_array_win32_to_host(&ctx, (const VkShadingRatePaletteNV32 *)UlongToPtr(params.pShadingRatePalettes), params.viewportCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetViewportShadingRatePaletteNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstViewport, params.viewportCount, pShadingRatePalettes_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdSetViewportShadingRatePaletteNV(void *args)
 {
     struct
@@ -30594,7 +36720,20 @@ static void thunk32_vkCmdSetViewportShadingRatePaletteNV(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetViewportShadingRatePaletteNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstViewport, params->viewportCount, pShadingRatePalettes_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetViewportSwizzleNV(void)
+{
+    struct vkCmdSetViewportSwizzleNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pViewportSwizzles);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetViewportSwizzleNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstViewport, params.viewportCount, params.pViewportSwizzles);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetViewportSwizzleNV(void *args)
 {
@@ -30603,7 +36742,26 @@ static void thunk64_vkCmdSetViewportSwizzleNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetViewportSwizzleNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstViewport, params->viewportCount, params->pViewportSwizzles);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetViewportSwizzleNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstViewport;
+        uint32_t viewportCount;
+        PTR32 pViewportSwizzles;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pViewportSwizzles);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetViewportSwizzleNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstViewport, params.viewportCount, (const VkViewportSwizzleNV *)UlongToPtr(params.pViewportSwizzles));
+}
+#else
 static void thunk32_vkCmdSetViewportSwizzleNV(void *args)
 {
     struct
@@ -30616,7 +36774,18 @@ static void thunk32_vkCmdSetViewportSwizzleNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetViewportSwizzleNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstViewport, params->viewportCount, (const VkViewportSwizzleNV *)UlongToPtr(params->pViewportSwizzles));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdSetViewportWScalingEnableNV(void)
+{
+    struct vkCmdSetViewportWScalingEnableNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.viewportWScalingEnable);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetViewportWScalingEnableNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.viewportWScalingEnable);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetViewportWScalingEnableNV(void *args)
 {
@@ -30625,7 +36794,22 @@ static void thunk64_vkCmdSetViewportWScalingEnableNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetViewportWScalingEnableNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->viewportWScalingEnable);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdSetViewportWScalingEnableNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBool32 viewportWScalingEnable;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.viewportWScalingEnable);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetViewportWScalingEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.viewportWScalingEnable);
+}
+#else
 static void thunk32_vkCmdSetViewportWScalingEnableNV(void *args)
 {
     struct
@@ -30636,7 +36820,20 @@ static void thunk32_vkCmdSetViewportWScalingEnableNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetViewportWScalingEnableNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->viewportWScalingEnable);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdSetViewportWScalingNV(void)
+{
+    struct vkCmdSetViewportWScalingNV_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pViewportWScalings);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetViewportWScalingNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.firstViewport, params.viewportCount, params.pViewportWScalings);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetViewportWScalingNV(void *args)
 {
@@ -30645,7 +36842,26 @@ static void thunk64_vkCmdSetViewportWScalingNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetViewportWScalingNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->firstViewport, params->viewportCount, params->pViewportWScalings);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdSetViewportWScalingNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t firstViewport;
+        uint32_t viewportCount;
+        PTR32 pViewportWScalings;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.firstViewport);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pViewportWScalings);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetViewportWScalingNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.firstViewport, params.viewportCount, (const VkViewportWScalingNV *)UlongToPtr(params.pViewportWScalings));
+}
+#else
 static void thunk32_vkCmdSetViewportWScalingNV(void *args)
 {
     struct
@@ -30658,7 +36874,19 @@ static void thunk32_vkCmdSetViewportWScalingNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetViewportWScalingNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->firstViewport, params->viewportCount, (const VkViewportWScalingNV *)UlongToPtr(params->pViewportWScalings));
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetViewportWithCount(void)
+{
+    struct vkCmdSetViewportWithCount_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pViewports);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetViewportWithCount(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.viewportCount, params.pViewports);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetViewportWithCount(void *args)
 {
@@ -30667,7 +36895,24 @@ static void thunk64_vkCmdSetViewportWithCount(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetViewportWithCount(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->viewportCount, params->pViewports);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetViewportWithCount(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t viewportCount;
+        PTR32 pViewports;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pViewports);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetViewportWithCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.viewportCount, (const VkViewport *)UlongToPtr(params.pViewports));
+}
+#else
 static void thunk32_vkCmdSetViewportWithCount(void *args)
 {
     struct
@@ -30679,7 +36924,19 @@ static void thunk32_vkCmdSetViewportWithCount(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetViewportWithCount(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->viewportCount, (const VkViewport *)UlongToPtr(params->pViewports));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk64_vkCmdSetViewportWithCountEXT(void)
+{
+    struct vkCmdSetViewportWithCountEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pViewports);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSetViewportWithCountEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.viewportCount, params.pViewports);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSetViewportWithCountEXT(void *args)
 {
@@ -30688,7 +36945,24 @@ static void thunk64_vkCmdSetViewportWithCountEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSetViewportWithCountEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->viewportCount, params->pViewports);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 3
+static void thunk32_vkCmdSetViewportWithCountEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t viewportCount;
+        PTR32 pViewports;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.viewportCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pViewports);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSetViewportWithCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.viewportCount, (const VkViewport *)UlongToPtr(params.pViewports));
+}
+#else
 static void thunk32_vkCmdSetViewportWithCountEXT(void *args)
 {
     struct
@@ -30700,7 +36974,17 @@ static void thunk32_vkCmdSetViewportWithCountEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSetViewportWithCountEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->viewportCount, (const VkViewport *)UlongToPtr(params->pViewports));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk64_vkCmdSubpassShadingHUAWEI(void)
+{
+    struct vkCmdSubpassShadingHUAWEI_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdSubpassShadingHUAWEI(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdSubpassShadingHUAWEI(void *args)
 {
@@ -30709,7 +36993,20 @@ static void thunk64_vkCmdSubpassShadingHUAWEI(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdSubpassShadingHUAWEI(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 1
+static void thunk32_vkCmdSubpassShadingHUAWEI(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdSubpassShadingHUAWEI(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer);
+}
+#else
 static void thunk32_vkCmdSubpassShadingHUAWEI(void *args)
 {
     struct
@@ -30719,7 +37016,18 @@ static void thunk32_vkCmdSubpassShadingHUAWEI(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdSubpassShadingHUAWEI(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk64_vkCmdTraceRaysIndirect2KHR(void)
+{
+    struct vkCmdTraceRaysIndirect2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.indirectDeviceAddress);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdTraceRaysIndirect2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.indirectDeviceAddress);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdTraceRaysIndirect2KHR(void *args)
 {
@@ -30728,7 +37036,22 @@ static void thunk64_vkCmdTraceRaysIndirect2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdTraceRaysIndirect2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->indirectDeviceAddress);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 2
+static void thunk32_vkCmdTraceRaysIndirect2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkDeviceAddress DECLSPEC_ALIGN(8) indirectDeviceAddress;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.indirectDeviceAddress);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdTraceRaysIndirect2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.indirectDeviceAddress);
+}
+#else
 static void thunk32_vkCmdTraceRaysIndirect2KHR(void *args)
 {
     struct
@@ -30739,7 +37062,22 @@ static void thunk32_vkCmdTraceRaysIndirect2KHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdTraceRaysIndirect2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->indirectDeviceAddress);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdTraceRaysIndirectKHR(void)
+{
+    struct vkCmdTraceRaysIndirectKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pRaygenShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pMissShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pHitShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pCallableShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.indirectDeviceAddress);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdTraceRaysIndirectKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pRaygenShaderBindingTable, params.pMissShaderBindingTable, params.pHitShaderBindingTable, params.pCallableShaderBindingTable, params.indirectDeviceAddress);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdTraceRaysIndirectKHR(void *args)
 {
@@ -30748,7 +37086,38 @@ static void thunk64_vkCmdTraceRaysIndirectKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdTraceRaysIndirectKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pRaygenShaderBindingTable, params->pMissShaderBindingTable, params->pHitShaderBindingTable, params->pCallableShaderBindingTable, params->indirectDeviceAddress);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdTraceRaysIndirectKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pRaygenShaderBindingTable;
+        PTR32 pMissShaderBindingTable;
+        PTR32 pHitShaderBindingTable;
+        PTR32 pCallableShaderBindingTable;
+        VkDeviceAddress DECLSPEC_ALIGN(8) indirectDeviceAddress;
+    } params;
+    VkStridedDeviceAddressRegionKHR pRaygenShaderBindingTable_host;
+    VkStridedDeviceAddressRegionKHR pMissShaderBindingTable_host;
+    VkStridedDeviceAddressRegionKHR pHitShaderBindingTable_host;
+    VkStridedDeviceAddressRegionKHR pCallableShaderBindingTable_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pRaygenShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pMissShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pHitShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pCallableShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.indirectDeviceAddress);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pRaygenShaderBindingTable), &pRaygenShaderBindingTable_host);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pMissShaderBindingTable), &pMissShaderBindingTable_host);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pHitShaderBindingTable), &pHitShaderBindingTable_host);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pCallableShaderBindingTable), &pCallableShaderBindingTable_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdTraceRaysIndirectKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pRaygenShaderBindingTable_host, &pMissShaderBindingTable_host, &pHitShaderBindingTable_host, &pCallableShaderBindingTable_host, params.indirectDeviceAddress);
+}
+#else
 static void thunk32_vkCmdTraceRaysIndirectKHR(void *args)
 {
     struct
@@ -30771,7 +37140,24 @@ static void thunk32_vkCmdTraceRaysIndirectKHR(void *args)
     convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params->pCallableShaderBindingTable), &pCallableShaderBindingTable_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdTraceRaysIndirectKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pRaygenShaderBindingTable_host, &pMissShaderBindingTable_host, &pHitShaderBindingTable_host, &pCallableShaderBindingTable_host, params->indirectDeviceAddress);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk64_vkCmdTraceRaysKHR(void)
+{
+    struct vkCmdTraceRaysKHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pRaygenShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pMissShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pHitShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pCallableShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.width);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.height);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.depth);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdTraceRaysKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pRaygenShaderBindingTable, params.pMissShaderBindingTable, params.pHitShaderBindingTable, params.pCallableShaderBindingTable, params.width, params.height, params.depth);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdTraceRaysKHR(void *args)
 {
@@ -30780,7 +37166,42 @@ static void thunk64_vkCmdTraceRaysKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdTraceRaysKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pRaygenShaderBindingTable, params->pMissShaderBindingTable, params->pHitShaderBindingTable, params->pCallableShaderBindingTable, params->width, params->height, params->depth);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 8
+static void thunk32_vkCmdTraceRaysKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        PTR32 pRaygenShaderBindingTable;
+        PTR32 pMissShaderBindingTable;
+        PTR32 pHitShaderBindingTable;
+        PTR32 pCallableShaderBindingTable;
+        uint32_t width;
+        uint32_t height;
+        uint32_t depth;
+    } params;
+    VkStridedDeviceAddressRegionKHR pRaygenShaderBindingTable_host;
+    VkStridedDeviceAddressRegionKHR pMissShaderBindingTable_host;
+    VkStridedDeviceAddressRegionKHR pHitShaderBindingTable_host;
+    VkStridedDeviceAddressRegionKHR pCallableShaderBindingTable_host;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pRaygenShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pMissShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pHitShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pCallableShaderBindingTable);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.width);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.height);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.depth);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pRaygenShaderBindingTable), &pRaygenShaderBindingTable_host);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pMissShaderBindingTable), &pMissShaderBindingTable_host);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pHitShaderBindingTable), &pHitShaderBindingTable_host);
+    convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params.pCallableShaderBindingTable), &pCallableShaderBindingTable_host);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdTraceRaysKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, &pRaygenShaderBindingTable_host, &pMissShaderBindingTable_host, &pHitShaderBindingTable_host, &pCallableShaderBindingTable_host, params.width, params.height, params.depth);
+}
+#else
 static void thunk32_vkCmdTraceRaysKHR(void *args)
 {
     struct
@@ -30805,7 +37226,31 @@ static void thunk32_vkCmdTraceRaysKHR(void *args)
     convert_VkStridedDeviceAddressRegionKHR_win32_to_host((const VkStridedDeviceAddressRegionKHR32 *)UlongToPtr(params->pCallableShaderBindingTable), &pCallableShaderBindingTable_host);
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdTraceRaysKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, &pRaygenShaderBindingTable_host, &pMissShaderBindingTable_host, &pHitShaderBindingTable_host, &pCallableShaderBindingTable_host, params->width, params->height, params->depth);
 }
-
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 15
+static void thunk64_vkCmdTraceRaysNV(void)
+{
+    struct vkCmdTraceRaysNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.raygenShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.raygenShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.missShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.missShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.missShaderBindingStride);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.hitShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.hitShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(8, UINT_PTR, params.hitShaderBindingStride);
+    VK_FAST_THUNK_GET_ARG(9, UINT_PTR, params.callableShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(10, UINT_PTR, params.callableShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(11, UINT_PTR, params.callableShaderBindingStride);
+    VK_FAST_THUNK_GET_ARG(12, UINT_PTR, params.width);
+    VK_FAST_THUNK_GET_ARG(13, UINT_PTR, params.height);
+    VK_FAST_THUNK_GET_ARG(14, UINT_PTR, params.depth);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdTraceRaysNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.raygenShaderBindingTableBuffer, params.raygenShaderBindingOffset, params.missShaderBindingTableBuffer, params.missShaderBindingOffset, params.missShaderBindingStride, params.hitShaderBindingTableBuffer, params.hitShaderBindingOffset, params.hitShaderBindingStride, params.callableShaderBindingTableBuffer, params.callableShaderBindingOffset, params.callableShaderBindingStride, params.width, params.height, params.depth);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdTraceRaysNV(void *args)
 {
@@ -30813,8 +37258,49 @@ static void thunk64_vkCmdTraceRaysNV(void *args)
 
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdTraceRaysNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->raygenShaderBindingTableBuffer, params->raygenShaderBindingOffset, params->missShaderBindingTableBuffer, params->missShaderBindingOffset, params->missShaderBindingStride, params->hitShaderBindingTableBuffer, params->hitShaderBindingOffset, params->hitShaderBindingStride, params->callableShaderBindingTableBuffer, params->callableShaderBindingOffset, params->callableShaderBindingStride, params->width, params->height, params->depth);
 }
-#endif /* _WIN64 */
-
+#endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 15
+static void thunk32_vkCmdTraceRaysNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) raygenShaderBindingTableBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) raygenShaderBindingOffset;
+        VkBuffer DECLSPEC_ALIGN(8) missShaderBindingTableBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) missShaderBindingOffset;
+        VkDeviceSize DECLSPEC_ALIGN(8) missShaderBindingStride;
+        VkBuffer DECLSPEC_ALIGN(8) hitShaderBindingTableBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) hitShaderBindingOffset;
+        VkDeviceSize DECLSPEC_ALIGN(8) hitShaderBindingStride;
+        VkBuffer DECLSPEC_ALIGN(8) callableShaderBindingTableBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) callableShaderBindingOffset;
+        VkDeviceSize DECLSPEC_ALIGN(8) callableShaderBindingStride;
+        uint32_t width;
+        uint32_t height;
+        uint32_t depth;
+    } params;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.raygenShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.raygenShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.missShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.missShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.missShaderBindingStride);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.hitShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.hitShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(8, UINT_PTR, params.hitShaderBindingStride);
+    VK_FAST_THUNK_GET_ARG(9, UINT_PTR, params.callableShaderBindingTableBuffer);
+    VK_FAST_THUNK_GET_ARG(10, UINT_PTR, params.callableShaderBindingOffset);
+    VK_FAST_THUNK_GET_ARG(11, UINT_PTR, params.callableShaderBindingStride);
+    VK_FAST_THUNK_GET_ARG(12, UINT_PTR, params.width);
+    VK_FAST_THUNK_GET_ARG(13, UINT_PTR, params.height);
+    VK_FAST_THUNK_GET_ARG(14, UINT_PTR, params.depth);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdTraceRaysNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.raygenShaderBindingTableBuffer, params.raygenShaderBindingOffset, params.missShaderBindingTableBuffer, params.missShaderBindingOffset, params.missShaderBindingStride, params.hitShaderBindingTableBuffer, params.hitShaderBindingOffset, params.hitShaderBindingStride, params.callableShaderBindingTableBuffer, params.callableShaderBindingOffset, params.callableShaderBindingStride, params.width, params.height, params.depth);
+}
+#else
 static void thunk32_vkCmdTraceRaysNV(void *args)
 {
     struct
@@ -30838,7 +37324,21 @@ static void thunk32_vkCmdTraceRaysNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdTraceRaysNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->raygenShaderBindingTableBuffer, params->raygenShaderBindingOffset, params->missShaderBindingTableBuffer, params->missShaderBindingOffset, params->missShaderBindingStride, params->hitShaderBindingTableBuffer, params->hitShaderBindingOffset, params->hitShaderBindingStride, params->callableShaderBindingTableBuffer, params->callableShaderBindingOffset, params->callableShaderBindingStride, params->width, params->height, params->depth);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdUpdateBuffer(void)
+{
+    struct vkCmdUpdateBuffer_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dataSize);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pData);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdUpdateBuffer(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.dstBuffer, params.dstOffset, params.dataSize, params.pData);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdUpdateBuffer(void *args)
 {
@@ -30847,7 +37347,28 @@ static void thunk64_vkCmdUpdateBuffer(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdUpdateBuffer(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->dstBuffer, params->dstOffset, params->dataSize, params->pData);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdUpdateBuffer(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkBuffer DECLSPEC_ALIGN(8) dstBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) dstOffset;
+        VkDeviceSize DECLSPEC_ALIGN(8) dataSize;
+        PTR32 pData;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dataSize);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pData);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdUpdateBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.dstBuffer, params.dstOffset, params.dataSize, (const void *)UlongToPtr(params.pData));
+}
+#else
 static void thunk32_vkCmdUpdateBuffer(void *args)
 {
     struct
@@ -30861,7 +37382,27 @@ static void thunk32_vkCmdUpdateBuffer(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdUpdateBuffer(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->dstBuffer, params->dstOffset, params->dataSize, (const void *)UlongToPtr(params->pData));
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 11
+static void thunk64_vkCmdWaitEvents(void)
+{
+    struct vkCmdWaitEvents_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.eventCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pEvents);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.srcStageMask);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstStageMask);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.memoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(6, void *, params.pMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.bufferMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(8, void *, params.pBufferMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(9, UINT_PTR, params.imageMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(10, void *, params.pImageMemoryBarriers);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWaitEvents(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.eventCount, params.pEvents, params.srcStageMask, params.dstStageMask, params.memoryBarrierCount, params.pMemoryBarriers, params.bufferMemoryBarrierCount, params.pBufferMemoryBarriers, params.imageMemoryBarrierCount, params.pImageMemoryBarriers);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWaitEvents(void *args)
 {
@@ -30870,7 +37411,49 @@ static void thunk64_vkCmdWaitEvents(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWaitEvents(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->eventCount, params->pEvents, params->srcStageMask, params->dstStageMask, params->memoryBarrierCount, params->pMemoryBarriers, params->bufferMemoryBarrierCount, params->pBufferMemoryBarriers, params->imageMemoryBarrierCount, params->pImageMemoryBarriers);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 11
+static void thunk32_vkCmdWaitEvents(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t eventCount;
+        PTR32 pEvents;
+        VkPipelineStageFlags srcStageMask;
+        VkPipelineStageFlags dstStageMask;
+        uint32_t memoryBarrierCount;
+        PTR32 pMemoryBarriers;
+        uint32_t bufferMemoryBarrierCount;
+        PTR32 pBufferMemoryBarriers;
+        uint32_t imageMemoryBarrierCount;
+        PTR32 pImageMemoryBarriers;
+    } params;
+    const VkMemoryBarrier *pMemoryBarriers_host;
+    const VkBufferMemoryBarrier *pBufferMemoryBarriers_host;
+    const VkImageMemoryBarrier *pImageMemoryBarriers_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.eventCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pEvents);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.srcStageMask);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.dstStageMask);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.memoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(6, UINT_PTR, params.pMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(7, UINT_PTR, params.bufferMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(8, UINT_PTR, params.pBufferMemoryBarriers);
+    VK_FAST_THUNK_GET_ARG(9, UINT_PTR, params.imageMemoryBarrierCount);
+    VK_FAST_THUNK_GET_ARG(10, UINT_PTR, params.pImageMemoryBarriers);
+    init_conversion_context(&ctx);
+    pMemoryBarriers_host = convert_VkMemoryBarrier_array_win32_to_host(&ctx, (const VkMemoryBarrier32 *)UlongToPtr(params.pMemoryBarriers), params.memoryBarrierCount);
+    pBufferMemoryBarriers_host = convert_VkBufferMemoryBarrier_array_win32_to_host(&ctx, (const VkBufferMemoryBarrier32 *)UlongToPtr(params.pBufferMemoryBarriers), params.bufferMemoryBarrierCount);
+    pImageMemoryBarriers_host = convert_VkImageMemoryBarrier_array_win32_to_host(&ctx, (const VkImageMemoryBarrier32 *)UlongToPtr(params.pImageMemoryBarriers), params.imageMemoryBarrierCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWaitEvents(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.eventCount, (const VkEvent *)UlongToPtr(params.pEvents), params.srcStageMask, params.dstStageMask, params.memoryBarrierCount, pMemoryBarriers_host, params.bufferMemoryBarrierCount, pBufferMemoryBarriers_host, params.imageMemoryBarrierCount, pImageMemoryBarriers_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdWaitEvents(void *args)
 {
     struct
@@ -30899,7 +37482,20 @@ static void thunk32_vkCmdWaitEvents(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWaitEvents(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->eventCount, (const VkEvent *)UlongToPtr(params->pEvents), params->srcStageMask, params->dstStageMask, params->memoryBarrierCount, pMemoryBarriers_host, params->bufferMemoryBarrierCount, pBufferMemoryBarriers_host, params->imageMemoryBarrierCount, pImageMemoryBarriers_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdWaitEvents2(void)
+{
+    struct vkCmdWaitEvents2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.eventCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pEvents);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pDependencyInfos);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWaitEvents2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.eventCount, params.pEvents, params.pDependencyInfos);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWaitEvents2(void *args)
 {
@@ -30908,7 +37504,31 @@ static void thunk64_vkCmdWaitEvents2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWaitEvents2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->eventCount, params->pEvents, params->pDependencyInfos);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdWaitEvents2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t eventCount;
+        PTR32 pEvents;
+        PTR32 pDependencyInfos;
+    } params;
+    const VkDependencyInfo *pDependencyInfos_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.eventCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pEvents);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pDependencyInfos);
+    init_conversion_context(&ctx);
+    pDependencyInfos_host = convert_VkDependencyInfo_array_win32_to_host(&ctx, (const VkDependencyInfo32 *)UlongToPtr(params.pDependencyInfos), params.eventCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWaitEvents2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.eventCount, (const VkEvent *)UlongToPtr(params.pEvents), pDependencyInfos_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdWaitEvents2(void *args)
 {
     struct
@@ -30926,7 +37546,20 @@ static void thunk32_vkCmdWaitEvents2(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWaitEvents2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->eventCount, (const VkEvent *)UlongToPtr(params->pEvents), pDependencyInfos_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdWaitEvents2KHR(void)
+{
+    struct vkCmdWaitEvents2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.eventCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pEvents);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pDependencyInfos);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWaitEvents2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.eventCount, params.pEvents, params.pDependencyInfos);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWaitEvents2KHR(void *args)
 {
@@ -30935,7 +37568,31 @@ static void thunk64_vkCmdWaitEvents2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWaitEvents2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->eventCount, params->pEvents, params->pDependencyInfos);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdWaitEvents2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t eventCount;
+        PTR32 pEvents;
+        PTR32 pDependencyInfos;
+    } params;
+    const VkDependencyInfo *pDependencyInfos_host;
+    struct conversion_context ctx;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.eventCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pEvents);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pDependencyInfos);
+    init_conversion_context(&ctx);
+    pDependencyInfos_host = convert_VkDependencyInfo_array_win32_to_host(&ctx, (const VkDependencyInfo32 *)UlongToPtr(params.pDependencyInfos), params.eventCount);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWaitEvents2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.eventCount, (const VkEvent *)UlongToPtr(params.pEvents), pDependencyInfos_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkCmdWaitEvents2KHR(void *args)
 {
     struct
@@ -30953,7 +37610,22 @@ static void thunk32_vkCmdWaitEvents2KHR(void *args)
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWaitEvents2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->eventCount, (const VkEvent *)UlongToPtr(params->pEvents), pDependencyInfos_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdWriteAccelerationStructuresPropertiesKHR(void)
+{
+    struct vkCmdWriteAccelerationStructuresPropertiesKHR_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.accelerationStructureCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pAccelerationStructures);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryType);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstQuery);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesKHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.accelerationStructureCount, params.pAccelerationStructures, params.queryType, params.queryPool, params.firstQuery);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteAccelerationStructuresPropertiesKHR(void *args)
 {
@@ -30962,7 +37634,30 @@ static void thunk64_vkCmdWriteAccelerationStructuresPropertiesKHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesKHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->accelerationStructureCount, params->pAccelerationStructures, params->queryType, params->queryPool, params->firstQuery);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdWriteAccelerationStructuresPropertiesKHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t accelerationStructureCount;
+        PTR32 pAccelerationStructures;
+        VkQueryType queryType;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t firstQuery;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.accelerationStructureCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pAccelerationStructures);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryType);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstQuery);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.accelerationStructureCount, (const VkAccelerationStructureKHR *)UlongToPtr(params.pAccelerationStructures), params.queryType, params.queryPool, params.firstQuery);
+}
+#else
 static void thunk32_vkCmdWriteAccelerationStructuresPropertiesKHR(void *args)
 {
     struct
@@ -30977,7 +37672,22 @@ static void thunk32_vkCmdWriteAccelerationStructuresPropertiesKHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesKHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->accelerationStructureCount, (const VkAccelerationStructureKHR *)UlongToPtr(params->pAccelerationStructures), params->queryType, params->queryPool, params->firstQuery);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdWriteAccelerationStructuresPropertiesNV(void)
+{
+    struct vkCmdWriteAccelerationStructuresPropertiesNV_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.accelerationStructureCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pAccelerationStructures);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryType);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstQuery);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesNV(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.accelerationStructureCount, params.pAccelerationStructures, params.queryType, params.queryPool, params.firstQuery);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteAccelerationStructuresPropertiesNV(void *args)
 {
@@ -30986,7 +37696,30 @@ static void thunk64_vkCmdWriteAccelerationStructuresPropertiesNV(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesNV(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->accelerationStructureCount, params->pAccelerationStructures, params->queryType, params->queryPool, params->firstQuery);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdWriteAccelerationStructuresPropertiesNV(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t accelerationStructureCount;
+        PTR32 pAccelerationStructures;
+        VkQueryType queryType;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t firstQuery;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.accelerationStructureCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pAccelerationStructures);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryType);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstQuery);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.accelerationStructureCount, (const VkAccelerationStructureNV *)UlongToPtr(params.pAccelerationStructures), params.queryType, params.queryPool, params.firstQuery);
+}
+#else
 static void thunk32_vkCmdWriteAccelerationStructuresPropertiesNV(void *args)
 {
     struct
@@ -31001,7 +37734,21 @@ static void thunk32_vkCmdWriteAccelerationStructuresPropertiesNV(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteAccelerationStructuresPropertiesNV(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->accelerationStructureCount, (const VkAccelerationStructureNV *)UlongToPtr(params->pAccelerationStructures), params->queryType, params->queryPool, params->firstQuery);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdWriteBufferMarker2AMD(void)
+{
+    struct vkCmdWriteBufferMarker2AMD_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.marker);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteBufferMarker2AMD(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.stage, params.dstBuffer, params.dstOffset, params.marker);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteBufferMarker2AMD(void *args)
 {
@@ -31010,7 +37757,28 @@ static void thunk64_vkCmdWriteBufferMarker2AMD(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteBufferMarker2AMD(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->stage, params->dstBuffer, params->dstOffset, params->marker);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdWriteBufferMarker2AMD(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineStageFlags2 DECLSPEC_ALIGN(8) stage;
+        VkBuffer DECLSPEC_ALIGN(8) dstBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) dstOffset;
+        uint32_t marker;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.marker);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteBufferMarker2AMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.stage, params.dstBuffer, params.dstOffset, params.marker);
+}
+#else
 static void thunk32_vkCmdWriteBufferMarker2AMD(void *args)
 {
     struct
@@ -31024,7 +37792,21 @@ static void thunk32_vkCmdWriteBufferMarker2AMD(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteBufferMarker2AMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->stage, params->dstBuffer, params->dstOffset, params->marker);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkCmdWriteBufferMarkerAMD(void)
+{
+    struct vkCmdWriteBufferMarkerAMD_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineStage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.marker);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteBufferMarkerAMD(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineStage, params.dstBuffer, params.dstOffset, params.marker);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteBufferMarkerAMD(void *args)
 {
@@ -31033,7 +37815,28 @@ static void thunk64_vkCmdWriteBufferMarkerAMD(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteBufferMarkerAMD(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineStage, params->dstBuffer, params->dstOffset, params->marker);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkCmdWriteBufferMarkerAMD(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineStageFlagBits pipelineStage;
+        VkBuffer DECLSPEC_ALIGN(8) dstBuffer;
+        VkDeviceSize DECLSPEC_ALIGN(8) dstOffset;
+        uint32_t marker;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineStage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dstBuffer);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.dstOffset);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.marker);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteBufferMarkerAMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineStage, params.dstBuffer, params.dstOffset, params.marker);
+}
+#else
 static void thunk32_vkCmdWriteBufferMarkerAMD(void *args)
 {
     struct
@@ -31047,7 +37850,22 @@ static void thunk32_vkCmdWriteBufferMarkerAMD(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteBufferMarkerAMD(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineStage, params->dstBuffer, params->dstOffset, params->marker);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk64_vkCmdWriteMicromapsPropertiesEXT(void)
+{
+    struct vkCmdWriteMicromapsPropertiesEXT_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.micromapCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pMicromaps);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryType);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstQuery);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteMicromapsPropertiesEXT(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.micromapCount, params.pMicromaps, params.queryType, params.queryPool, params.firstQuery);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteMicromapsPropertiesEXT(void *args)
 {
@@ -31056,7 +37874,30 @@ static void thunk64_vkCmdWriteMicromapsPropertiesEXT(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteMicromapsPropertiesEXT(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->micromapCount, params->pMicromaps, params->queryType, params->queryPool, params->firstQuery);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 6
+static void thunk32_vkCmdWriteMicromapsPropertiesEXT(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        uint32_t micromapCount;
+        PTR32 pMicromaps;
+        VkQueryType queryType;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t firstQuery;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.micromapCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pMicromaps);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.queryType);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(5, UINT_PTR, params.firstQuery);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteMicromapsPropertiesEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.micromapCount, (const VkMicromapEXT *)UlongToPtr(params.pMicromaps), params.queryType, params.queryPool, params.firstQuery);
+}
+#else
 static void thunk32_vkCmdWriteMicromapsPropertiesEXT(void *args)
 {
     struct
@@ -31071,7 +37912,20 @@ static void thunk32_vkCmdWriteMicromapsPropertiesEXT(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteMicromapsPropertiesEXT(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->micromapCount, (const VkMicromapEXT *)UlongToPtr(params->pMicromaps), params->queryType, params->queryPool, params->firstQuery);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdWriteTimestamp(void)
+{
+    struct vkCmdWriteTimestamp_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineStage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteTimestamp(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.pipelineStage, params.queryPool, params.query);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteTimestamp(void *args)
 {
@@ -31080,7 +37934,26 @@ static void thunk64_vkCmdWriteTimestamp(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteTimestamp(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->pipelineStage, params->queryPool, params->query);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdWriteTimestamp(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineStageFlagBits pipelineStage;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t query;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pipelineStage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteTimestamp(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.pipelineStage, params.queryPool, params.query);
+}
+#else
 static void thunk32_vkCmdWriteTimestamp(void *args)
 {
     struct
@@ -31093,7 +37966,20 @@ static void thunk32_vkCmdWriteTimestamp(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteTimestamp(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->pipelineStage, params->queryPool, params->query);
 }
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdWriteTimestamp2(void)
+{
+    struct vkCmdWriteTimestamp2_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteTimestamp2(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.stage, params.queryPool, params.query);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteTimestamp2(void *args)
 {
@@ -31102,7 +37988,26 @@ static void thunk64_vkCmdWriteTimestamp2(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteTimestamp2(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->stage, params->queryPool, params->query);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdWriteTimestamp2(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineStageFlags2 DECLSPEC_ALIGN(8) stage;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t query;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteTimestamp2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.stage, params.queryPool, params.query);
+}
+#else
 static void thunk32_vkCmdWriteTimestamp2(void *args)
 {
     struct
@@ -31115,7 +38020,20 @@ static void thunk32_vkCmdWriteTimestamp2(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteTimestamp2(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->stage, params->queryPool, params->query);
 }
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkCmdWriteTimestamp2KHR(void)
+{
+    struct vkCmdWriteTimestamp2KHR_params params;
 
+    VK_FAST_THUNK_GET_ARG(0, void *, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle(params.commandBuffer)->device->funcs.p_vkCmdWriteTimestamp2KHR(wine_cmd_buffer_from_handle(params.commandBuffer)->command_buffer, params.stage, params.queryPool, params.query);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkCmdWriteTimestamp2KHR(void *args)
 {
@@ -31124,7 +38042,26 @@ static void thunk64_vkCmdWriteTimestamp2KHR(void *args)
     wine_cmd_buffer_from_handle(params->commandBuffer)->device->funcs.p_vkCmdWriteTimestamp2KHR(wine_cmd_buffer_from_handle(params->commandBuffer)->command_buffer, params->stage, params->queryPool, params->query);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkCmdWriteTimestamp2KHR(void)
+{
+    struct
+    {
+        PTR32 commandBuffer;
+        VkPipelineStageFlags2 DECLSPEC_ALIGN(8) stage;
+        VkQueryPool DECLSPEC_ALIGN(8) queryPool;
+        uint32_t query;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.commandBuffer);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.stage);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.queryPool);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.query);
+    wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->device->funcs.p_vkCmdWriteTimestamp2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params.commandBuffer))->command_buffer, params.stage, params.queryPool, params.query);
+}
+#else
 static void thunk32_vkCmdWriteTimestamp2KHR(void *args)
 {
     struct
@@ -31137,6 +38074,7 @@ static void thunk32_vkCmdWriteTimestamp2KHR(void *args)
 
     wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->device->funcs.p_vkCmdWriteTimestamp2KHR(wine_cmd_buffer_from_handle((VkCommandBuffer)UlongToPtr(params->commandBuffer))->command_buffer, params->stage, params->queryPool, params->query);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static NTSTATUS thunk64_vkCompileDeferredNV(void *args)
@@ -34976,6 +41914,18 @@ static NTSTATUS thunk32_vkGetDeferredOperationResultKHR(void *args)
     return STATUS_SUCCESS;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkGetDescriptorEXT(void)
+{
+    struct vkGetDescriptorEXT_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.device);
+    VK_FAST_THUNK_GET_ARG(1, void *, params.pDescriptorInfo);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dataSize);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pDescriptor);
+    wine_device_from_handle(params.device)->funcs.p_vkGetDescriptorEXT(wine_device_from_handle(params.device)->device, params.pDescriptorInfo, params.dataSize, params.pDescriptor);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkGetDescriptorEXT(void *args)
 {
@@ -34984,7 +41934,31 @@ static void thunk64_vkGetDescriptorEXT(void *args)
     wine_device_from_handle(params->device)->funcs.p_vkGetDescriptorEXT(wine_device_from_handle(params->device)->device, params->pDescriptorInfo, params->dataSize, params->pDescriptor);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkGetDescriptorEXT(void)
+{
+    struct
+    {
+        PTR32 device;
+        PTR32 pDescriptorInfo;
+        PTR32 dataSize;
+        PTR32 pDescriptor;
+    } params;
+    VkDescriptorGetInfoEXT pDescriptorInfo_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.device);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.pDescriptorInfo);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.dataSize);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pDescriptor);
+    init_conversion_context(&ctx);
+    convert_VkDescriptorGetInfoEXT_win32_to_host(&ctx, (const VkDescriptorGetInfoEXT32 *)UlongToPtr(params.pDescriptorInfo), &pDescriptorInfo_host);
+    wine_device_from_handle((VkDevice)UlongToPtr(params.device))->funcs.p_vkGetDescriptorEXT(wine_device_from_handle((VkDevice)UlongToPtr(params.device))->device, &pDescriptorInfo_host, params.dataSize, (void *)UlongToPtr(params.pDescriptor));
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkGetDescriptorEXT(void *args)
 {
     struct
@@ -35002,6 +41976,7 @@ static void thunk32_vkGetDescriptorEXT(void *args)
     wine_device_from_handle((VkDevice)UlongToPtr(params->device))->funcs.p_vkGetDescriptorEXT(wine_device_from_handle((VkDevice)UlongToPtr(params->device))->device, &pDescriptorInfo_host, params->dataSize, (void *)UlongToPtr(params->pDescriptor));
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static NTSTATUS thunk64_vkGetDescriptorSetHostMappingVALVE(void *args)
@@ -39707,6 +46682,18 @@ static NTSTATUS thunk32_vkUnmapMemory(void *args)
     return STATUS_SUCCESS;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk64_vkUpdateDescriptorSetWithTemplate(void)
+{
+    struct vkUpdateDescriptorSetWithTemplate_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.device);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.descriptorSet);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.descriptorUpdateTemplate);
+    VK_FAST_THUNK_GET_ARG(3, void *, params.pData);
+    wine_device_from_handle(params.device)->funcs.p_vkUpdateDescriptorSetWithTemplate(wine_device_from_handle(params.device)->device, params.descriptorSet, params.descriptorUpdateTemplate, params.pData);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkUpdateDescriptorSetWithTemplate(void *args)
 {
@@ -39715,7 +46702,26 @@ static void thunk64_vkUpdateDescriptorSetWithTemplate(void *args)
     wine_device_from_handle(params->device)->funcs.p_vkUpdateDescriptorSetWithTemplate(wine_device_from_handle(params->device)->device, params->descriptorSet, params->descriptorUpdateTemplate, params->pData);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
+
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 4
+static void thunk32_vkUpdateDescriptorSetWithTemplate(void)
+{
+    struct
+    {
+        PTR32 device;
+        VkDescriptorSet DECLSPEC_ALIGN(8) descriptorSet;
+        VkDescriptorUpdateTemplate DECLSPEC_ALIGN(8) descriptorUpdateTemplate;
+        PTR32 pData;
+    } params;
 
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.device);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.descriptorSet);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.descriptorUpdateTemplate);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.pData);
+    wine_device_from_handle((VkDevice)UlongToPtr(params.device))->funcs.p_vkUpdateDescriptorSetWithTemplate(wine_device_from_handle((VkDevice)UlongToPtr(params.device))->device, params.descriptorSet, params.descriptorUpdateTemplate, (const void *)UlongToPtr(params.pData));
+}
+#else
 static void thunk32_vkUpdateDescriptorSetWithTemplate(void *args)
 {
     struct
@@ -39728,6 +46734,7 @@ static void thunk32_vkUpdateDescriptorSetWithTemplate(void *args)
 
     wine_device_from_handle((VkDevice)UlongToPtr(params->device))->funcs.p_vkUpdateDescriptorSetWithTemplate(wine_device_from_handle((VkDevice)UlongToPtr(params->device))->device, params->descriptorSet, params->descriptorUpdateTemplate, (const void *)UlongToPtr(params->pData));
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static NTSTATUS thunk64_vkUpdateDescriptorSetWithTemplateKHR(void *args)
@@ -39757,6 +46764,19 @@ static NTSTATUS thunk32_vkUpdateDescriptorSetWithTemplateKHR(void *args)
     return STATUS_SUCCESS;
 }
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk64_vkUpdateDescriptorSets(void)
+{
+    struct vkUpdateDescriptorSets_params params;
+
+    VK_FAST_THUNK_GET_ARG(0, void *, params.device);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.descriptorWriteCount);
+    VK_FAST_THUNK_GET_ARG(2, void *, params.pDescriptorWrites);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.descriptorCopyCount);
+    VK_FAST_THUNK_GET_ARG(4, void *, params.pDescriptorCopies);
+    wine_device_from_handle(params.device)->funcs.p_vkUpdateDescriptorSets(wine_device_from_handle(params.device)->device, params.descriptorWriteCount, params.pDescriptorWrites, params.descriptorCopyCount, params.pDescriptorCopies);
+}
+#else
 #ifdef _WIN64
 static void thunk64_vkUpdateDescriptorSets(void *args)
 {
@@ -39765,7 +46785,35 @@ static void thunk64_vkUpdateDescriptorSets(void *args)
     wine_device_from_handle(params->device)->funcs.p_vkUpdateDescriptorSets(wine_device_from_handle(params->device)->device, params->descriptorWriteCount, params->pDescriptorWrites, params->descriptorCopyCount, params->pDescriptorCopies);
 }
 #endif /* _WIN64 */
+#endif /* VK_FAST_THUNK */
 
+#if defined(VK_FAST_THUNK) && VK_FAST_THUNK_MAX_ARGS >= 5
+static void thunk32_vkUpdateDescriptorSets(void)
+{
+    struct
+    {
+        PTR32 device;
+        uint32_t descriptorWriteCount;
+        PTR32 pDescriptorWrites;
+        uint32_t descriptorCopyCount;
+        PTR32 pDescriptorCopies;
+    } params;
+    const VkWriteDescriptorSet *pDescriptorWrites_host;
+    const VkCopyDescriptorSet *pDescriptorCopies_host;
+    struct conversion_context ctx;
+
+    VK_FAST_THUNK_GET_ARG(0, UINT_PTR, params.device);
+    VK_FAST_THUNK_GET_ARG(1, UINT_PTR, params.descriptorWriteCount);
+    VK_FAST_THUNK_GET_ARG(2, UINT_PTR, params.pDescriptorWrites);
+    VK_FAST_THUNK_GET_ARG(3, UINT_PTR, params.descriptorCopyCount);
+    VK_FAST_THUNK_GET_ARG(4, UINT_PTR, params.pDescriptorCopies);
+    init_conversion_context(&ctx);
+    pDescriptorWrites_host = convert_VkWriteDescriptorSet_array_win32_to_host(&ctx, (const VkWriteDescriptorSet32 *)UlongToPtr(params.pDescriptorWrites), params.descriptorWriteCount);
+    pDescriptorCopies_host = convert_VkCopyDescriptorSet_array_win32_to_host(&ctx, (const VkCopyDescriptorSet32 *)UlongToPtr(params.pDescriptorCopies), params.descriptorCopyCount);
+    wine_device_from_handle((VkDevice)UlongToPtr(params.device))->funcs.p_vkUpdateDescriptorSets(wine_device_from_handle((VkDevice)UlongToPtr(params.device))->device, params.descriptorWriteCount, pDescriptorWrites_host, params.descriptorCopyCount, pDescriptorCopies_host);
+    free_conversion_context(&ctx);
+}
+#else
 static void thunk32_vkUpdateDescriptorSets(void *args)
 {
     struct
@@ -39786,6 +46834,7 @@ static void thunk32_vkUpdateDescriptorSets(void *args)
     wine_device_from_handle((VkDevice)UlongToPtr(params->device))->funcs.p_vkUpdateDescriptorSets(wine_device_from_handle((VkDevice)UlongToPtr(params->device))->device, params->descriptorWriteCount, pDescriptorWrites_host, params->descriptorCopyCount, pDescriptorCopies_host);
     free_conversion_context(&ctx);
 }
+#endif /* VK_FAST_THUNK */
 
 #ifdef _WIN64
 static NTSTATUS thunk64_vkWaitForFences(void *args)
-- 
2.39.0

