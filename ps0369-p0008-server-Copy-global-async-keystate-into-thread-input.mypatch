From 1b0245a852c262d7123e781cbc892465b172db4d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 1 Mar 2021 20:45:08 +0100
Subject: [PATCH 08/11] server: Copy global async keystate into thread input.

When GetKeyState is called from a background thread.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=26269

(for bioshock 2 remastered)
---
 dlls/user32/tests/input.c | 12 ++++++++----
 server/queue.c            | 17 +++++++++++++++++
 2 files changed, 25 insertions(+), 4 deletions(-)

diff --git a/dlls/user32/tests/input.c b/dlls/user32/tests/input.c
index c49015ebb84..7cb09ec4416 100644
--- a/dlls/user32/tests/input.c
+++ b/dlls/user32/tests/input.c
@@ -3726,7 +3726,7 @@ static DWORD WINAPI get_key_state_thread(void *arg)
 
     result = GetKeyState('X');
     if (!has_queue) todo_wine ok(!(result & 0x8000), "%d: expected that highest bit is unset, got %#x\n", i, result);
-    else todo_wine ok((result & 0x8000), "%d: expected that highest bit is set, got %#x\n", i, result);
+    else ok((result & 0x8000), "%d: expected that highest bit is set, got %#x\n", i, result);
     ok(!(result & 0x007e), "%d: expected that undefined bits are unset, got %#x\n", i, result);
 
     result = GetKeyState('C');
@@ -3738,7 +3738,7 @@ static DWORD WINAPI get_key_state_thread(void *arg)
     ok(ret, "GetKeyboardState failed, %u\n", GetLastError());
     result = keystate['X'];
     if (!has_queue) todo_wine ok(!result, "%d: expected that keystate is unset, got %#x\n", i, result);
-    else todo_wine ok(result, "%d: expected that keystate is set, got %#x\n", i, result);
+    else ok(result, "%d: expected that keystate is set, got %#x\n", i, result);
 
     result = keystate['C'];
     ok(!result, "%d: expected that C keystate is not set, got %#x\n", i, result);
@@ -3753,7 +3753,7 @@ static DWORD WINAPI get_key_state_thread(void *arg)
     ok(ret, "GetKeyboardState failed, %u\n", GetLastError());
     result = keystate['X'];
     if (!has_queue) ok(!result, "%d: expected that keystate is unset, got %#x\n", i, result);
-    else todo_wine ok(result, "%d: expected that keystate is set, got %#x\n", i, result);
+    else ok(result, "%d: expected that keystate is set, got %#x\n", i, result);
 
     result = keystate['C'];
     ok(!result, "%d: expected that C keystate is not set, got %#x\n", i, result);
@@ -3771,7 +3771,11 @@ static DWORD WINAPI get_key_state_thread(void *arg)
     ok(ret, "GetKeyboardState failed, %u\n", GetLastError());
     result = keystate['X'];
     if (!has_queue) ok(!result || broken(result) /* w2008 */, "%d: expected that keystate is unset, got %#x\n", i, result);
-    else todo_wine ok(result || broken(!result) /* w2008 */, "%d: expected that keystate is set, got %#x\n", i, result);
+    else
+    {
+        todo_wine_if(test->peek_message_main)
+        ok(result || broken(!result) /* w2008 */, "%d: expected that keystate is set, got %#x\n", i, result);
+    }
 
     result = keystate['C'];
     ok(!result, "%d: expected that C keystate is not set, got %#x\n", i, result);
diff --git a/server/queue.c b/server/queue.c
index 2660f2fc7ea..e46f3d74abf 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -3269,6 +3269,7 @@ DECL_HANDLER(get_thread_input)
 /* retrieve queue keyboard state for current thread or global async state */
 DECL_HANDLER(get_key_state)
 {
+    struct thread *foreground;
     struct desktop *desktop;
     data_size_t size = min( 256, get_reply_max_size() );
 
@@ -3293,6 +3294,22 @@ DECL_HANDLER(get_key_state)
     else if (req->key >= 0)
     {
         reply->state = current->queue->input->keystate[req->key & 0xff];
+
+        if (!(desktop = get_thread_desktop( current, 0 ))) return;
+        if (current->queue->input == desktop->foreground_input ||
+            !(foreground = get_foreground_thread( desktop, 0 )))
+        {
+            release_object( desktop );
+            return;
+        }
+
+        if (foreground != current && foreground->process == current->process)
+        {
+            reply->state = desktop->shared->keystate[req->key & 0xff];
+            memcpy( current->queue->input->keystate, desktop->shared->keystate, 256 );
+        }
+        release_object( foreground );
+        release_object( desktop );
     }
     else set_reply_data( current->queue->input->keystate, size );
 }

