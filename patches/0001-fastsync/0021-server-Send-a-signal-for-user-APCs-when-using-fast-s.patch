From d98efc7a1fbbc93e11a827859413c2ed736d45d7 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Tue, 9 Mar 2021 10:54:40 -0600
Subject: [PATCH 21/31] server: Send a signal for user APCs when using fast
 synchronization.

---
 server/fast_sync.c | 10 ++++++++++
 server/object.h    |  1 +
 server/thread.c    |  5 +++--
 3 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/server/fast_sync.c b/server/fast_sync.c
index 11111111111..11111111111 100644
--- a/server/fast_sync.c
+++ b/server/fast_sync.c
@@ -347,6 +347,11 @@ void fast_abandon_mutexes( thread_id_t tid )
     release_object( device );
 }
 
+int fast_user_apc_needs_signal(void)
+{
+    return !!fast_sync_device_object;
+}
+
 #else
 
 static struct fast_sync_device *get_fast_sync_device(void)
@@ -385,6 +390,11 @@ void fast_abandon_mutexes( thread_id_t tid )
 {
 }
 
+int fast_user_apc_needs_signal(void)
+{
+    return 0;
+}
+
 #endif
 
 DECL_HANDLER(get_fast_sync_device)
diff --git a/server/object.h b/server/object.h
index 11111111111..11111111111 100644
--- a/server/object.h
+++ b/server/object.h
@@ -237,6 +237,7 @@ extern struct fast_sync *fast_create_mutex( thread_id_t owner, unsigned int coun
 extern void fast_set_event( struct fast_sync *obj );
 extern void fast_reset_event( struct fast_sync *obj );
 extern void fast_abandon_mutexes( thread_id_t tid );
+extern int fast_user_apc_needs_signal(void);
 
 extern struct fast_sync *no_get_fast_sync( struct object *obj );
 
diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -1215,8 +1215,9 @@ static int queue_apc( struct process *process, struct thread *thread, struct thr
     {
         if (thread->state == TERMINATED) return 0;
         if (!(queue = get_apc_queue( thread, apc->call.type ))) return 1;
-        /* send signal for system APCs if needed */
-        if (queue == &thread->system_apc && list_empty( queue ) && !is_in_apc_wait( thread ))
+        /* send signal if needed */
+        if ((queue == &thread->system_apc || fast_user_apc_needs_signal())
+            && list_empty( queue ) && !is_in_apc_wait( thread ))
         {
             if (!send_thread_signal( thread, SIGUSR1 )) return 0;
         }
-- 
2.35.1

