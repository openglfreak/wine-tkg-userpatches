From d67b3ebfb1ea06d1f3f1a69a683b3dce664b8524 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 23 Dec 2020 14:44:10 +0100
Subject: [PATCH] ntdll: Allocate LFH memory bottom-up instead of top-down.

And only enable LFH for process heap after executable has been loaded
so that it doesn't allocate memory in its load range.
---
 dlls/ntdll/heap.c     | 2 +-
 dlls/ntdll/heap_lfh.c | 2 +-
 dlls/ntdll/loader.c   | 2 ++
 3 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/heap.c b/dlls/ntdll/heap.c
index 145a42ea040..67fe7eb4fb8 100644
--- a/dlls/ntdll/heap.c
+++ b/dlls/ntdll/heap.c
@@ -1681,7 +1681,7 @@ HANDLE WINAPI RtlCreateHeap( ULONG flags, PVOID addr, SIZE_T totalSize, SIZE_T c
     else if (!addr)
     {
         processHeap = subheap->heap;  /* assume the first heap we create is the process main heap */
-        processHeap->extended_type = HEAP_LFH;
+        processHeap->extended_type = HEAP_STD;
         list_init( &processHeap->entry );
     }
 
diff --git a/dlls/ntdll/heap_lfh.c b/dlls/ntdll/heap_lfh.c
index 7a03c27c26f..07acf9123e0 100644
--- a/dlls/ntdll/heap_lfh.c
+++ b/dlls/ntdll/heap_lfh.c
@@ -201,7 +201,7 @@ static void *LFH_memory_allocate(size_t size)
     SIZE_T alloc_size = size;
 
     if (NtAllocateVirtualMemory(NtCurrentProcess(), (void **)&addr, 0, &alloc_size,
-                                MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN, PAGE_READWRITE))
+                                MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE))
         return NULL;
 
     return addr;
diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index ab92df952d1..7f242d3b17b 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -4213,7 +4213,8 @@ void __wine_process_init(void)
     ULONG_PTR val;
     TEB *teb = NtCurrentTeb();
     PEB *peb = teb->Peb;
     DWORD i;
+    DWORD hci = 2;
 
     peb->LdrData            = &ldr;
     peb->FastPebLock        = &peb_lock;
@@ -4313,5 +4314,7 @@ void __wine_process_init(void)
     }
 #endif
+ 
+    RtlSetHeapInformation( GetProcessHeap(), HeapCompatibilityInformation, &hci, sizeof(hci) );
 
     /* the main exe needs to be the first in the load order list */
     RemoveEntryList( &wm->ldr.InLoadOrderLinks );
