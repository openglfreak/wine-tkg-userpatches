From 2cdfc3d1c3c9293654c2f5fca439cf262f4bbe19 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 8 Mar 2022 19:33:54 +0100
Subject: [PATCH 11/22] winex11.drv: Use a _WINE_HWND property in addition to
 an Xlib context.

To track Window / HWND relationship.

The XSaveContext / XFindContext only work within one process. For
other processes to know about Wine windows, we have to use a property.

CW-Bug-Id: #19553
CW-Bug-Id: #19644
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=2155
---
 dlls/winex11.drv/window.c      | 24 ++++++++++++++++++++++--
 dlls/winex11.drv/x11drv.h      |  1 +
 dlls/winex11.drv/x11drv_main.c |  3 +++
 3 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -3211,8 +3211,17 @@ void init_win_context(void)
     cursor_context = XUniqueContext();
 }
 
+static int handle_hwnd_for_window_error( Display *display, XErrorEvent *event, void *arg )
+{
+    return 1;
+}
+
 HWND get_hwnd_for_window( Display *display, Window window )
 {
+    unsigned long count, remaining;
+    unsigned char *property;
+    int format;
+    Atom type;
     HWND hwnd;
 
     if (!window) return 0;
@@ -3222,8 +3231,15 @@ HWND get_hwnd_for_window( Display *display, Window window )
 
     if (!XFindContext( display, window, winContext, (char **)&hwnd )) return hwnd;
 
-    WARN( "Failed to find HWND for window %lx\n", window );
-    return 0;
+    hwnd = 0;
+    X11DRV_expect_error( display, handle_hwnd_for_window_error, NULL );
+    if (XGetWindowProperty( display, window, x11drv_atom(_WINE_HWND), 0, ~0UL, False, XA_CARDINAL,
+                            &type, &format, &count, &remaining, &property )) count = 0;
+    if (!X11DRV_check_error() && count && format == 32 && property) hwnd = *(HWND *)property;
+    else WARN("Failed to find HWND for window %lx\n", window);
+    XFree(property);
+
+    return hwnd;
 }
 
 void set_hwnd_for_window( Display *display, Window window, HWND hwnd )
@@ -3234,4 +3250,8 @@ void set_hwnd_for_window( Display *display, Window window, HWND hwnd )
 
     if (!hwnd) XDeleteContext( display, window, winContext );
     else XSaveContext( display, window, winContext, (char *)hwnd );
+
+    if (!hwnd) XDeleteProperty( display, window, x11drv_atom(_WINE_HWND) );
+    else XChangeProperty( display, window, x11drv_atom(_WINE_HWND), XA_CARDINAL, 32,
+                          PropModeReplace, (unsigned char *)&hwnd, sizeof(hwnd) / 4 );
 }
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -514,6 +514,7 @@ enum x11drv_atoms
     XATOM__GTK_WORKAREAS_D0,
     XATOM__XEMBED,
     XATOM__XEMBED_INFO,
+    XATOM__WINE_HWND,
     XATOM_XdndAware,
     XATOM_XdndEnter,
     XATOM_XdndPosition,
diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -193,6 +193,7 @@ static const char * const atom_names[NB_XATOMS - FIRST_XATOM] =
     "_GTK_WORKAREAS_D0",
     "_XEMBED",
     "_XEMBED_INFO",
+    "_WINE_HWND",
     "XdndAware",
     "XdndEnter",
     "XdndPosition",
@@ -246,6 +247,8 @@ static inline BOOL ignore_error( Display *display, XErrorEvent *event )
 {
     if ((event->request_code == X_SetInputFocus ||
          event->request_code == X_ChangeWindowAttributes ||
+         event->request_code == X_ChangeProperty ||
+         event->request_code == X_DeleteProperty ||
          event->request_code == X_SendEvent) &&
         (event->error_code == BadMatch ||
          event->error_code == BadWindow)) return TRUE;
-- 
2.37.1

