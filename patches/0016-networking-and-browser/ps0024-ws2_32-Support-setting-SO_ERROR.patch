From: Alex Henrie <alexhenrie24@gmail.com>
Subject: [PATCH] ws2_32: Support setting SO_ERROR
Message-Id: <20211020154829.6374-1-alexhenrie24@gmail.com>
Date: Wed, 20 Oct 2021 09:48:29 -0600

Signed-off-by: Alex Henrie <alexhenrie24@gmail.com>
---
Qt sets this option, see
https://code.qt.io/cgit/qt/qtbase.git/tree/src/network/socket/qnativesocketengine_win.cpp#n658
---
 dlls/ws2_32/socket.c     |  4 +---
 dlls/ws2_32/tests/sock.c | 10 ++++++++--
 include/wine/afd.h       |  1 +
 server/sock.c            | 38 +++++++++++++++++++++++++++-----------
 4 files changed, 37 insertions(+), 16 deletions(-)

diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
index cbf9fce4519..1e027eaa36c 100644
--- a/dlls/ws2_32/socket.c
+++ b/dlls/ws2_32/socket.c
@@ -2802,9 +2802,7 @@ int WINAPI setsockopt( SOCKET s, int level, int optname, const char *optval, int
         }
 
         case SO_ERROR:
-            FIXME( "SO_ERROR, stub!\n" );
-            SetLastError( WSAENOPROTOOPT );
-            return -1;
+            return server_setsockopt( s, IOCTL_AFD_WINE_SET_SO_ERROR, optval, optlen );
 
         case SO_KEEPALIVE:
             return server_setsockopt( s, IOCTL_AFD_WINE_SET_SO_KEEPALIVE, optval, optlen );
diff --git a/dlls/ws2_32/tests/sock.c b/dlls/ws2_32/tests/sock.c
index 94c87e36d50..b3626be612e 100644
--- a/dlls/ws2_32/tests/sock.c
+++ b/dlls/ws2_32/tests/sock.c
@@ -1352,7 +1352,6 @@ static void test_set_getsockopt(void)
     SetLastError(0xdeadbeef);
     i = 1234;
     err = setsockopt(s, SOL_SOCKET, SO_ERROR, (char *) &i, size);
-    todo_wine
     ok( !err && !WSAGetLastError(),
         "got %d with %d (expected 0 with 0)\n",
         err, WSAGetLastError());
@@ -1363,7 +1362,14 @@ static void test_set_getsockopt(void)
     ok( !err && !WSAGetLastError(),
         "got %d with %d (expected 0 with 0)\n",
         err, WSAGetLastError());
-    todo_wine
+    ok (i == 1234, "got %d (expected 1234)\n", i);
+
+    SetLastError(0xdeadbeef);
+    i = 4321;
+    err = getsockopt(s, SOL_SOCKET, SO_ERROR, (char *) &i, &size);
+    ok( !err && !WSAGetLastError(),
+        "got %d with %d (expected 0 with 0)\n",
+        err, WSAGetLastError());
     ok (i == 1234, "got %d (expected 1234)\n", i);
 
     /* Test invalid optlen */
diff --git a/include/wine/afd.h b/include/wine/afd.h
index b6aad067770..ef770a73f96 100644
--- a/include/wine/afd.h
+++ b/include/wine/afd.h
@@ -284,6 +284,7 @@ C_ASSERT( sizeof(struct afd_get_events_params) == 56 );
 #define IOCTL_AFD_WINE_GET_IP_RECVTOS                   WINE_AFD_IOC(295)
 #define IOCTL_AFD_WINE_SET_IP_RECVTOS                   WINE_AFD_IOC(296)
 #define IOCTL_AFD_WINE_SEND_BACKLOG_QUERY               WINE_AFD_IOC(297)
+#define IOCTL_AFD_WINE_SET_SO_ERROR                     WINE_AFD_IOC(297)
 
 struct afd_iovec
 {
diff --git a/server/sock.c b/server/sock.c
index 46d92c93abf..ebd5781c341 100644
--- a/server/sock.c
+++ b/server/sock.c
@@ -193,6 +193,7 @@ struct sock
     unsigned int        message;     /* message to send */
     obj_handle_t        wparam;      /* message wparam (socket handle) */
     int                 errors[AFD_POLL_BIT_COUNT]; /* event errors */
+    unsigned int        last_error;  /* most recent error code */
     timeout_t           connect_time;/* time the socket was connected */
     struct sock        *deferred;    /* socket that waits for a deferred accept */
     struct async_queue  read_q;      /* queue for asynchronous reads */
@@ -1025,6 +1026,7 @@ static void post_socket_event( struct sock *sock, enum afd_poll_bit event_bit, i
         sock->pending_events |= event;
         sock->reported_events |= event;
         sock->errors[event_bit] = error;
+        sock->last_error = sock_get_error( error );
     }
 }
 
@@ -1040,6 +1042,7 @@ static void sock_dispatch_events( struct sock *sock, enum connection_state prevs
         {
             post_socket_event( sock, AFD_POLL_BIT_CONNECT, 0 );
             sock->errors[AFD_POLL_BIT_CONNECT_ERR] = 0;
+            sock->last_error = 0;
         }
         if (event & (POLLERR | POLLHUP))
             post_socket_event( sock, AFD_POLL_BIT_CONNECT_ERR, error );
@@ -1503,6 +1506,7 @@ static struct sock *create_socket(void)
     init_async_queue( &sock->connect_q );
     init_async_queue( &sock->poll_q );
     memset( sock->errors, 0, sizeof(sock->errors) );
+    sock->last_error = 0;
     list_init( &sock->accept_list );
     return sock;
 }
@@ -2756,7 +2760,6 @@ static void sock_ioctl( struct fd *fd, ioctl_code_t code, struct async *async )
     {
         int error;
         socklen_t len = sizeof(error);
-        unsigned int i;
 
         if (get_reply_max_size() < sizeof(error))
         {
@@ -2770,19 +2773,32 @@ static void sock_ioctl( struct fd *fd, ioctl_code_t code, struct async *async )
             return;
         }
 
-        if (!error)
+        if (error)
+            sock->last_error = sock_get_error( error );
+
+        set_reply_data( &sock->last_error, sizeof(sock->last_error) );
+        return;
+    }
+
+    case IOCTL_AFD_WINE_SET_SO_ERROR:
+    {
+        int error;
+        socklen_t len = sizeof(error);
+
+        if (get_req_data_size() < sizeof(sock->last_error))
         {
-            for (i = 0; i < ARRAY_SIZE( sock->errors ); ++i)
-            {
-                if (sock->errors[i])
-                {
-                    error = sock_get_error( sock->errors[i] );
-                    break;
-                }
-            }
+            set_error( STATUS_BUFFER_TOO_SMALL );
+            return;
+        }
+
+        /* clear the native error, if any */
+        if (getsockopt( unix_fd, SOL_SOCKET, SO_ERROR, (char *)&error, &len ) < 0)
+        {
+            set_error( sock_get_ntstatus( errno ) );
+            return;
         }
 
-        set_reply_data( &error, sizeof(error) );
+        sock->last_error = *(unsigned int *)get_req_data();
         return;
     }
 

-- 
2.35.1

