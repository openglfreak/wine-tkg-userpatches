From: Eric Pouech <eric.pouech@gmail.com>
Subject: [PATCH 4/4] dlls/kernelbase: in CreateProcess, allocate a console for CUI process
Message-Id: <164450492848.734344.6741255090302624765.stgit@euterpe>
Date: Thu, 10 Feb 2022 17:34:07 +0100
In-Reply-To: <164450483602.734344.17484220244981387052.stgit@euterpe>
References: <164450483602.734344.17484220244981387052.stgit@euterpe>

in CreateProcess, if:
- parent isn't attached to any console
- CreateProcess's flag isn't set with DETACHED_PROCESS nor
  CREATE_NEW_CONSOLE
- child is a CUI program
then a console must be allocated for the child

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52048
Signed-off-by: Eric Pouech <eric.pouech@gmail.com>

---
 dlls/kernel32/tests/console.c | 2 +-
 dlls/kernelbase/process.c     | 6 +++++-
 programs/services/services.c  | 2 +-
 3 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/dlls/kernel32/tests/console.c b/dlls/kernel32/tests/console.c
index 11111111111..11111111111 100644
--- a/dlls/kernel32/tests/console.c
+++ b/dlls/kernel32/tests/console.c
@@ -4707,7 +4707,7 @@ static void test_CreateProcess_CUI(void)
             GetExitCodeProcess(info.hProcess, &ec);
     res = GetExitCodeProcess(info.hProcess, &ec);
     ok(res, "Couldn't grab exit code %u\n", GetLastError());
-    todo_wine ok(!res || ec == 0, "Got unexpected error code %u\n", ec);
+    ok(!res || ec == 0, "Got unexpected error code %u\n", ec);
     CloseHandle(info.hProcess);
 }
 
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 11111111111..11111111111 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -193,7 +193,11 @@ static RTL_USER_PROCESS_PARAMETERS *create_process_params( const WCHAR *filename
 
     if (flags & CREATE_NEW_PROCESS_GROUP) params->ConsoleFlags = 1;
     if (flags & CREATE_NEW_CONSOLE) params->ConsoleHandle = CONSOLE_HANDLE_ALLOC;
-    else if (!(flags & DETACHED_PROCESS)) params->ConsoleHandle = NtCurrentTeb()->Peb->ProcessParameters->ConsoleHandle;
+    else if (!(flags & DETACHED_PROCESS))
+    {
+        params->ConsoleHandle = NtCurrentTeb()->Peb->ProcessParameters->ConsoleHandle;
+        if (!params->ConsoleHandle) params->ConsoleHandle = CONSOLE_HANDLE_ALLOC;
+    }
 
     if (startup->dwFlags & STARTF_USESTDHANDLES)
     {
diff --git a/programs/services/services.c b/programs/services/services.c
index 11111111111..11111111111 100644
--- a/programs/services/services.c
+++ b/programs/services/services.c
@@ -1119,7 +1119,7 @@ found:
     process->use_count++;
     service_unlock(service_entry);
 
-    r = CreateProcessW(NULL, path, NULL, NULL, FALSE, CREATE_UNICODE_ENVIRONMENT, environment, NULL, &si, &pi);
+    r = CreateProcessW(NULL, path, NULL, NULL, FALSE, CREATE_UNICODE_ENVIRONMENT | DETACHED_PROCESS, environment, NULL, &si, &pi);
     HeapFree(GetProcessHeap(), 0, path);
     if (!r)
     {

