From e96953a86cb4f959bf78460608ddf31ad7c05be6 Mon Sep 17 00:00:00 2001
From: Torge Matthies <tmatthies@codeweavers.com>
Date: Wed, 14 Dec 2022 10:14:42 +0100
Subject: [PATCH 3/3] ntdll: Insert yields and delays into
 RtlQueryPerformanceCounter loops.

---
 dlls/ntdll/ntdll_misc.h | 14 ++++++++
 dlls/ntdll/time.c       | 80 ++++++++++++++++++++++++++++++++++++++---
 2 files changed, 90 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
index 11111111111..11111111111 100644
--- a/dlls/ntdll/ntdll_misc.h
+++ b/dlls/ntdll/ntdll_misc.h
@@ -214,4 +214,18 @@ extern BOOLEAN try_mui_find_entry( HMODULE mod, const LDR_RESOURCE_INFO *info, U
 extern void try_mui_redirect_module( HMODULE *mod, const IMAGE_RESOURCE_DATA_ENTRY *entry ) DECLSPEC_HIDDEN;
 extern void cleanup_mui( HMODULE mod ) DECLSPEC_HIDDEN;
 
+struct qpc_opt_data
+{
+    unsigned int   count;
+    void          *frame_addr;
+    void          *return_addr;
+};
+
+C_ASSERT( sizeof(struct qpc_opt_data) <= sizeof(((TEB *)0)->User32Reserved) );
+
+static inline struct qpc_opt_data *ntdll_get_qpc_opt_data(void)
+{
+    return (struct qpc_opt_data *)NtCurrentTeb()->User32Reserved;
+}
+
 #endif
diff --git a/dlls/ntdll/time.c b/dlls/ntdll/time.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/time.c
+++ b/dlls/ntdll/time.c
@@ -387,10 +387,7 @@ static UINT64 multiply_tsc(UINT64 a, UINT64 b)
     return (ah * bh) + (m >> 32);
 }
 
-/******************************************************************************
- *  RtlQueryPerformanceCounter   [NTDLL.@]
- */
-BOOL WINAPI DECLSPEC_HOTPATCH RtlQueryPerformanceCounter( LARGE_INTEGER *counter )
+BOOL WINAPI query_performance_counter( LARGE_INTEGER *counter )
 {
     if (user_shared_data->u3.QpcBypassEnabled & SHARED_GLOBAL_FLAGS_QPC_BYPASS_ENABLED)
     {
@@ -419,6 +416,81 @@ BOOL WINAPI DECLSPEC_HOTPATCH RtlQueryPerformanceCounter( LARGE_INTEGER *counter
     return TRUE;
 }
 
+#ifdef __GNUC__
+#define likely(x) __builtin_expect(!!(x), 1)
+#else
+#define likely(x) (!!(x))
+#endif
+
+/* How many times to let the loop spin, before inserting yields */
+#define MAX_SPIN_COUNT 100
+/* How many times to check the frame address and return address */
+#define CHECK_COUNT 20
+/* After this many loops, start inserting delays */
+#define DELAY_AFTER 1000
+
+/******************************************************************************
+ *  RtlQueryPerformanceCounter   [NTDLL.@]
+ */
+BOOL WINAPI DECLSPEC_HOTPATCH RtlQueryPerformanceCounter( LARGE_INTEGER *counter )
+{
+    struct qpc_opt_data *qpc_opt_data = ntdll_get_qpc_opt_data();
+
+    query_performance_counter( counter );
+
+    if (likely(qpc_opt_data->count < MAX_SPIN_COUNT - CHECK_COUNT))
+    {
+        qpc_opt_data->count++;
+    }
+    else if (qpc_opt_data->count == MAX_SPIN_COUNT - CHECK_COUNT)
+    {
+        qpc_opt_data->count++;
+        qpc_opt_data->frame_addr = _AddressOfReturnAddress();
+        qpc_opt_data->return_addr = _ReturnAddress();
+    }
+    else if (qpc_opt_data->count < MAX_SPIN_COUNT)
+    {
+        if (likely(_AddressOfReturnAddress() == qpc_opt_data->frame_addr &&
+            _ReturnAddress() == qpc_opt_data->return_addr))
+        {
+            qpc_opt_data->count++;
+        }
+        else
+        {
+            qpc_opt_data->count = 0;
+        }
+    }
+    else /*if (qpc_opt_data->count < DELAY_AFTER)*/
+    {
+        if (likely(_AddressOfReturnAddress() == qpc_opt_data->frame_addr &&
+            _ReturnAddress() == qpc_opt_data->return_addr))
+        {
+            NtYieldExecution();
+            qpc_opt_data->count++;
+        }
+        else
+        {
+            qpc_opt_data->count = 0;
+        }
+    }
+    /*else
+    {
+        if (likely(_AddressOfReturnAddress() == qpc_opt_data->frame_addr &&
+            _ReturnAddress() == qpc_opt_data->return_addr))
+        {
+            LARGE_INTEGER delay;
+            delay.QuadPart = -333;
+            NtDelayExecution( FALSE, &delay );
+            qpc_opt_data->count++;
+        }
+        else
+        {
+            qpc_opt_data->count = 0;
+        }
+    }*/
+    return TRUE;
+}
+
 /******************************************************************************
  *  RtlQueryPerformanceFrequency   [NTDLL.@]
  */
-- 
2.39.0

