From 2216905960b2c6271011955f7d136149cb8695cd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sun, 17 Oct 2021 18:47:35 +0200
Subject: [PATCH 13/14] user32: Write current display mode to the registry.

---
 dlls/win32u/sysparams.c | 126 ++++++++++++++++++++++++++++++++--------
 1 file changed, 102 insertions(+), 24 deletions(-)

diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index b3935fe529c..ad98bbdabb6 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -235,6 +235,52 @@ static const WCHAR default_fixed_output_w[] =
     '.','F','i','x','e','d','O','u','t','p','u','t',0
 };
 
+static const WCHAR current_bits_per_pel_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','B','i','t','s','P','e','r','P','e','l',0
+};
+static const WCHAR current_x_resolution_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','X','R','e','s','o','l','u','t','i','o','n',0
+};
+static const WCHAR current_y_resolution_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','Y','R','e','s','o','l','u','t','i','o','n',0
+};
+static const WCHAR current_v_refresh_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','V','R','e','f','r','e','s','h',0
+};
+static const WCHAR current_flags_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','F','l','a','g','s',0
+};
+static const WCHAR current_x_panning_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','X','P','a','n','n','i','n','g',0
+};
+static const WCHAR current_y_panning_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','Y','P','a','n','n','i','n','g',0
+};
+static const WCHAR current_orientation_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','O','r','i','e','n','t','a','t','i','o','n',0
+};
+static const WCHAR current_fixed_output_w[] =
+{
+    'C','u','r','r','e','n','t','S','e','t','t','i','n','g','s',
+    '.','F','i','x','e','d','O','u','t','p','u','t',0
+};
+
 #define NULLDRV_DEFAULT_HMONITOR ((HMONITOR)(UINT_PTR)(0x10000 + 1))
 
 /* Cached display device information */
@@ -1786,8 +1832,18 @@ static BOOL check_display_mode( UNICODE_STRING *devname, DEVMODEW *mode )
     return FALSE;
 }
 
-static BOOL read_registry_settings( const WCHAR *path, DEVMODEW *dev_mode )
+static BOOL read_registry_settings( const WCHAR *path, BOOL current, DEVMODEW *dev_mode )
 {
+    const WCHAR *bits_per_pel = current ? current_bits_per_pel_w : default_bits_per_pel_w;
+    const WCHAR *x_resolution = current ? current_x_resolution_w : default_x_resolution_w;
+    const WCHAR *y_resolution = current ? current_y_resolution_w : default_y_resolution_w;
+    const WCHAR *v_refresh = current ? current_v_refresh_w : default_v_refresh_w;
+    const WCHAR *flags = current ? current_flags_w : default_flags_w;
+    const WCHAR *x_panning = current ? current_x_panning_w : default_x_panning_w;
+    const WCHAR *y_panning = current ? current_y_panning_w : default_y_panning_w;
+    const WCHAR *orientation = current ? current_orientation_w : default_orientation_w;
+    const WCHAR *fixed_output = current ? current_fixed_output_w : default_fixed_output_w;
+
     char buffer[offsetof(KEY_VALUE_PARTIAL_INFORMATION, Data[sizeof(DWORD)])];
     KEY_VALUE_PARTIAL_INFORMATION *value = (void *)buffer;
     BOOL ret = TRUE;
@@ -1805,55 +1861,55 @@ static BOOL read_registry_settings( const WCHAR *path, DEVMODEW *dev_mode )
         return FALSE;
     }
 
-    if (ret && (ret = query_reg_value( key, default_bits_per_pel_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, bits_per_pel, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmBitsPerPel = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_BITSPERPEL;
     }
-    if (ret && (ret = query_reg_value( key, default_x_resolution_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, x_resolution, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmPelsWidth = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_PELSWIDTH;
     }
-    if (ret && (ret = query_reg_value( key, default_y_resolution_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, y_resolution, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmPelsHeight = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_PELSHEIGHT;
     }
-    if (ret && (ret = query_reg_value( key, default_v_refresh_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, v_refresh, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmDisplayFrequency = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_DISPLAYFREQUENCY;
     }
-    if (ret && (ret = query_reg_value( key, default_flags_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, flags, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmDisplayFlags = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_DISPLAYFLAGS;
     }
-    if (ret && (ret = query_reg_value( key, default_x_panning_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, x_panning, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmPosition.x = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_POSITION;
     }
-    if (ret && (ret = query_reg_value( key, default_y_panning_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, y_panning, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmPosition.y = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_POSITION;
     }
-    if (ret && (ret = query_reg_value( key, default_orientation_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, orientation, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
     {
         dev_mode->dmDisplayOrientation = *(DWORD *)value->Data;
         dev_mode->dmFields |= DM_DISPLAYORIENTATION;
     }
-    if (ret && (ret = query_reg_value( key, default_fixed_output_w, value, sizeof(buffer) )) &&
+    if (ret && (ret = query_reg_value( key, fixed_output, value, sizeof(buffer) )) &&
         value->Type == REG_DWORD && value->DataLength == sizeof(DWORD))
         dev_mode->dmDisplayFixedOutput = *(DWORD *)value->Data;
 
@@ -1862,8 +1918,18 @@ static BOOL read_registry_settings( const WCHAR *path, DEVMODEW *dev_mode )
     return ret;
 }
 
-static BOOL write_registry_settings( const WCHAR *path, const DEVMODEW *devmode )
+static BOOL write_registry_settings( const WCHAR *path, BOOL current, const DEVMODEW *devmode )
 {
+    const WCHAR *bits_per_pel = current ? current_bits_per_pel_w : default_bits_per_pel_w;
+    const WCHAR *x_resolution = current ? current_x_resolution_w : default_x_resolution_w;
+    const WCHAR *y_resolution = current ? current_y_resolution_w : default_y_resolution_w;
+    const WCHAR *v_refresh = current ? current_v_refresh_w : default_v_refresh_w;
+    const WCHAR *flags = current ? current_flags_w : default_flags_w;
+    const WCHAR *x_panning = current ? current_x_panning_w : default_x_panning_w;
+    const WCHAR *y_panning = current ? current_y_panning_w : default_y_panning_w;
+    const WCHAR *orientation = current ? current_orientation_w : default_orientation_w;
+    const WCHAR *fixed_output = current ? current_fixed_output_w : default_fixed_output_w;
+
     HANDLE mutex;
     HKEY key;
 
@@ -1878,23 +1944,23 @@ static BOOL write_registry_settings( const WCHAR *path, const DEVMODEW *devmode
         return FALSE;
     }
 
-    set_reg_value( key, default_bits_per_pel_w, REG_DWORD,
+    set_reg_value( key, bits_per_pel, REG_DWORD,
                    &devmode->dmBitsPerPel, sizeof(DWORD) );
-    set_reg_value( key, default_x_resolution_w, REG_DWORD,
+    set_reg_value( key, x_resolution, REG_DWORD,
                    &devmode->dmPelsWidth, sizeof(DWORD) );
-    set_reg_value( key, default_y_resolution_w, REG_DWORD,
+    set_reg_value( key, y_resolution, REG_DWORD,
                    &devmode->dmPelsHeight, sizeof(DWORD) );
-    set_reg_value( key, default_v_refresh_w, REG_DWORD,
+    set_reg_value( key, v_refresh, REG_DWORD,
                    &devmode->dmDisplayFrequency, sizeof(DWORD) );
-    set_reg_value( key, default_flags_w, REG_DWORD,
+    set_reg_value( key, flags, REG_DWORD,
                    &devmode->dmDisplayFlags, sizeof(DWORD) );
-    set_reg_value( key, default_x_panning_w, REG_DWORD,
+    set_reg_value( key, x_panning, REG_DWORD,
                    &devmode->dmPosition.x, sizeof(DWORD) );
-    set_reg_value( key, default_y_panning_w, REG_DWORD,
+    set_reg_value( key, y_panning, REG_DWORD,
                    &devmode->dmPosition.y, sizeof(DWORD) );
-    set_reg_value( key, default_orientation_w, REG_DWORD,
+    set_reg_value( key, orientation, REG_DWORD,
                    &devmode->dmDisplayOrientation, sizeof(DWORD) );
-    set_reg_value( key, default_fixed_output_w, REG_DWORD,
+    set_reg_value( key, fixed_output, REG_DWORD,
                    &devmode->dmDisplayFixedOutput, sizeof(DWORD) );
 
     NtClose( key );
@@ -1922,8 +1988,11 @@ LONG WINAPI NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devm
     {
         ret = user_driver->pChangeDisplaySettingsEx( NULL, NULL, hwnd, flags, lparam );
         if (ret != DISP_CHANGE_SUCCESSFUL)
+        {
             ERR( "Restoring all displays to their registry settings returned %d.\n", ret );
-        return ret;
+            return ret;
+        }
+        goto done;
     }
 
     if (!lock_display_devices()) return DISP_CHANGE_FAILED;
@@ -1993,13 +2062,21 @@ LONG WINAPI NtUserChangeDisplaySettings( UNICODE_STRING *devname, DEVMODEW *devm
     if (flags & CDS_UPDATEREGISTRY)
     {
         if (!check_display_mode( devname, devmode )) return DISP_CHANGE_BADMODE;
-        if (!write_registry_settings( registry_path, devmode )) return DISP_CHANGE_NOTUPDATED;
+        if (!write_registry_settings( registry_path, FALSE, devmode )) return DISP_CHANGE_NOTUPDATED;
     }
 
     ret = user_driver->pChangeDisplaySettingsEx( device_name, devmode, hwnd, flags, lparam );
     if (ret != DISP_CHANGE_SUCCESSFUL)
+    {
         ERR( "Changing %s display settings returned %d.\n", debugstr_us(devname), ret );
-    return ret;
+        return ret;
+    }
+
+done:
+    if (flags & (CDS_TEST | CDS_NORESET)) return DISP_CHANGE_SUCCESSFUL;
+    if (!write_registry_settings( registry_path, TRUE, devmode ))
+        ERR( "Failed to write current mode to the registry\n" );
+    return DISP_CHANGE_SUCCESSFUL;
 }
 
 /***********************************************************************
@@ -2040,7 +2117,8 @@ BOOL WINAPI NtUserEnumDisplaySettings( UNICODE_STRING *device, DWORD mode,
 
     if ((ret = user_driver->pEnumDisplaySettingsEx( device_name, mode, dev_mode, flags )) < 0)
     {
-        if (mode == ENUM_REGISTRY_SETTINGS) ret = read_registry_settings( registry_path, dev_mode );
+        if (mode == ENUM_REGISTRY_SETTINGS) ret = read_registry_settings( registry_path, FALSE, dev_mode );
+        else if (mode == ENUM_CURRENT_SETTINGS) ret = read_registry_settings( registry_path, TRUE, dev_mode );
         else ret = FALSE;
     }
 
-- 
2.35.1

