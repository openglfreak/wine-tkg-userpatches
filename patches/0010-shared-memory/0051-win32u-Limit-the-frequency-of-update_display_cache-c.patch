From 4a5b8fa0b1a7d2bc312a8899259be364f76aba14 Mon Sep 17 00:00:00 2001
From: Paul Gofman <gofmanp@gmail.com>
Date: Thu, 12 Jan 2023 16:56:13 -0600
Subject: [PATCH 51/52] win32u: Limit the frequency of update_display_cache() calls.

CW-Bug-Id: #21761
---
 dlls/win32u/sysparams.c | 74 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 74 insertions(+)

diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -38,6 +38,59 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(system);
 
+struct global_shared_memory
+{
+    ULONG display_settings_serial;
+};
+
+static volatile struct global_shared_memory *get_global_shared_memory( void )
+{
+    static const WCHAR global_mappingW[] =
+    {
+        '\\','?','?','\\','_','_','w','i','n','e','_','w','i','n','3','2','u','_','m','a','p','p','i','n','g',0
+    };
+    static struct global_shared_memory *global_shared;
+    struct global_shared_memory *ret;
+    UNICODE_STRING section_str;
+    OBJECT_ATTRIBUTES attr;
+    LARGE_INTEGER size_l;
+    unsigned int status;
+    HANDLE handle;
+    SIZE_T size;
+
+    ret = __atomic_load_n( &global_shared, __ATOMIC_RELAXED );
+    if (ret) return ret;
+
+    section_str.Length = sizeof(global_mappingW) - sizeof(WCHAR);
+    section_str.MaximumLength = sizeof(global_mappingW);
+    section_str.Buffer = (WCHAR *)global_mappingW;
+    InitializeObjectAttributes( &attr, &section_str, OBJ_CASE_INSENSITIVE | OBJ_OPENIF | OBJ_PERMANENT, NULL, NULL );
+    size_l.QuadPart = sizeof(struct global_shared_memory);
+    status = NtCreateSection( &handle, SECTION_ALL_ACCESS, &attr, &size_l, PAGE_READWRITE, SEC_COMMIT, NULL );
+    if (status && status != STATUS_OBJECT_NAME_EXISTS)
+    {
+        static int once;
+        if (!once++)
+            ERR( "Failed to get global shared memory, status %#x.\n", status );
+    }
+    size = sizeof(struct global_shared_memory);
+    status = NtMapViewOfSection( handle, GetCurrentProcess(), (void **)&ret, 0, 0, NULL,
+                                 &size, ViewUnmap, 0, PAGE_READWRITE );
+    NtClose( handle );
+    if (status)
+    {
+        ERR( "failed to map view of section, status %#x\n", status );
+        return NULL;
+    }
+    if (InterlockedCompareExchangePointer( (void **)&global_shared, ret, NULL ))
+    {
+        if (NtUnmapViewOfSection( GetCurrentProcess(), ret ))
+            ERR( "NtUnmapViewOfSection failed.\n" );
+        ret = global_shared;
+    }
+
+    return ret;
+}
 
 static HKEY video_key, enum_key, control_key, config_key, volatile_base_key;
 
@@ -943,6 +996,7 @@ static void reg_empty_key( HKEY root, const char *key_name )
 
 static void prepare_devices(void)
 {
+    volatile struct global_shared_memory *global_shared = get_global_shared_memory();
     char buffer[4096];
     KEY_NODE_INFORMATION *key = (void *)buffer;
     KEY_VALUE_PARTIAL_INFORMATION *value = (void *)buffer;
@@ -952,6 +1006,8 @@ static void prepare_devices(void)
     DWORD size;
     HKEY hkey, subkey, device_key, prop_key;
 
+    if (global_shared) InterlockedIncrement( (LONG *)&global_shared->display_settings_serial );
+
     if (!enum_key) enum_key = reg_create_key( NULL, enum_keyW, sizeof(enum_keyW), 0, NULL );
     if (!control_key) control_key = reg_create_key( NULL, control_keyW, sizeof(control_keyW), 0, NULL );
     if (!video_key) video_key = reg_create_key( NULL, devicemap_video_keyW, sizeof(devicemap_video_keyW),
@@ -1688,6 +1744,17 @@ static BOOL update_display_cache( BOOL force )
     HWINSTA winstation = NtUserGetProcessWindowStation();
     struct device_manager_ctx ctx = {0};
     USEROBJECTFLAGS flags;
+    static ULONG last_update_serial;
+    volatile struct global_shared_memory *global_shared = get_global_shared_memory();
+    ULONG current_serial, global_serial;
+
+    current_serial = __atomic_load_n( &last_update_serial, __ATOMIC_RELAXED );
+    if (global_shared)
+    {
+        global_serial = __atomic_load_n( &global_shared->display_settings_serial, __ATOMIC_RELAXED );
+        if (current_serial && current_serial == global_serial) return TRUE;
+    }
+    else global_serial = 0;
 
     /* services do not have any adapters, only a virtual monitor */
     if (NtUserGetObjectInformation( winstation, UOI_FLAGS, &flags, sizeof(flags), NULL )
@@ -1697,6 +1764,7 @@ static BOOL update_display_cache( BOOL force )
         clear_display_devices();
         list_add_tail( &monitors, &virtual_monitor.entry );
         pthread_mutex_unlock( &display_lock );
+        InterlockedCompareExchange( (LONG *)&last_update_serial, global_serial, current_serial );
         return TRUE;
     }
 
@@ -1768,6 +1836,7 @@ static BOOL update_display_cache( BOOL force )
         return update_display_cache( TRUE );
     }
 
+    InterlockedCompareExchange( (LONG *)&last_update_serial, global_serial, current_serial );
     return TRUE;
 }
 
@@ -2082,6 +2151,7 @@ RECT get_primary_monitor_rect( UINT dpi )
 LONG WINAPI NtUserGetDisplayConfigBufferSizes( UINT32 flags, UINT32 *num_path_info,
                                                UINT32 *num_mode_info )
 {
+    volatile struct global_shared_memory *global_shared;
     struct monitor *monitor;
     UINT32 count = 0;
 
@@ -2106,6 +2176,10 @@ LONG WINAPI NtUserGetDisplayConfigBufferSizes( UINT32 flags, UINT32 *num_path_in
     if (flags != QDC_ONLY_ACTIVE_PATHS)
         FIXME( "only returning active paths\n" );
 
+    /* NtUserGetDisplayConfigBufferSizes() is called by display drivers to trigger display settings update. */
+    if ((global_shared = get_global_shared_memory()))
+        InterlockedIncrement( (LONG *)&global_shared->display_settings_serial );
+
     if (lock_display_devices())
     {
         LIST_FOR_EACH_ENTRY( monitor, &monitors, struct monitor, entry )
