From 7a6987c09a860a9afc0474e3b8682394ffb31197 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Fri, 21 Jul 2023 10:23:14 +0200
Subject: [PATCH 2006/7] HACK: win32u: Use desktop shared memory for some
 cursor-related things.

This is theoretically racy.
---
 dlls/win32u/cursoricon.c | 12 ++++++++++++
 dlls/win32u/input.c      | 20 ++++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/dlls/win32u/cursoricon.c b/dlls/win32u/cursoricon.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/cursoricon.c
+++ b/dlls/win32u/cursoricon.c
@@ -107,12 +107,24 @@ INT WINAPI NtUserShowCursor( BOOL show )
  */
 HCURSOR WINAPI NtUserSetCursor( HCURSOR cursor )
 {
+    volatile struct input_shared_memory *shared = get_input_shared_memory();
     struct cursoricon_object *obj;
     HCURSOR old_cursor;
     BOOL ret;
 
     TRACE( "%p\n", cursor );
 
+    if (shared)
+    {
+        SHARED_READ_BEGIN( &shared->seq )
+        {
+            old_cursor = shared->cursor;
+        }
+        SHARED_READ_END( &shared->seq );
+        if (old_cursor == cursor)
+            return old_cursor;
+    }
+
     SERVER_START_REQ( set_cursor )
     {
         req->flags = SET_CURSOR_HANDLE;
diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -2614,6 +2614,7 @@ BOOL process_wine_clipcursor( HWND hwnd, UINT flags, BOOL reset )
  */
 BOOL WINAPI NtUserClipCursor( const RECT *rect )
 {
+    volatile struct desktop_shared_memory *shared = get_desktop_shared_memory();
     UINT dpi;
     BOOL ret;
     RECT new_rect;
@@ -2631,6 +2632,25 @@ BOOL WINAPI NtUserClipCursor( const RECT *rect )
         }
     }
 
+    if (shared)
+    {
+        RECT full_rect, *r = rect;
+        if (!r && NtUserGetWindowRect( NtUserGetForegroundWindow(), &full_rect ))
+            r = &full_rect;
+        if (r)
+        {
+            SHARED_READ_BEGIN( &shared->seq )
+            {
+                ret = r->left == shared->cursor.clip.left &&
+                      r->top == shared->cursor.clip.top &&
+                      r->right == shared->cursor.clip.right &&
+                      r->bottom == shared->cursor.clip.bottom;
+            }
+            SHARED_READ_END( &shared->seq );
+        }
+        if (ret) return TRUE;
+    }
+
     SERVER_START_REQ( set_cursor )
     {
         if (rect)
-- 
0.0.0

