From a06feb2e966642a841ec37cb2a9facdb9e94be87 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 1 Mar 2021 20:55:26 +0100
Subject: [PATCH 42/44] user32: Use input shared memory in GetKeyboardState.

---
 dlls/user32/cursoricon.c     |   2 +-
 dlls/user32/focus.c          |   6 +-
 dlls/user32/input.c          |   8 +--
 dlls/user32/message.c        |   6 +-
 dlls/user32/user_private.h   |   4 --
 dlls/user32/winstation.c     | 125 ----------------------------------
 dlls/win32u/gdiobj.c         |   4 ++
 dlls/win32u/input.c          |  13 +++-
 dlls/win32u/win32u.spec      |   6 ++
 dlls/win32u/win32u_private.h |   4 ++
 dlls/win32u/winstation.c     | 127 +++++++++++++++++++++++++++++++++++
 dlls/win32u/wrappers.c       |  20 ++++++
 include/ntuser.h             |  25 +++++++
 13 files changed, 209 insertions(+), 141 deletions(-)

diff --git a/dlls/user32/cursoricon.c b/dlls/user32/cursoricon.c
index b72f15308c1..bcf91bd1a0f 100644
--- a/dlls/user32/cursoricon.c
+++ b/dlls/user32/cursoricon.c
@@ -2001,7 +2001,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH ClipCursor( const RECT *rect )
  */
 BOOL WINAPI DECLSPEC_HOTPATCH GetClipCursor( RECT *rect )
 {
-    volatile struct desktop_shared_memory *shared = get_desktop_shared_memory();
+    volatile struct desktop_shared_memory *shared = __wine_get_desktop_shared_memory();
     DPI_AWARENESS_CONTEXT context;
     UINT dpi;
 
diff --git a/dlls/user32/focus.c b/dlls/user32/focus.c
index 90ca162b4d6..f7ecf652e7b 100644
--- a/dlls/user32/focus.c
+++ b/dlls/user32/focus.c
@@ -359,7 +359,7 @@ BOOL WINAPI SetForegroundWindow( HWND hwnd )
  */
 HWND WINAPI GetActiveWindow(void)
 {
-    volatile struct input_shared_memory *shared = get_input_shared_memory();
+    volatile struct input_shared_memory *shared = __wine_get_input_shared_memory();
     HWND ret = 0;
 
     if (!shared) return 0;
@@ -377,7 +377,7 @@ HWND WINAPI GetActiveWindow(void)
  */
 HWND WINAPI GetFocus(void)
 {
-    volatile struct input_shared_memory *shared = get_input_shared_memory();
+    volatile struct input_shared_memory *shared = __wine_get_input_shared_memory();
     HWND ret = 0;
 
     if (!shared) return 0;
@@ -395,7 +395,7 @@ HWND WINAPI GetFocus(void)
  */
 HWND WINAPI GetForegroundWindow(void)
 {
-    volatile struct input_shared_memory *shared = get_foreground_shared_memory();
+    volatile struct input_shared_memory *shared = __wine_get_foreground_shared_memory();
     HWND ret = 0;
 
     if (!shared) return 0;
diff --git a/dlls/user32/input.c b/dlls/user32/input.c
index 49db713dabd..ea2f69c44a5 100644
--- a/dlls/user32/input.c
+++ b/dlls/user32/input.c
@@ -307,7 +307,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH GetCursorPos( POINT *pt )
     BOOL ret = TRUE;
     DWORD last_change;
     UINT dpi;
-    volatile struct desktop_shared_memory *shared = get_desktop_shared_memory();
+    volatile struct desktop_shared_memory *shared = __wine_get_desktop_shared_memory();
 
     if (!pt || !shared) return FALSE;
 
@@ -337,7 +337,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH GetCursorPos( POINT *pt )
  */
 BOOL WINAPI GetCursorInfo( PCURSORINFO pci )
 {
-    volatile struct input_shared_memory *shared = get_foreground_shared_memory();
+    volatile struct input_shared_memory *shared = __wine_get_foreground_shared_memory();
     BOOL ret;
 
     if (!pci) return FALSE;
@@ -417,7 +417,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH ReleaseCapture(void)
  */
 HWND WINAPI GetCapture(void)
 {
-    volatile struct input_shared_memory *shared = get_input_shared_memory();
+    volatile struct input_shared_memory *shared = __wine_get_input_shared_memory();
     HWND ret = 0;
 
     if (!shared) return 0;
@@ -445,7 +445,7 @@ static void check_for_events( UINT flags )
  */
 SHORT WINAPI DECLSPEC_HOTPATCH GetAsyncKeyState( INT key )
 {
-    volatile struct desktop_shared_memory *shared = get_desktop_shared_memory();
+    volatile struct desktop_shared_memory *shared = __wine_get_desktop_shared_memory();
     BYTE state;
 
     if (key < 0 || key >= 256 || !shared) return 0;
diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index 01f4987fbdb..02359889cf5 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -2692,7 +2692,7 @@ static inline void call_sendmsg_callback( SENDASYNCPROC callback, HWND hwnd, UIN
 static int peek_message( MSG *msg, HWND hwnd, UINT first, UINT last, UINT flags, UINT changed_mask, BOOL waited )
 {
     LRESULT result;
-    volatile struct queue_shared_memory *shared = get_queue_shared_memory();
+    volatile struct queue_shared_memory *shared = __wine_get_queue_shared_memory();
     struct user_thread_info *thread_info = get_user_thread_info();
     INPUT_MESSAGE_SOURCE prev_source = thread_info->msg_source;
     struct received_message_info info, *old_info;
@@ -4659,8 +4659,8 @@ BOOL WINAPI GetGUIThreadInfo( DWORD id, GUITHREADINFO *info )
         return FALSE;
     }
 
-    if (id == GetCurrentThreadId()) shared = get_input_shared_memory();
-    else if (id == 0) shared = get_foreground_shared_memory();
+    if (id == GetCurrentThreadId()) shared = __wine_get_input_shared_memory();
+    else if (id == 0) shared = __wine_get_foreground_shared_memory();
     else shared = NULL;
 
     if (shared)
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index 56ecf02b941..7187ed75066 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -209,10 +209,6 @@ extern BOOL WINPROC_call_window( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lPar
 
 extern const WCHAR *CLASS_GetVersionedName(const WCHAR *classname, UINT *basename_offset,
         WCHAR *combined, BOOL register_class) DECLSPEC_HIDDEN;
-extern volatile struct desktop_shared_memory *get_desktop_shared_memory( void ) DECLSPEC_HIDDEN;
-extern volatile struct queue_shared_memory *get_queue_shared_memory( void ) DECLSPEC_HIDDEN;
-extern volatile struct input_shared_memory *get_input_shared_memory( void ) DECLSPEC_HIDDEN;
-extern volatile struct input_shared_memory *get_foreground_shared_memory( void ) DECLSPEC_HIDDEN;
 
 /* kernel callbacks */
 
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index e77692f6bff..30b18e3bd11 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -101,131 +101,6 @@ static const WCHAR *get_winstation_default_name( void )
 }
 
 
-static void map_shared_memory_section( const WCHAR *name, SIZE_T size, HANDLE root, HANDLE *handle, void **ptr )
-{
-    OBJECT_ATTRIBUTES attr;
-    UNICODE_STRING section_str;
-    NTSTATUS status;
-
-    RtlInitUnicodeString( &section_str, name );
-    InitializeObjectAttributes( &attr, &section_str, 0, root, NULL );
-    status = NtOpenSection( handle, SECTION_ALL_ACCESS, &attr );
-    if (status)
-    {
-        ERR( "failed to open section %s: %08x\n", debugstr_w(name), status );
-        *ptr = NULL;
-        *handle = NULL;
-        return;
-    }
-
-    *ptr = NULL;
-    status = NtMapViewOfSection( *handle, GetCurrentProcess(), ptr, 0, 0, NULL,
-                                 &size, ViewUnmap, 0, PAGE_READONLY );
-    if (status)
-    {
-        ERR( "failed to map view of section %s: %08x\n", debugstr_w(name), status );
-        CloseHandle( *handle );
-        *ptr = NULL;
-        *handle = NULL;
-    }
-}
-
-
-volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
-{
-    static const WCHAR *dir_desktop_maps = L"__wine_desktop_mappings\\";
-    struct user_thread_info *thread_info = get_user_thread_info();
-    HANDLE root = get_winstations_dir_handle(), handles[2];
-    WCHAR buf[MAX_PATH], *ptr;
-    DWORD i, needed;
-
-    if (thread_info->desktop_shared_memory) return thread_info->desktop_shared_memory;
-
-    handles[0] = GetProcessWindowStation();
-    handles[1] = GetThreadDesktop( GetCurrentThreadId() );
-
-    memcpy( buf, dir_desktop_maps, wcslen(dir_desktop_maps) * sizeof(WCHAR) );
-    ptr = buf + wcslen(dir_desktop_maps);
-
-    for (i = 0; i < 2; i++)
-    {
-        GetUserObjectInformationW( handles[i], UOI_NAME, (void *)ptr, sizeof(buf) - (ptr - buf) * sizeof(WCHAR), &needed );
-        ptr += needed / sizeof(WCHAR);
-        if (i == 0) *(ptr - 1) = '\\';
-    }
-
-    map_shared_memory_section( buf, sizeof(struct desktop_shared_memory), root,
-                               &thread_info->desktop_shared_map, (void **)&thread_info->desktop_shared_memory );
-    return thread_info->desktop_shared_memory;
-}
-
-
-volatile struct queue_shared_memory *get_queue_shared_memory( void )
-{
-    struct user_thread_info *thread_info = get_user_thread_info();
-    WCHAR buf[MAX_PATH];
-
-    if (thread_info->queue_shared_memory) return thread_info->queue_shared_memory;
-
-    swprintf( buf, ARRAY_SIZE(buf), L"\\KernelObjects\\__wine_thread_mappings\\%08x-queue", GetCurrentThreadId() );
-    map_shared_memory_section( buf, sizeof(struct queue_shared_memory), NULL,
-                               &thread_info->queue_shared_map, (void **)&thread_info->queue_shared_memory );
-    return thread_info->queue_shared_memory;
-}
-
-
-static volatile struct input_shared_memory *get_thread_input_shared_memory( DWORD tid, HANDLE *handle,
-                                                                            struct input_shared_memory **ptr )
-{
-    WCHAR buf[MAX_PATH];
-
-    if (*ptr && (*ptr)->tid == tid) return *ptr;
-    if (*ptr) CloseHandle( *handle );
-
-    swprintf( buf, ARRAY_SIZE(buf), L"\\KernelObjects\\__wine_thread_mappings\\%08x-input", tid );
-    map_shared_memory_section( buf, sizeof(struct input_shared_memory), NULL,
-                               handle, (void **)ptr );
-    return *ptr;
-}
-
-
-volatile struct input_shared_memory *get_input_shared_memory( void )
-{
-    volatile struct queue_shared_memory *queue = get_queue_shared_memory();
-    struct user_thread_info *thread_info = get_user_thread_info();
-    DWORD tid;
-
-    if (!queue) return NULL;
-    SHARED_READ_BEGIN( &queue->seq )
-    {
-        tid = queue->input_tid;
-    }
-    SHARED_READ_END( &queue->seq );
-
-    return get_thread_input_shared_memory( tid, &thread_info->input_shared_map,
-                                           &thread_info->input_shared_memory );
-}
-
-
-volatile struct input_shared_memory *get_foreground_shared_memory( void )
-{
-    volatile struct desktop_shared_memory *desktop = get_desktop_shared_memory();
-    struct user_thread_info *thread_info = get_user_thread_info();
-    DWORD tid;
-
-    if (!desktop) return NULL;
-    SHARED_READ_BEGIN( &desktop->seq )
-    {
-        tid = desktop->foreground_tid;
-    }
-    SHARED_READ_END( &desktop->seq );
-
-    if (!tid) return NULL;
-    return get_thread_input_shared_memory( tid, &thread_info->foreground_shared_map,
-                                           &thread_info->foreground_shared_memory );
-}
-
-
 /***********************************************************************
  *              CreateWindowStationA  (USER32.@)
  */
diff --git a/dlls/win32u/gdiobj.c b/dlls/win32u/gdiobj.c
index 002c7539498..a201713cccb 100644
--- a/dlls/win32u/gdiobj.c
+++ b/dlls/win32u/gdiobj.c
@@ -1185,6 +1185,10 @@ static struct unix_funcs unix_funcs =
     __wine_get_wgl_driver,
     __wine_set_display_driver,
     __wine_set_visible_region,
+    __wine_get_desktop_shared_memory,
+    __wine_get_queue_shared_memory,
+    __wine_get_input_shared_memory,
+    __wine_get_foreground_shared_memory,
 };
 
 NTSTATUS gdi_init(void)
diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 1fe2fb88911..54835b9a815 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -142,11 +142,22 @@ SHORT WINAPI NtUserGetKeyState( INT vkey )
  */
 BOOL WINAPI NtUserGetKeyboardState( BYTE *state )
 {
-    BOOL ret;
+    volatile struct input_shared_memory *shared = __wine_get_input_shared_memory();
+    BOOL ret, skip = TRUE;
     UINT i;
 
     TRACE("(%p)\n", state);
 
+    if (!shared) skip = FALSE;
+    else SHARED_READ_BEGIN( &shared->seq )
+    {
+        if (!shared->created) skip = FALSE; /* server needs to create the queue */
+        else memcpy( state, (const void *)shared->keystate, 256 );
+    }
+    SHARED_READ_END( &shared->seq );
+
+    if (skip) return TRUE;
+
     memset( state, 0, 256 );
     SERVER_START_REQ( get_key_state )
     {
diff --git a/dlls/win32u/win32u.spec b/dlls/win32u/win32u.spec
index 5ea2d3afc84..e1ec2506a88 100644
--- a/dlls/win32u/win32u.spec
+++ b/dlls/win32u/win32u.spec
@@ -1340,3 +1340,9 @@
 @ cdecl __wine_get_brush_bitmap_info(long ptr ptr ptr)
 @ cdecl __wine_get_icm_profile(long long ptr ptr)
 @ cdecl __wine_get_file_outline_text_metric(wstr ptr)
+
+# Shared memory
+@ cdecl __wine_get_desktop_shared_memory()
+@ cdecl __wine_get_queue_shared_memory()
+@ cdecl __wine_get_input_shared_memory()
+@ cdecl __wine_get_foreground_shared_memory()
diff --git a/dlls/win32u/win32u_private.h b/dlls/win32u/win32u_private.h
index 9bce2b7207b..a2052eaed0b 100644
--- a/dlls/win32u/win32u_private.h
+++ b/dlls/win32u/win32u_private.h
@@ -238,6 +238,10 @@ struct unix_funcs
     void (CDECL *set_display_driver)( struct user_driver_funcs *funcs, UINT version );
     void (CDECL *set_visible_region)( HDC hdc, HRGN hrgn, const RECT *vis_rect, const RECT *device_rect,
                                       struct window_surface *surface );
+    volatile struct desktop_shared_memory *(CDECL *get_desktop_shared_memory)( void );
+    volatile struct queue_shared_memory *(CDECL *get_queue_shared_memory)( void );
+    volatile struct input_shared_memory *(CDECL *get_input_shared_memory)( void );
+    volatile struct input_shared_memory *(CDECL *get_foreground_shared_memory)( void );
 };
 
 extern RECT get_display_rect( const WCHAR *display ) DECLSPEC_HIDDEN;
diff --git a/dlls/win32u/winstation.c b/dlls/win32u/winstation.c
index c0fb0155f24..219f9e91496 100644
--- a/dlls/win32u/winstation.c
+++ b/dlls/win32u/winstation.c
@@ -25,6 +25,7 @@
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
 #include <stdarg.h>
+#include <wchar.h>
 #include "windef.h"
 #include "winbase.h"
 #include "ntuser.h"
@@ -397,6 +398,132 @@ static HANDLE get_winstations_dir_handle(void)
     return status ? 0 : dir;
 }
 
+static void map_shared_memory_section( WCHAR *name, USHORT namelen, SIZE_T size, HANDLE root, HANDLE *handle, void **ptr )
+{
+    OBJECT_ATTRIBUTES attr;
+    UNICODE_STRING section_str;
+    NTSTATUS status;
+
+    section_str.Buffer = name;
+    section_str.MaximumLength = section_str.Length = namelen * sizeof(WCHAR);
+    InitializeObjectAttributes( &attr, &section_str, 0, root, NULL );
+    status = NtOpenSection( handle, SECTION_ALL_ACCESS, &attr );
+    if (status)
+    {
+        ERR( "failed to open section %s: %08x\n", debugstr_w(name), status );
+        *ptr = NULL;
+        *handle = NULL;
+        return;
+    }
+
+    *ptr = NULL;
+    status = NtMapViewOfSection( *handle, GetCurrentProcess(), ptr, 0, 0, NULL,
+                                 &size, ViewUnmap, 0, PAGE_READONLY );
+    if (status)
+    {
+        ERR( "failed to map view of section %s: %08x\n", debugstr_w(name), status );
+        NtClose( *handle );
+        *ptr = NULL;
+        *handle = NULL;
+    }
+}
+
+volatile struct desktop_shared_memory *CDECL __wine_get_desktop_shared_memory( void )
+{
+    static const WCHAR dir_desktop_maps[] = {'_','_','w','i','n','e','_','d','e','s','k','t','o','p','_','m','a','p','p','i','n','g','s','\\'};
+    struct user_thread_info *thread_info = get_user_thread_info();
+    HANDLE root = get_winstations_dir_handle(), handles[2];
+    WCHAR buf[MAX_PATH], *ptr;
+    DWORD i, needed;
+
+    if (thread_info->desktop_shared_memory) return thread_info->desktop_shared_memory;
+
+    handles[0] = NtUserGetProcessWindowStation();
+    handles[1] = NtUserGetThreadDesktop( GetCurrentThreadId() );
+
+    memcpy( buf, dir_desktop_maps, ARRAY_SIZE(dir_desktop_maps) * sizeof(WCHAR) );
+    ptr = buf + ARRAY_SIZE(dir_desktop_maps);
+
+    for (i = 0; i < 2; i++)
+    {
+        NtUserGetObjectInformation( handles[i], UOI_NAME, (void *)ptr, sizeof(buf) - (ptr - buf) * sizeof(WCHAR), &needed );
+        ptr += needed / sizeof(WCHAR);
+        if (i == 0) *(ptr - 1) = '\\';
+    }
+
+    map_shared_memory_section( buf, ptr - buf - 1, sizeof(struct desktop_shared_memory), root,
+                               &thread_info->desktop_shared_map, (void **)&thread_info->desktop_shared_memory );
+    return thread_info->desktop_shared_memory;
+}
+
+volatile struct queue_shared_memory *CDECL __wine_get_queue_shared_memory( void )
+{
+    struct user_thread_info *thread_info = get_user_thread_info();
+    char bufferA[64];
+    WCHAR buffer[64];
+    DWORD len;
+
+    if (thread_info->queue_shared_memory) return thread_info->queue_shared_memory;
+
+    sprintf( bufferA, "\\KernelObjects\\__wine_thread_mappings\\%08x-queue", GetCurrentThreadId() );
+    len = asciiz_to_unicode( buffer, bufferA ) / sizeof(WCHAR) - 1;
+    map_shared_memory_section( buffer, len, sizeof(struct queue_shared_memory), NULL,
+                               &thread_info->queue_shared_map, (void **)&thread_info->queue_shared_memory );
+    return thread_info->queue_shared_memory;
+}
+
+static volatile struct input_shared_memory *get_thread_input_shared_memory( DWORD tid, HANDLE *handle,
+                                                                            struct input_shared_memory **ptr )
+{
+    char bufferA[64];
+    WCHAR buffer[64];
+    DWORD len;
+
+    if (*ptr && (*ptr)->tid == tid) return *ptr;
+    if (*ptr) NtClose( *handle );
+
+    sprintf( bufferA, "\\KernelObjects\\__wine_thread_mappings\\%08x-input", tid );
+    len = asciiz_to_unicode( buffer, bufferA ) / sizeof(WCHAR) - 1;
+    map_shared_memory_section( buffer, len, sizeof(struct input_shared_memory), NULL,
+                               handle, (void **)ptr );
+    return *ptr;
+}
+
+volatile struct input_shared_memory *CDECL __wine_get_input_shared_memory( void )
+{
+    volatile struct queue_shared_memory *queue = __wine_get_queue_shared_memory();
+    struct user_thread_info *thread_info = get_user_thread_info();
+    DWORD tid;
+
+    if (!queue) return NULL;
+    SHARED_READ_BEGIN( &queue->seq )
+    {
+        tid = queue->input_tid;
+    }
+    SHARED_READ_END( &queue->seq );
+
+    return get_thread_input_shared_memory( tid, &thread_info->input_shared_map,
+                                           &thread_info->input_shared_memory );
+}
+
+volatile struct input_shared_memory *CDECL __wine_get_foreground_shared_memory( void )
+{
+    volatile struct desktop_shared_memory *desktop = __wine_get_desktop_shared_memory();
+    struct user_thread_info *thread_info = get_user_thread_info();
+    DWORD tid;
+
+    if (!desktop) return NULL;
+    SHARED_READ_BEGIN( &desktop->seq )
+    {
+        tid = desktop->foreground_tid;
+    }
+    SHARED_READ_END( &desktop->seq );
+
+    if (!tid) return NULL;
+    return get_thread_input_shared_memory( tid, &thread_info->foreground_shared_map,
+                                           &thread_info->foreground_shared_memory );
+}
+
 /***********************************************************************
  *           get_default_desktop
  *
diff --git a/dlls/win32u/wrappers.c b/dlls/win32u/wrappers.c
index aaabf51a2f8..9e7e0d59f9d 100644
--- a/dlls/win32u/wrappers.c
+++ b/dlls/win32u/wrappers.c
@@ -917,6 +917,26 @@ void CDECL __wine_set_display_driver( struct user_driver_funcs *funcs, UINT vers
     return unix_funcs->set_display_driver( funcs, version );
 }
 
+volatile struct desktop_shared_memory *CDECL __wine_get_desktop_shared_memory( void )
+{
+    return unix_funcs->get_desktop_shared_memory();
+}
+
+volatile struct queue_shared_memory *CDECL __wine_get_queue_shared_memory( void )
+{
+    return unix_funcs->get_queue_shared_memory();
+}
+
+volatile struct input_shared_memory *CDECL __wine_get_input_shared_memory( void )
+{
+    return unix_funcs->get_input_shared_memory();
+}
+
+volatile struct input_shared_memory *CDECL __wine_get_foreground_shared_memory( void )
+{
+    return unix_funcs->get_foreground_shared_memory();
+}
+
 static void *get_user_proc( const char *name, BOOL force_load )
 {
     ANSI_STRING name_str;
diff --git a/include/ntuser.h b/include/ntuser.h
index 89267ebd7ec..a13846a3a09 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -186,4 +186,29 @@ INT     WINAPI NtUserToUnicodeEx( UINT virt, UINT scan, const BYTE *state,
 BOOL    WINAPI NtUserUnregisterHotKey( HWND hwnd, INT id );
 WORD    WINAPI NtUserVkKeyScanEx( WCHAR chr, HKL layout );
 
+extern volatile struct desktop_shared_memory *CDECL __wine_get_desktop_shared_memory( void );
+extern volatile struct queue_shared_memory *CDECL __wine_get_queue_shared_memory( void );
+extern volatile struct input_shared_memory *CDECL __wine_get_input_shared_memory( void );
+extern volatile struct input_shared_memory *CDECL __wine_get_foreground_shared_memory( void );
+
+#if defined(__i386__) || defined(__x86_64__)
+#define __SHARED_READ_SEQ( x ) (*(x))
+#define __SHARED_READ_FENCE do {} while(0)
+#else
+#define __SHARED_READ_SEQ( x ) __atomic_load_n( x, __ATOMIC_RELAXED )
+#define __SHARED_READ_FENCE __atomic_thread_fence( __ATOMIC_ACQUIRE )
+#endif
+
+#define SHARED_READ_BEGIN( x )                                          \
+    do {                                                                \
+        unsigned int __seq;                                             \
+        do {                                                            \
+            while ((__seq = __SHARED_READ_SEQ( x )) & SEQUENCE_MASK) NtYieldExecution(); \
+            __SHARED_READ_FENCE;
+
+#define SHARED_READ_END( x )                       \
+            __SHARED_READ_FENCE;                   \
+        } while (__SHARED_READ_SEQ( x ) != __seq); \
+    } while(0)
+
 #endif /* _NTUSER_ */
-- 
2.35.1

