From 39d536dcea14e4fd49ca9a6fb1a25249b8e6328a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sun, 14 Nov 2021 14:39:51 +0100
Subject: [PATCH 5/9] winex11.drv: Stop tracking XInput2 enabled state.

It should not be very useful anymore and it'll be meaningless later.
---
 dlls/winex11.drv/mouse.c  | 22 ----------------------
 dlls/winex11.drv/x11drv.h |  1 -
 2 files changed, 23 deletions(-)

diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -291,14 +291,10 @@ void X11DRV_XInput2_Init(void)
 
     if (xinput2_available && pXIQueryVersion( data->display, &major, &minor ) == Success &&
         pXIGetClientPointer( data->display, None, &data->xi2_core_pointer ))
-    {
         TRACE( "XInput2 %d.%d available\n", major, minor );
-        data->xi2_state = xi_disabled;
-    }
     else
     {
         data->xi2_core_pointer = 0;
-        data->xi2_state = xi_unavailable;
         WARN( "XInput 2.1 not available\n" );
     }
 #endif
@@ -316,8 +312,6 @@ static void enable_xinput2(void)
     unsigned char mask_bits[XIMaskLen(XI_LASTEVENT)];
     int count;
 
-    if (data->xi2_state != xi_disabled) return;
-
     mask.mask     = mask_bits;
     mask.mask_len = sizeof(mask_bits);
     mask.deviceid = XIAllMasterDevices;
@@ -331,8 +325,6 @@ static void enable_xinput2(void)
     pointer_info = pXIQueryDevice( data->display, data->xi2_core_pointer, &count );
     update_relative_valuators( pointer_info->classes, pointer_info->num_classes );
     pXIFreeDeviceInfo( pointer_info );
-
-    data->xi2_state = xi_enabled;
 }
 
 #endif
@@ -346,11 +338,6 @@ static void disable_xinput2(void)
     struct x11drv_thread_data *data = x11drv_thread_data();
     XIEventMask mask;
 
-    if (data->xi2_state != xi_enabled) return;
-
-    TRACE( "disabling\n" );
-    data->xi2_state = xi_disabled;
-
     mask.mask = NULL;
     mask.mask_len = 0;
     mask.deviceid = XIAllMasterDevices;
@@ -403,14 +390,6 @@ static BOOL grab_clipping_window( const RECT *clip )
     /* enable XInput2 unless we are already clipping */
     if (!data->clip_hwnd) enable_xinput2();
 
-    if (data->xi2_state != xi_enabled)
-    {
-        WARN( "XInput2 not supported, refusing to clip to %s\n", wine_dbgstr_rect(clip) );
-        NtUserDestroyWindow( msg_hwnd );
-        NtUserClipCursor( NULL );
-        return TRUE;
-    }
-
     TRACE( "clipping to %s win %lx\n", wine_dbgstr_rect(clip), clip_window );
 
     if (!data->clip_hwnd) XUnmapWindow( data->display, clip_window );
@@ -1847,7 +1826,6 @@ static BOOL map_raw_event_coords( XIRawEvent *event, INPUT *input )
 
     if (x->number < 0 || y->number < 0) return FALSE;
     if (!event->valuators.mask_len) return FALSE;
-    if (thread_data->xi2_state != xi_enabled) return FALSE;
     if (event->deviceid != thread_data->xi2_core_pointer) return FALSE;
 
     virtual_rect = NtUserGetVirtualScreenRect();
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -371,7 +371,6 @@ struct x11drv_thread_data
     HWND     clip_hwnd;            /* message window stored in desktop while clipping is active */
     DWORD    clip_reset;           /* time when clipping was last reset */
 #ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
-    enum { xi_unavailable = -1, xi_unknown, xi_disabled, xi_enabled } xi2_state; /* XInput2 state */
     XIValuatorClassInfo x_valuator;
     XIValuatorClassInfo y_valuator;
     int      xi2_core_pointer;     /* XInput2 core pointer id */
-- 
2.36.1

