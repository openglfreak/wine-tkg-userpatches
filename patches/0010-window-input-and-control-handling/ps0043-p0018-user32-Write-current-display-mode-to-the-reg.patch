From abf9f1d745df016baab712863ba2609ad195f825 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sun, 17 Oct 2021 18:47:35 +0200
Subject: [PATCH 18/25] user32: Write current display mode to the registry.

---
 dlls/user32/sysparams.c | 76 +++++++++++++++++++++++++----------------
 1 file changed, 46 insertions(+), 30 deletions(-)

diff --git a/dlls/user32/sysparams.c b/dlls/user32/sysparams.c
index eee64c34e38..99ad6d88901 100644
--- a/dlls/user32/sysparams.c
+++ b/dlls/user32/sysparams.c
@@ -3008,8 +3008,9 @@ HBRUSH SYSCOLOR_Get55AABrush(void)
     return brush_55aa;
 }
 
-static BOOL read_registry_settings( DISPLAY_DEVICEW *device, DEVMODEW *devmode )
+static BOOL read_registry_settings( DISPLAY_DEVICEW *device, BOOL current, DEVMODEW *devmode )
 {
+    WCHAR buffer[MAX_PATH];
     DWORD type, size;
     BOOL ret = TRUE;
     HANDLE mutex;
@@ -3024,27 +3025,28 @@ static BOOL read_registry_settings( DISPLAY_DEVICEW *device, DEVMODEW *devmode )
         return FALSE;
     }
 
-#define query_value( name, data )                                                                  \
-    size = sizeof(DWORD);                                                                          \
-    if (RegQueryValueExW( hkey, name, 0, &type, (LPBYTE)(data), &size ) || type != REG_DWORD ||    \
+#define query_value( name, data )                                                                    \
+    size = sizeof(DWORD);                                                                            \
+    swprintf( buffer, MAX_PATH, L"%s.%s", current ? L"CurrentSettings" : L"DefaultSettings", name ); \
+    if (RegQueryValueExW( hkey, buffer, 0, &type, (LPBYTE)(data), &size ) || type != REG_DWORD ||    \
         size != sizeof(DWORD)) ret = FALSE
 
-    query_value( L"DefaultSettings.BitsPerPel", &devmode->dmBitsPerPel );
+    query_value( L"BitsPerPel", &devmode->dmBitsPerPel );
     devmode->dmFields |= DM_BITSPERPEL;
-    query_value( L"DefaultSettings.XResolution", &devmode->dmPelsWidth );
+    query_value( L"XResolution", &devmode->dmPelsWidth );
     devmode->dmFields |= DM_PELSWIDTH;
-    query_value( L"DefaultSettings.YResolution", &devmode->dmPelsHeight );
+    query_value( L"YResolution", &devmode->dmPelsHeight );
     devmode->dmFields |= DM_PELSHEIGHT;
-    query_value( L"DefaultSettings.VRefresh", &devmode->dmDisplayFrequency );
+    query_value( L"VRefresh", &devmode->dmDisplayFrequency );
     devmode->dmFields |= DM_DISPLAYFREQUENCY;
-    query_value( L"DefaultSettings.Flags", &devmode->u2.dmDisplayFlags );
+    query_value( L"Flags", &devmode->u2.dmDisplayFlags );
     devmode->dmFields |= DM_DISPLAYFLAGS;
-    query_value( L"DefaultSettings.XPanning", &devmode->u1.s2.dmPosition.x );
-    query_value( L"DefaultSettings.YPanning", &devmode->u1.s2.dmPosition.y );
+    query_value( L"XPanning", &devmode->u1.s2.dmPosition.x );
+    query_value( L"YPanning", &devmode->u1.s2.dmPosition.y );
     devmode->dmFields |= DM_POSITION;
-    query_value( L"DefaultSettings.Orientation", &devmode->u1.s2.dmDisplayOrientation );
+    query_value( L"Orientation", &devmode->u1.s2.dmDisplayOrientation );
     devmode->dmFields |= DM_DISPLAYORIENTATION;
-    query_value( L"DefaultSettings.FixedOutput", &devmode->u1.s2.dmDisplayFixedOutput );
+    query_value( L"FixedOutput", &devmode->u1.s2.dmDisplayFixedOutput );
 
 #undef query_value
 
@@ -3053,8 +3055,9 @@ static BOOL read_registry_settings( DISPLAY_DEVICEW *device, DEVMODEW *devmode )
     return ret;
 }
 
-static BOOL write_registry_settings( DISPLAY_DEVICEW *device, const DEVMODEW *devmode )
+static BOOL write_registry_settings( DISPLAY_DEVICEW *device, BOOL current, const DEVMODEW *devmode )
 {
+    WCHAR buffer[MAX_PATH];
     BOOL ret = TRUE;
     HANDLE mutex;
     HKEY hkey;
@@ -3069,18 +3072,20 @@ static BOOL write_registry_settings( DISPLAY_DEVICEW *device, const DEVMODEW *de
         return FALSE;
     }
 
-#define set_value( name, data )                                                                    \
-    if (RegSetValueExW( hkey, name, 0, REG_DWORD, (const BYTE *)(data), sizeof(DWORD) )) ret = FALSE
+#define set_value( name, data )                                                                      \
+    swprintf( buffer, MAX_PATH, L"%s.%s", current ? L"CurrentSettings" : L"DefaultSettings", name ); \
+    if (RegSetValueExW( hkey, buffer, 0, REG_DWORD, (const BYTE *)(data), sizeof(DWORD) ))           \
+    ret = FALSE
 
-    set_value( L"DefaultSettings.BitsPerPel", &devmode->dmBitsPerPel );
-    set_value( L"DefaultSettings.XResolution", &devmode->dmPelsWidth );
-    set_value( L"DefaultSettings.YResolution", &devmode->dmPelsHeight );
-    set_value( L"DefaultSettings.VRefresh", &devmode->dmDisplayFrequency );
-    set_value( L"DefaultSettings.Flags", &devmode->u2.dmDisplayFlags );
-    set_value( L"DefaultSettings.XPanning", &devmode->u1.s2.dmPosition.x );
-    set_value( L"DefaultSettings.YPanning", &devmode->u1.s2.dmPosition.y );
-    set_value( L"DefaultSettings.Orientation", &devmode->u1.s2.dmDisplayOrientation );
-    set_value( L"DefaultSettings.FixedOutput", &devmode->u1.s2.dmDisplayFixedOutput );
+    set_value( L"BitsPerPel", &devmode->dmBitsPerPel );
+    set_value( L"XResolution", &devmode->dmPelsWidth );
+    set_value( L"YResolution", &devmode->dmPelsHeight );
+    set_value( L"VRefresh", &devmode->dmDisplayFrequency );
+    set_value( L"Flags", &devmode->u2.dmDisplayFlags );
+    set_value( L"XPanning", &devmode->u1.s2.dmPosition.x );
+    set_value( L"YPanning", &devmode->u1.s2.dmPosition.y );
+    set_value( L"Orientation", &devmode->u1.s2.dmDisplayOrientation );
+    set_value( L"FixedOutput", &devmode->u1.s2.dmDisplayFixedOutput );
 
 #undef set_value
 
@@ -3306,8 +3311,11 @@ LONG WINAPI ChangeDisplaySettingsExW( LPCWSTR devname, LPDEVMODEW devmode, HWND
     {
         ret = USER_Driver->pChangeDisplaySettingsEx(NULL, NULL, hwnd, flags, lparam);
         if (ret != DISP_CHANGE_SUCCESSFUL)
+        {
             ERR("Restoring all displays to their registry settings returned %d.\n", ret);
-        return ret;
+            return ret;
+        }
+        goto done;
     }
 
     while ((ret = EnumDisplayDevicesW( NULL, i++, &device, 0 )))
@@ -3371,13 +3379,20 @@ LONG WINAPI ChangeDisplaySettingsExW( LPCWSTR devname, LPDEVMODEW devmode, HWND
     if (flags & CDS_UPDATEREGISTRY)
     {
         if (!check_display_mode( device.DeviceName, devmode )) return DISP_CHANGE_BADMODE;
-        if (!write_registry_settings( &device, devmode )) return DISP_CHANGE_NOTUPDATED;
+        if (!write_registry_settings( &device, FALSE, devmode )) return DISP_CHANGE_NOTUPDATED;
     }
 
     ret = USER_Driver->pChangeDisplaySettingsEx(device.DeviceName, devmode, hwnd, flags, lparam);
     if (ret != DISP_CHANGE_SUCCESSFUL)
-        ERR("Changing %s display settings returned %d.\n", wine_dbgstr_w(device.DeviceName), ret);
-    return ret;
+    {
+        ERR("Changing %s display settings returned %d.\n", debugstr_w(devname), ret);
+        return ret;
+    }
+
+done:
+    if (flags & (CDS_TEST | CDS_NORESET)) return DISP_CHANGE_SUCCESSFUL;
+    if (!write_registry_settings( &device, TRUE, devmode )) ERR("Failed to write current mode to the registry\n");
+    return DISP_CHANGE_SUCCESSFUL;
 }
 
 
@@ -3472,7 +3487,8 @@ BOOL WINAPI EnumDisplaySettingsExW( const WCHAR *devname, DWORD index, DEVMODEW
 
     if ((ret = USER_Driver->pEnumDisplaySettingsEx( device.DeviceName, index, devmode, flags )) < 0)
     {
-        if (index == ENUM_REGISTRY_SETTINGS) ret = read_registry_settings( &device, devmode );
+        if (index == ENUM_REGISTRY_SETTINGS) ret = read_registry_settings( &device, FALSE, devmode );
+        else if (index == ENUM_CURRENT_SETTINGS) ret = read_registry_settings( &device, TRUE, devmode );
         else ret = FALSE;
     }
 
-- 
2.34.0

