From 5d805c0cdc725a0ccf4394448a64a729c87ff081 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 10 Jun 2022 09:37:04 +0200
Subject: [PATCH 07/30] winegstreamer: Use a wg_sample in the wg_parser request
 entry.

And wrap it into a buffer in src_getrange_cb.
---
 dlls/winegstreamer/wg_parser.c | 34 +++++++++++++++++++---------------
 1 file changed, 19 insertions(+), 15 deletions(-)

diff --git a/dlls/winegstreamer/wg_parser.c b/dlls/winegstreamer/wg_parser.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_parser.c
+++ b/dlls/winegstreamer/wg_parser.c
@@ -59,8 +59,8 @@ typedef BOOL (*init_gst_cb)(struct wg_parser *parser);
 struct request_entry
 {
     struct wg_request request;
+    struct wg_sample *sample;
     GstFlowReturn result;
-    GstBuffer *buffer;
     bool done;
 };
 
@@ -173,28 +173,18 @@ static NTSTATUS wg_parser_push_data(void *args)
     struct wg_parser *parser = params->parser;
     struct wg_sample *sample = params->sample;
     GstFlowReturn result = GST_FLOW_OK;
-    GstBuffer *buffer = NULL;
 
     if (!sample || !sample->data)
         result = GST_FLOW_ERROR;
     else if (!sample->size)
         result = GST_FLOW_EOS;
-    else if (!(buffer = gst_buffer_new_wrapped_full(GST_MEMORY_FLAG_READONLY, sample->data, sample->max_size,
-            0, sample->size, sample, wg_sample_free_notify)))
-    {
-        GST_ERROR("Failed to allocate input buffer");
-        return E_OUTOFMEMORY;
-    }
     else
-    {
         InterlockedIncrement(&sample->refcount);
-        GST_INFO("Wrapped %u/%u bytes from sample %p to buffer %p", sample->size, sample->max_size, sample, buffer);
-    }
 
     pthread_mutex_lock(&parser->mutex);
 
     parser->request->result = result;
-    parser->request->buffer = buffer;
+    parser->request->sample = sample;
     parser->request->done = true;
     parser->request = NULL;
 
@@ -886,6 +876,7 @@ static GstFlowReturn src_getrange_cb(GstPad *pad, GstObject *parent,
 {
     struct wg_parser *parser = gst_pad_get_element_private(pad);
     struct request_entry *entry;
+    struct wg_sample *sample;
     GstFlowReturn result;
 
     GST_LOG("pad %p, offset %" G_GINT64_MODIFIER "u, size %u, buffer %p.", pad, offset, size, *buffer);
@@ -923,16 +914,29 @@ static GstFlowReturn src_getrange_cb(GstPad *pad, GstObject *parent,
     while (!entry->done)
         pthread_cond_wait(&parser->request_done_cond, &parser->mutex);
 
-    *buffer = entry->buffer;
+    sample = entry->sample;
     result = entry->result;
 
     pthread_mutex_unlock(&parser->mutex);
 
     free(entry);
 
-    GST_LOG("Request returned %s.", gst_flow_get_name(result));
+    if (result)
+    {
+        GST_WARNING("Request returned %s.", gst_flow_get_name(result));
+        return result;
+    }
+
+    if (!(*buffer = gst_buffer_new_wrapped_full(GST_MEMORY_FLAG_READONLY, sample->data, sample->max_size,
+            0, sample->size, sample, wg_sample_free_notify)))
+    {
+        GST_ERROR("Failed to allocate input buffer");
+        InterlockedDecrement(&sample->refcount);
+        return GST_FLOW_ERROR;
+    }
 
-    return result;
+    GST_INFO("Wrapped %u/%u bytes from sample %p to buffer %p", sample->size, sample->max_size, sample, buffer);
+    return GST_FLOW_OK;
 }
 
 static gboolean src_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
-- 
2.37.1

