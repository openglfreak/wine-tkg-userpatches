From: Paul Gofman <pgofman@codeweavers.com>
Subject: [PATCH v2 3/7] ntdll: Use helpers to lock and unlock loader_section.
Message-Id: <20211001220041.349604-3-pgofman@codeweavers.com>
Date: Sat,  2 Oct 2021 01:00:37 +0300
In-Reply-To: <20211001220041.349604-1-pgofman@codeweavers.com>
References: <20211001220041.349604-1-pgofman@codeweavers.com>

Signed-off-by: Paul Gofman <pgofman@codeweavers.com>
---
 dlls/ntdll/loader.c | 114 ++++++++++++++++++++++++++------------------
 1 file changed, 67 insertions(+), 47 deletions(-)

diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -217,6 +217,26 @@ static inline BOOL contains_path( LPCWSTR name )
     return ((*name && (name[1] == ':')) || wcschr(name, '/') || wcschr(name, '\\'));
 }
 
+/*************************************************************************
+ *		lock_loader_exclusive
+ *
+ * Take exclusive loader lock.
+ */
+static void lock_loader_exclusive(void)
+{
+    RtlEnterCriticalSection( &loader_section );
+}
+
+/*************************************************************************
+ *		unlock_loader
+ *
+ * Release loader lock.
+ */
+static void unlock_loader(void)
+{
+    RtlLeaveCriticalSection( &loader_section );
+}
+
 #define RTL_UNLOAD_EVENT_TRACE_NUMBER 64
 
 typedef struct _RTL_UNLOAD_EVENT_TRACE
@@ -541,7 +561,7 @@ static ULONG hash_basename(const WCHAR *basename)
  *		get_modref
  *
  * Looks for the referenced HMODULE in the current process
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static WINE_MODREF *get_modref( HMODULE hmod )
 {
@@ -565,7 +585,7 @@ static WINE_MODREF *get_modref( HMODULE hmod )
  *	    find_basename_module
  *
  * Find a module from its base name.
- * The loader_section must be locked while calling this function
+ * The loader must be locked while calling this function
  */
 static WINE_MODREF *find_basename_module( LPCWSTR name )
 {
@@ -595,7 +615,7 @@ static WINE_MODREF *find_basename_module( LPCWSTR name )
  *	    find_fullname_module
  *
  * Find a module from its full path name.
- * The loader_section must be locked while calling this function
+ * The loader must be locked while calling this function
  */
 static WINE_MODREF *find_fullname_module( const UNICODE_STRING *nt_name )
 {
@@ -627,7 +647,7 @@ static WINE_MODREF *find_fullname_module( const UNICODE_STRING *nt_name )
  *	    find_fileid_module
  *
  * Find a module from its file id.
- * The loader_section must be locked while calling this function
+ * The loader must be locked while calling this function
  */
 static WINE_MODREF *find_fileid_module( const struct file_id *id )
 {
@@ -893,7 +913,7 @@ static NTSTATUS walk_node_dependencies( LDR_DDAG_NODE *node, void *context,
  *		find_forwarded_export
  *
  * Find the final function pointer for a forwarded function.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static FARPROC find_forwarded_export( HMODULE module, const char *forward, LPCWSTR load_path )
 {
@@ -960,7 +980,7 @@ static FARPROC find_forwarded_export( HMODULE module, const char *forward, LPCWS
  *
  * Find an exported function by ordinal.
  * The exports base must have been subtracted from the ordinal already.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static FARPROC find_ordinal_export( HMODULE module, const IMAGE_EXPORT_DIRECTORY *exports,
                                     DWORD exp_size, DWORD ordinal, LPCWSTR load_path )
@@ -1023,7 +1043,7 @@ static int find_name_in_exports( HMODULE module, const IMAGE_EXPORT_DIRECTORY *e
  *		find_named_export
  *
  * Find an exported function by name.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static FARPROC find_named_export( HMODULE module, const IMAGE_EXPORT_DIRECTORY *exports,
                                   DWORD exp_size, const char *name, int hint, LPCWSTR load_path )
@@ -1072,7 +1092,7 @@ void * WINAPI RtlFindExportedRoutineByName( HMODULE module, const char *name )
  *		import_dll
  *
  * Import the dll specified by the given import descriptor.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static BOOL import_dll( HMODULE module, const IMAGE_IMPORT_DESCRIPTOR *descr, LPCWSTR load_path, WINE_MODREF **pwm )
 {
@@ -1260,7 +1280,7 @@ static BOOL is_dll_native_subsystem( LDR_DATA_TABLE_ENTRY *mod, const IMAGE_NT_H
  *		alloc_tls_slot
  *
  * Allocate a TLS slot for a newly-loaded module.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static BOOL alloc_tls_slot( LDR_DATA_TABLE_ENTRY *mod )
 {
@@ -1344,7 +1364,7 @@ static BOOL alloc_tls_slot( LDR_DATA_TABLE_ENTRY *mod )
  *		free_tls_slot
  *
  * Free the module TLS slot on unload.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static void free_tls_slot( LDR_DATA_TABLE_ENTRY *mod )
 {
@@ -1366,7 +1386,7 @@ static void free_tls_slot( LDR_DATA_TABLE_ENTRY *mod )
  *       fixup_imports_ilonly
  *
  * Fixup imports for an IL-only module. All we do is import mscoree.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static NTSTATUS fixup_imports_ilonly( WINE_MODREF *wm, LPCWSTR load_path, void **entry )
 {
@@ -1405,7 +1425,7 @@ static NTSTATUS fixup_imports_ilonly( WINE_MODREF *wm, LPCWSTR load_path, void *
  *       fixup_imports
  *
  * Fixup all imports of a given module.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static NTSTATUS fixup_imports( WINE_MODREF *wm, LPCWSTR load_path )
 {
@@ -1458,7 +1478,7 @@ static NTSTATUS fixup_imports( WINE_MODREF *wm, LPCWSTR load_path )
  *		alloc_module
  *
  * Allocate a WINE_MODREF structure and add it to the process list
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static WINE_MODREF *alloc_module( HMODULE hModule, const UNICODE_STRING *nt_name, BOOL builtin )
 {
@@ -1690,7 +1710,7 @@ static NTSTATUS MODULE_InitDLL( WINE_MODREF *wm, UINT reason, LPVOID lpReserved
  * detach notifications are called in the reverse of the sequence the attach
  * notifications *returned*.
  *
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static NTSTATUS process_attach( LDR_DDAG_NODE *node, LPVOID lpReserved )
 {
@@ -1802,7 +1822,7 @@ static void process_detach(void)
  *
  * Send DLL thread attach notifications. These are sent in the
  * reverse sequence of process detach notification.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static void thread_attach(void)
 {
@@ -1832,7 +1852,7 @@ NTSTATUS WINAPI LdrDisableThreadCalloutsForDll(HMODULE hModule)
     WINE_MODREF *wm;
     NTSTATUS    ret = STATUS_SUCCESS;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     wm = get_modref( hModule );
     if (!wm || wm->ldr.TlsIndex == -1)
@@ -1840,7 +1860,7 @@ NTSTATUS WINAPI LdrDisableThreadCalloutsForDll(HMODULE hModule)
     else
         wm->ldr.Flags |= LDR_NO_DLL_CALLS;
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
 
     return ret;
 }
@@ -1886,7 +1906,7 @@ NTSTATUS WINAPI LdrEnumerateLoadedModules( void *unknown, LDRENUMPROC callback,
     if (unknown || !callback)
         return STATUS_INVALID_PARAMETER;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     mark = &NtCurrentTeb()->Peb->LdrData->InMemoryOrderModuleList;
     for (entry = mark->Flink; entry != mark; entry = entry->Flink)
@@ -1896,7 +1916,7 @@ NTSTATUS WINAPI LdrEnumerateLoadedModules( void *unknown, LDRENUMPROC callback,
         if (stop) break;
     }
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     return STATUS_SUCCESS;
 }
 
@@ -1921,9 +1941,9 @@ NTSTATUS WINAPI LdrRegisterDllNotification(ULONG flags, PLDR_DLL_NOTIFICATION_FU
     notify->callback = callback;
     notify->context = context;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
     list_add_tail( &ldr_notifications, &notify->entry );
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
 
     *cookie = notify;
     return STATUS_SUCCESS;
@@ -1940,9 +1960,9 @@ NTSTATUS WINAPI LdrUnregisterDllNotification( void *cookie )
 
     if (!notify) return STATUS_INVALID_PARAMETER;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
     list_remove( &notify->entry );
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
 
     RtlFreeHeap( GetProcessHeap(), 0, notify );
     return STATUS_SUCCESS;
@@ -2097,7 +2117,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
     DWORD exp_size;
     NTSTATUS ret = STATUS_PROCEDURE_NOT_FOUND;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     /* check if the module itself is invalid to return the proper error */
     if (!get_modref( module )) ret = STATUS_DLL_NOT_FOUND;
@@ -2113,7 +2133,7 @@ NTSTATUS WINAPI LdrGetProcedureAddress(HMODULE module, const ANSI_STRING *name,
         }
     }
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     return ret;
 }
 
@@ -3247,7 +3267,7 @@ done:
  *	load_dll  (internal)
  *
  * Load a PE style module according to the load order.
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static NTSTATUS load_dll( const WCHAR *load_path, const WCHAR *libname, DWORD flags, WINE_MODREF** pwm, BOOL system )
 {
@@ -3404,7 +3424,7 @@ NTSTATUS WINAPI DECLSPEC_HOTPATCH LdrLoadDll(LPCWSTR path_name, DWORD flags,
     NTSTATUS nts;
     WCHAR *dllname = append_dll_ext( libname->Buffer );
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     nts = load_dll( path_name, dllname ? dllname : libname->Buffer, flags, &wm, FALSE );
 
@@ -3419,7 +3439,7 @@ NTSTATUS WINAPI DECLSPEC_HOTPATCH LdrLoadDll(LPCWSTR path_name, DWORD flags,
     }
     *hModule = (wm) ? wm->ldr.DllBase : NULL;
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     RtlFreeHeap( GetProcessHeap(), 0, dllname );
     return nts;
 }
@@ -3437,7 +3457,7 @@ NTSTATUS WINAPI LdrGetDllFullName( HMODULE module, UNICODE_STRING *name )
 
     if (!module) module = NtCurrentTeb()->Peb->ImageBaseAddress;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
     wm = get_modref( module );
     if (wm)
     {
@@ -3445,7 +3465,7 @@ NTSTATUS WINAPI LdrGetDllFullName( HMODULE module, UNICODE_STRING *name )
         if (name->MaximumLength < wm->ldr.FullDllName.Length + sizeof(WCHAR)) status = STATUS_BUFFER_TOO_SMALL;
         else status = STATUS_SUCCESS;
     } else status = STATUS_DLL_NOT_FOUND;
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
 
     return status;
 }
@@ -3483,7 +3503,7 @@ NTSTATUS WINAPI LdrGetDllHandleEx( ULONG flags, LPCWSTR load_path, ULONG *dll_ch
 
     dllname = append_dll_ext( name->Buffer );
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     status = find_dll_file( load_path, dllname ? dllname : name->Buffer,
                             &nt_name, &wm, &mapping, &image_info, &id );
@@ -3504,7 +3524,7 @@ NTSTATUS WINAPI LdrGetDllHandleEx( ULONG flags, LPCWSTR load_path, ULONG *dll_ch
             LdrAddRefDll( 0, *base );
     }
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     RtlFreeHeap( GetProcessHeap(), 0, dllname );
     TRACE( "%s -> %p (load path %s)\n", debugstr_us(name), status ? NULL : *base, debugstr_w(load_path) );
     return status;
@@ -3530,7 +3550,7 @@ NTSTATUS WINAPI LdrAddRefDll( ULONG flags, HMODULE module )
 
     if (flags & ~LDR_ADDREF_DLL_PIN) FIXME( "%p flags %lx not implemented\n", module, flags );
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     if ((wm = get_modref( module )))
     {
@@ -3542,7 +3562,7 @@ NTSTATUS WINAPI LdrAddRefDll( ULONG flags, HMODULE module )
     }
     else ret = STATUS_INVALID_PARAMETER;
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     return ret;
 }
 
@@ -3628,7 +3648,7 @@ NTSTATUS WINAPI LdrQueryProcessModuleInformation(RTL_PROCESS_MODULES *smi,
 
     smi->ModulesCount = 0;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
     mark = &NtCurrentTeb()->Peb->LdrData->InLoadOrderModuleList;
     for (entry = mark->Flink; entry != mark; entry = entry->Flink)
     {
@@ -3656,7 +3676,7 @@ NTSTATUS WINAPI LdrQueryProcessModuleInformation(RTL_PROCESS_MODULES *smi,
         }
         else nts = STATUS_INFO_LENGTH_MISMATCH;
     }
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
 
     if (req_size) *req_size = size;
 
@@ -3869,7 +3889,7 @@ extern const char * CDECL wine_get_version(void);
  */
 void WINAPI RtlExitUserProcess( DWORD status )
 {
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
     RtlAcquirePebLock();
     NtTerminateProcess( 0, status );
     LdrShutdownProcess();
@@ -3895,7 +3915,7 @@ void WINAPI LdrShutdownThread(void)
 
     RtlProcessFlsData( NtCurrentTeb()->FlsSlots, 1 );
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
     wm = get_modref( NtCurrentTeb()->Peb->ImageBaseAddress );
 
     mark = &NtCurrentTeb()->Peb->LdrData->InInitializationOrderModuleList;
@@ -3927,7 +3947,7 @@ void WINAPI LdrShutdownThread(void)
     NtCurrentTeb()->TlsExpansionSlots = NULL;
     RtlReleasePebLock();
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     /* don't call DbgUiGetThreadDebugObject as some apps hook it and terminate if called */
     if (NtCurrentTeb()->DbgSsReserved[1]) NtClose( NtCurrentTeb()->DbgSsReserved[1] );
     RtlFreeThreadActivationContextStack();
@@ -4072,7 +4092,7 @@ static void MODULE_FlushModrefs( void ***modules, unsigned int *num_modules )
 /***********************************************************************
  *           MODULE_DecRefCount
  *
- * The loader_section must be locked while calling this function.
+ * The loader must be locked while calling this function.
  */
 static NTSTATUS MODULE_DecRefCount( LDR_DDAG_NODE *node, void *context )
 {
#@@ -3582,7 +3602,7 @@ static void MODULE_FlushModrefs(void)
# /***********************************************************************
#  *           MODULE_DecRefCount
#  *
#- * The loader_section must be locked while calling this function.
#+ * The loader must be locked while calling this function.
#  */
# static void MODULE_DecRefCount( WINE_MODREF *wm )
# {
@@ -4117,7 +4137,7 @@ NTSTATUS WINAPI LdrUnloadDll( HMODULE hModule )
 
     TRACE("(%p)\n", hModule);
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     free_lib_count++;
     if ((wm = get_modref( hModule )) != NULL)
@@ -4141,7 +4161,7 @@ NTSTATUS WINAPI LdrUnloadDll( HMODULE hModule )
 
     free_lib_count--;
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
 
     if (num_freed > 0)
     {
@@ -4271,7 +4291,7 @@ static void init_wow64( CONTEXT *context )
         imports_fixup_done = TRUE;
     }
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     pWow64LdrpInitialize( context );
 }
 
@@ -4376,7 +4396,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, ULONG_PTR unknown2, ULONG_PTR
 
     if (process_detaching) NtTerminateThread( GetCurrentThread(), 0 );
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
 
     if (!imports_fixup_done)
     {
@@ -4514,7 +4534,7 @@ void WINAPI LdrInitializeThunk( CONTEXT *context, ULONG_PTR unknown2, ULONG_PTR
         if (wm->ldr.TlsIndex == -1) call_tls_callbacks( wm->ldr.DllBase, DLL_THREAD_ATTACH );
     }
 
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     signal_start_thread( context );
 }
 
@@ -4613,9 +4633,9 @@ PVOID WINAPI RtlPcToFileHeader( PVOID pc, PVOID *address )
     LDR_DATA_TABLE_ENTRY *module;
     PVOID ret = NULL;
 
-    RtlEnterCriticalSection( &loader_section );
+    lock_loader_exclusive();
     if (!LdrFindEntryForAddress( pc, &module )) ret = module->DllBase;
-    RtlLeaveCriticalSection( &loader_section );
+    unlock_loader();
     *address = ret;
     return ret;
 }

-- 
2.40.0

