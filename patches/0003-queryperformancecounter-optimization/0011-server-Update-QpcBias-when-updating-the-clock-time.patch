From 481a5912f02e4f025d1f26c2bfd7b9e2c12b7fde Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 28 Apr 2021 09:44:42 +0200
Subject: [PATCH 11/15] server: Update QpcBias when updating the clock time.

---
 server/fd.c | 37 +++++++++++++++++++++++++++++++++++--
 1 file changed, 35 insertions(+), 2 deletions(-)

diff --git a/server/fd.c b/server/fd.c
index 220c0ea660b..db123baaac2 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -94,6 +94,9 @@
 #ifdef HAVE_SYS_SYSCALL_H
 #include <sys/syscall.h>
 #endif
+#if defined(__i386__) || defined(__x86_64__)
+#include <x86intrin.h>
+#endif
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -408,7 +411,7 @@ timeout_t monotonic_time;
 struct _KUSER_SHARED_DATA *user_shared_data = NULL;
 static const int user_shared_data_timeout = 16;
 
-static void atomic_store_ulong(volatile ULONG *ptr, ULONG value)
+static void atomic_store_ulonglong(volatile ULONGLONG *ptr, ULONGLONG value)
 {
     /* on x86 there should be total store order guarantees, so volatile is
      * enough to ensure the stores aren't reordered by the compiler, and then
@@ -421,6 +424,15 @@ static void atomic_store_ulong(volatile ULONG *ptr, ULONG value)
 #endif
 }
 
+static void atomic_store_ulong(volatile ULONG *ptr, ULONG value)
+{
+#if defined(__i386__) || defined(__x86_64__)
+    *ptr = value;
+#else
+    __atomic_store_n(ptr, value, __ATOMIC_SEQ_CST);
+#endif
+}
+
 static void atomic_store_long(volatile LONG *ptr, LONG value)
 {
 #if defined(__i386__) || defined(__x86_64__)
@@ -437,6 +449,9 @@ static void set_user_shared_data_time(void)
     timeout_t timezone_bias;
     struct tm *tm;
     time_t now;
+    unsigned __int64 tsc, qpc_bias, qpc_freq = user_shared_data->QpcFrequency;
+    unsigned int aux, qpc_shift = user_shared_data->QpcShift;
+    unsigned int qpc_bypass = user_shared_data->QpcBypassEnabled;
 
     if (monotonic_time - last_timezone_update > TICKS_PER_SEC)
     {
@@ -454,6 +469,23 @@ static void set_user_shared_data_time(void)
         last_timezone_update = monotonic_time;
     }
 
+    if (!(qpc_bypass & SHARED_GLOBAL_FLAGS_QPC_BYPASS_ENABLED))
+        tsc = 0;
+#if defined(__i386__) || defined(__x86_64__)
+    else if (qpc_bypass & SHARED_GLOBAL_FLAGS_QPC_BYPASS_USE_RDTSCP)
+        tsc = __rdtscp(&aux);
+    else
+    {
+        if (qpc_bypass & SHARED_GLOBAL_FLAGS_QPC_BYPASS_USE_MFENCE)
+            __asm__ __volatile__ ( "mfence" : : : "memory" );
+        if (qpc_bypass & SHARED_GLOBAL_FLAGS_QPC_BYPASS_USE_LFENCE)
+            __asm__ __volatile__ ( "lfence" : : : "memory" );
+        tsc = __rdtsc();
+    }
+#endif
+
+    qpc_bias = ((monotonic_time * qpc_freq / 10000000) << qpc_shift) - tsc;
+
     atomic_store_long(&user_shared_data->SystemTime.High2Time, current_time >> 32);
     atomic_store_ulong(&user_shared_data->SystemTime.LowPart, current_time);
     atomic_store_long(&user_shared_data->SystemTime.High1Time, current_time >> 32);
@@ -466,6 +498,7 @@ static void set_user_shared_data_time(void)
     atomic_store_ulong(&user_shared_data->TickCount.LowPart, tick_count);
     atomic_store_long(&user_shared_data->TickCount.High1Time, tick_count >> 32);
     atomic_store_ulong(&user_shared_data->TickCountLowDeprecated, tick_count);
+    atomic_store_ulonglong(&user_shared_data->QpcBias, qpc_bias);
 }
 
 void set_current_time(void)
-- 
2.31.1

