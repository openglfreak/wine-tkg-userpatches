From 11577a2975bdc48e5216ca96151b20f02ab6fa43 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 17 Mar 2022 11:49:07 +0100
Subject: [PATCH 3/3] amend! server: Reuse shared mapping's mmaped pointer and
 handle mmap failures.

server: Reuse shared mapping's mmaped pointer and handle mmap failures.

Desktop and its shared mapping can be still alive and may be reused
after desktop is unlinked via close_desktop_timeout() but before all
references and handles are cleared.

On the re-use path the mmap(PROT_WRITE) is called on a write-sealed fd
which will fail returning MAP_FAILED. It would then be propagated up and
dereferenced causing the server to crash.

This fixes the crash + makes sure that we can recreate the desktop
successfully if needed.

This also correctly unmap the shared memory pointers whenever a mapping
is destroyed, fixing memory leaks when many threads are created.

Fixes: 653dab05664e ("server: Seal shared memory mappings against future writes.")
Fixes: 61521e371ac4 ("HACK: server: Close desktop immediately when last user is removed.")
CW-Bug-Id: #20266
CW-Bug-Id: #20297
---
 server/mapping.c    | 22 +++++++++++-----------
 server/thread.c     |  4 ++--
 server/winstation.c |  3 ++-
 3 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/server/mapping.c b/server/mapping.c
index 11111111111..11111111111 100644
--- a/server/mapping.c
+++ b/server/mapping.c
@@ -29,6 +29,7 @@
 #include <sys/stat.h>
 #include <sys/mman.h>
 #include <unistd.h>
+#include <errno.h>
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -167,7 +168,7 @@ struct mapping
     pe_image_info_t image;           /* image info (for PE image mapping) */
     struct ranges  *committed;       /* list of committed ranges in this mapping */
     struct shared_map *shared;       /* temp file for shared PE mapping */
-    void *shared_ptr;                /* mmaped pointer for shared mappings */
+    void           *shared_ptr;      /* mmaped pointer for shared mappings */
 };
 
 static void mapping_dump( struct object *obj, int verbose );
@@ -906,7 +907,7 @@ static struct mapping *create_mapping( struct object *root, const struct unicode
     mapping->fd          = NULL;
     mapping->shared      = NULL;
     mapping->committed   = NULL;
-    mapping->shared_ptr  = NULL;
+    mapping->shared_ptr  = MAP_FAILED;
 
     if (!(mapping->flags = get_mapping_flags( handle, flags ))) goto error;
 
@@ -1107,6 +1108,7 @@ static void mapping_destroy( struct object *obj )
     if (mapping->fd) release_object( mapping->fd );
     if (mapping->committed) release_object( mapping->committed );
     if (mapping->shared) release_object( mapping->shared );
+    if (mapping->shared_ptr != MAP_FAILED) munmap( mapping->shared_ptr, mapping->size );
 }
 
 static enum server_fd_type mapping_get_fd_type( struct fd *fd )
@@ -1165,21 +1167,19 @@ struct object *create_shared_mapping( struct object *root, const struct unicode_
     if (!(mapping = create_mapping( root, name, OBJ_OPENIF, size, SEC_COMMIT, 0,
                                     FILE_READ_DATA | FILE_WRITE_DATA, sd ))) return NULL;
 
-    if (mapping->shared_ptr)
-        *ptr = mapping->shared_ptr;
-    else
-        *ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED, get_unix_fd( mapping->fd ), 0 );
+    if (mapping->shared_ptr == MAP_FAILED)
+        mapping->shared_ptr = mmap( NULL, mapping->size, PROT_WRITE, MAP_SHARED,
+                                    get_unix_fd( mapping->fd ), 0 );
 
-    fcntl( get_unix_fd( mapping->fd ), F_ADD_SEALS, seals );
-
-    if (*ptr == MAP_FAILED)
+    if (mapping->shared_ptr == MAP_FAILED)
     {
-        *ptr = NULL;
+        fprintf( stderr, "wine: Failed to map shared memory: %u %m\n", errno );
         release_object( &mapping->obj );
         return NULL;
     }
 
-    mapping->shared_ptr = *ptr;
+    fcntl( get_unix_fd( mapping->fd ), F_ADD_SEALS, seals );
+    *ptr = mapping->shared_ptr;
 
     return &mapping->obj;
 }
diff --git a/server/thread.c b/server/thread.c
index 11111111111..11111111111 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -419,7 +419,7 @@ static volatile void *init_queue_mapping( struct thread *thread )
     thread->queue_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct queue_shared_memory),
                                                           NULL, (void **)&thread->queue_shared );
     release_object( dir );
-    if (thread->queue_shared)
+    if (thread->queue_shared_mapping)
     {
         memset( (void *)thread->queue_shared, 0, sizeof(*thread->queue_shared) );
         thread->queue_shared->input_tid = thread->id;
@@ -445,7 +445,7 @@ static volatile void *init_input_mapping( struct thread *thread )
     thread->input_shared_mapping = create_shared_mapping( dir, &name, sizeof(struct input_shared_memory),
                                                           NULL, (void **)&thread->input_shared );
     release_object( dir );
-    if (thread->input_shared)
+    if (thread->input_shared_mapping)
     {
         memset( (void *)thread->input_shared, 0, sizeof(*thread->input_shared) );
         thread->input_shared->tid = thread->id;
diff --git a/server/winstation.c b/server/winstation.c
index 11111111111..11111111111 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -234,7 +234,7 @@ static volatile void *init_desktop_mapping( struct desktop *desktop, const struc
     desktop->shared_mapping = create_shared_mapping( dir, name, sizeof(struct desktop_shared_memory),
                                                      NULL, (void **)&desktop->shared );
     release_object( dir );
-    if (desktop->shared)
+    if (desktop->shared_mapping)
     {
         memset( (void *)desktop->shared, 0, sizeof(*desktop->shared) );
         desktop->shared->update_serial = 1;
@@ -324,6 +324,7 @@ static void desktop_destroy( struct object *obj )
     if (desktop->global_hooks) release_object( desktop->global_hooks );
     list_remove( &desktop->entry );
     if (desktop->shared_mapping) release_object( desktop->shared_mapping );
+    desktop->shared_mapping = NULL;
     release_object( desktop->winstation );
 }
 
