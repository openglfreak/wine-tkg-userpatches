From 9490a634610c111aba940c527200f3fdba113e96 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 7 Oct 2021 17:50:51 +0200
Subject: [PATCH] wineboot: Calibrate TSC frequency after reading CPU
 capabilities.

To support old CPUs without rdtscp / rdtsc instructions.
---
 programs/wineboot/wineboot.c | 50 ++++++++++++++++++++++++------------
 1 file changed, 33 insertions(+), 17 deletions(-)

diff --git a/programs/wineboot/wineboot.c b/programs/wineboot/wineboot.c
index f82e2cfc26a..1baedd084a3 100644
--- a/programs/wineboot/wineboot.c
+++ b/programs/wineboot/wineboot.c
@@ -243,7 +243,7 @@ static void initialize_xstate_features(struct _KUSER_SHARED_DATA *data)
     TRACE("XSAVE feature 2 %#x, %#x, %#x, %#x.\n", regs[0], regs[1], regs[2], regs[3]);
 }
 
-static UINT64 read_tsc_frequency(void)
+static UINT64 read_tsc_frequency(BOOL use_rdtscp)
 {
     UINT64 freq = 0;
 
@@ -287,16 +287,30 @@ static UINT64 read_tsc_frequency(void)
         LONGLONG time0, time1, tsc0, tsc1, tsc2, tsc3, freq0, freq1, error;
         unsigned int aux;
         UINT retries = 50;
+        int regs[4];
 
         do
         {
-            tsc0 = __rdtscp(&aux);
-            time0 = RtlGetSystemTimePrecise();
-            tsc1 = __rdtscp(&aux);
-            Sleep(1);
-            tsc2 = __rdtscp(&aux);
-            time1 = RtlGetSystemTimePrecise();
-            tsc3 = __rdtscp(&aux);
+            if (use_rdtscp)
+            {
+                tsc0 = __rdtscp(&aux);
+                time0 = RtlGetSystemTimePrecise();
+                tsc1 = __rdtscp(&aux);
+                Sleep(1);
+                tsc2 = __rdtscp(&aux);
+                time1 = RtlGetSystemTimePrecise();
+                tsc3 = __rdtscp(&aux);
+            }
+            else
+            {
+                tsc0 = __rdtsc(); __cpuid(regs, 0);
+                time0 = RtlGetSystemTimePrecise();
+                tsc1 = __rdtsc(); __cpuid(regs, 0);
+                Sleep(1);
+                tsc2 = __rdtsc(); __cpuid(regs, 0);
+                time1 = RtlGetSystemTimePrecise();
+                tsc3 = __rdtsc(); __cpuid(regs, 0);
+            }
 
             freq0 = (tsc2 - tsc0) * 10000000 / (time1 - time0);
             freq1 = (tsc3 - tsc1) * 10000000 / (time1 - time0);
@@ -339,7 +353,7 @@ static BOOL is_tsc_trusted_by_the_kernel(void)
     return ret;
 }
 
-static void initialize_qpc_features(struct _KUSER_SHARED_DATA *data, UINT64 tsc_frequency)
+static void initialize_qpc_features(struct _KUSER_SHARED_DATA *data, UINT64 *tsc_frequency)
 {
     int regs[4];
 
@@ -388,7 +402,9 @@ static void initialize_qpc_features(struct _KUSER_SHARED_DATA *data, UINT64 tsc_
     else
         data->QpcBypassEnabled |= SHARED_GLOBAL_FLAGS_QPC_BYPASS_USE_MFENCE;
 
-    if ((data->QpcFrequency = (tsc_frequency >> 10)))
+    *tsc_frequency = read_tsc_frequency((regs[3] & (1 << 27)) != 0);
+
+    if ((data->QpcFrequency = (*tsc_frequency >> 10)))
     {
         data->QpcShift = 10;
         data->QpcBias = 0;
@@ -410,12 +426,13 @@ static void initialize_xstate_features(struct _KUSER_SHARED_DATA *data)
 {
 }
 
-static void initialize_qpc_features(struct _KUSER_SHARED_DATA *data)
+static void initialize_qpc_features(struct _KUSER_SHARED_DATA *data, UINT64 *tsc_frequency)
 {
     data->QpcBypassEnabled = 0;
     data->QpcFrequency = TICKSPERSEC;
     data->QpcShift = 0;
     data->QpcBias = 0;
+    *tsc_frequency = 0;
 }
 
 #endif
@@ -478,7 +495,7 @@ static void create_hypervisor_shared_data(UINT64 tsc_frequency)
     hypervisor_shared_data->QpcMultiplier = 0;
     hypervisor_shared_data->QpcBias = 0;
 
-    if (user_shared_data->QpcBypassEnabled & SHARED_GLOBAL_FLAGS_QPC_BYPASS_ENABLED)
+    if ((user_shared_data->QpcBypassEnabled & SHARED_GLOBAL_FLAGS_QPC_BYPASS_ENABLED) && tsc_frequency)
     {
         hypervisor_shared_data->QpcMultiplier = muldiv_tsc((UINT64)5000 << 32, (UINT64)2000 << 32, tsc_frequency);
         user_shared_data->QpcBypassEnabled |= SHARED_GLOBAL_FLAGS_QPC_BYPASS_USE_HV_PAGE;
@@ -495,7 +512,7 @@ static void create_hypervisor_shared_data(UINT64 tsc_frequency)
     UnmapViewOfFile( hypervisor_shared_data );
 }
 
-static void create_user_shared_data(UINT64 tsc_frequency)
+static void create_user_shared_data(UINT64 *tsc_frequency)
 {
     struct _KUSER_SHARED_DATA *data;
     RTL_OSVERSIONINFOEXW version;
@@ -970,6 +987,7 @@ static void create_hardware_registry_keys(UINT64 tsc_frequency)
                               KEY_ALL_ACCESS, NULL, &hkey, NULL ))
         {
             DWORD tsc_freq_mhz = (DWORD)(tsc_frequency / 1000000ull); /* Hz -> Mhz */
+            if (!tsc_freq_mhz) tsc_freq_mhz = power_info[i].MaxMhz;
 
             RegSetValueExW( hkey, L"FeatureSet", 0, REG_DWORD, (BYTE *)&sci.FeatureSet, sizeof(DWORD) );
             set_reg_value( hkey, L"Identifier", id );
@@ -1929,12 +1947,10 @@ int __cdecl main( int argc, char *argv[] )
     BOOL end_session, force, init, kill, restart, shutdown, update;
     HANDLE event;
     OBJECT_ATTRIBUTES attr;
-    UINT64 tsc_frequency;
+    UINT64 tsc_frequency = 0;
     UNICODE_STRING nameW;
     BOOL is_wow64;
 
-    tsc_frequency = read_tsc_frequency();
-
     end_session = force = init = kill = restart = shutdown = update = FALSE;
     GetWindowsDirectoryW( windowsdir, MAX_PATH );
     if( !SetCurrentDirectoryW( windowsdir ) )
@@ -2017,7 +2033,7 @@ int __cdecl main( int argc, char *argv[] )
 
     ResetEvent( event );  /* in case this is a restart */
 
-    create_user_shared_data(tsc_frequency);
+    create_user_shared_data(&tsc_frequency);
     create_hypervisor_shared_data(tsc_frequency);
     create_hardware_registry_keys(tsc_frequency);
     create_dynamic_registry_keys();
