From 0c809e509117a4f7ce562baa134e14555df8a5d7 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Mon, 25 Apr 2022 05:24:27 +0200
Subject: [PATCH 14/16] Revert "winex11.drv: Advertise XInput2 version 2.1
 support."

This reverts staging patch patches/user32-rawinput-mouse/0003-winex11.drv-Advertise-XInput2-version-2.1-support.patch
---
 dlls/winex11.drv/mouse.c  | 42 ++++++++++++++++++++++++++++++++++-----
 dlls/winex11.drv/x11drv.h |  3 +++
 2 files changed, 40 insertions(+), 5 deletions(-)

diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -285,7 +285,7 @@ void x11drv_xinput_init(void)
 {
 #ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
     struct x11drv_thread_data *data = x11drv_thread_data();
-    int major = 2, minor = 1;
+    int major = 2, minor = 0;
 
     if (data->xi2_state != xi_unknown) return;
 
@@ -298,7 +298,7 @@ void x11drv_xinput_init(void)
     else
     {
         data->xi2_state = xi_unavailable;
-        WARN( "XInput 2.1 not available\n" );
+        WARN( "XInput 2.0 not available\n" );
     }
 #endif
 }
@@ -334,7 +334,7 @@ void x11drv_xinput_enable( Display *display, Window window, long event_mask )
 
     mask.mask     = mask_bits;
     mask.mask_len = sizeof(mask_bits);
-    mask.deviceid = XIAllMasterDevices;
+    mask.deviceid = XIAllDevices;
     memset( mask_bits, 0, sizeof(mask_bits) );
     XISetMask( mask_bits, XI_DeviceChanged );
     XISetMask( mask_bits, XI_RawMotion );
@@ -347,6 +347,16 @@ void x11drv_xinput_enable( Display *display, Window window, long event_mask )
     update_relative_valuators( pointer_info->classes, pointer_info->num_classes );
     pXIFreeDeviceInfo( pointer_info );
 
+    /* This device info list is only used to find the initial current slave if
+     * no XI_DeviceChanged events happened. If any hierarchy change occurred that
+     * might be relevant here (eg. user switching mice after (un)plugging), a
+     * XI_DeviceChanged event will point us to the right slave. So this list is
+     * safe to be obtained statically at x11drv_xinput_enable() time.
+     */
+    if (data->xi2_devices) pXIFreeDeviceInfo( data->xi2_devices );
+    data->xi2_devices = pXIQueryDevice( data->display, XIAllDevices, &data->xi2_device_count );
+    data->xi2_current_slave = 0;
+
     data->xi2_state = xi_enabled;
 }
 
@@ -379,16 +389,19 @@ void x11drv_xinput_disable( Display *display, Window window, long event_mask )
 
     mask.mask = NULL;
     mask.mask_len = 0;
-    mask.deviceid = XIAllMasterDevices;
+    mask.deviceid = XIAllDevices;
 
     pXISelectEvents( display, DefaultRootWindow( display ), &mask, 1 );
 
     if (!data) return;
+    pXIFreeDeviceInfo( data->xi2_devices );
     data->x_valuator.number = -1;
     data->y_valuator.number = -1;
     data->x_valuator.value = 0;
     data->y_valuator.value = 0;
+    data->xi2_devices = NULL;
     data->xi2_core_pointer = 0;
+    data->xi2_current_slave = 0;
     data->xi2_state = xi_disabled;
 #endif
 }
@@ -1881,6 +1894,7 @@ static BOOL X11DRV_DeviceChanged( XGenericEventCookie *xev )
     if (event->reason != XISlaveSwitch) return FALSE;
 
     update_relative_valuators( event->classes, event->num_classes );
+    data->xi2_current_slave = event->sourceid;
     return TRUE;
 }
 
@@ -1896,7 +1910,25 @@ static BOOL map_raw_event_coords( XIRawEvent *event, INPUT *input )
     if (x->number < 0 || y->number < 0) return FALSE;
     if (!event->valuators.mask_len) return FALSE;
     if (thread_data->xi2_state != xi_enabled) return FALSE;
-    if (event->deviceid != thread_data->xi2_core_pointer) return FALSE;
+
+    /* If there is no slave currently detected, no previous motion nor device
+     * change events were received. Look it up now on the device list in this
+     * case.
+     */
+    if (!thread_data->xi2_current_slave)
+    {
+        XIDeviceInfo *devices = thread_data->xi2_devices;
+
+        for (i = 0; i < thread_data->xi2_device_count; i++)
+        {
+            if (devices[i].use != XISlavePointer) continue;
+            if (devices[i].deviceid != event->deviceid) continue;
+            if (devices[i].attachment != thread_data->xi2_core_pointer) continue;
+            thread_data->xi2_current_slave = event->deviceid;
+            break;
+        }
+    }
+    if (event->deviceid != thread_data->xi2_current_slave) return FALSE;
 
     virtual_rect = NtUserGetVirtualScreenRect();
 
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -401,9 +401,12 @@ struct x11drv_thread_data
     DWORD    clip_reset;           /* time when clipping was last reset */
 #ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
     enum xi2_state xi2_state;      /* XInput2 state */
+    void    *xi2_devices;          /* list of XInput2 devices (valid when state is enabled) */
+    int      xi2_device_count;
     XIValuatorClassInfo x_valuator;
     XIValuatorClassInfo y_valuator;
     int      xi2_core_pointer;     /* XInput2 core pointer id */
+    int      xi2_current_slave;    /* Current slave driving the Core pointer */
 #endif /* HAVE_X11_EXTENSIONS_XINPUT2_H */
 };
 
-- 
2.39.0

