From ad4f1401cf79ff2cef0a3eaa40be156a016fd40a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 20 May 2021 15:33:11 +0200
Subject: [PATCH 4/6] user32: Send WM_NCACTIVATE on SetForegroundWindow call.

When window is already active but has lost foreground, as shown by
concurrent SetForegroundWindow tests.
---
 dlls/user32/tests/msg.c | 43 ++++++++++++++++++++---------------------
 dlls/win32u/input.c     |  4 ++++
 2 files changed, 25 insertions(+), 22 deletions(-)

diff --git a/dlls/user32/tests/msg.c b/dlls/user32/tests/msg.c
index 11111111111..11111111111 100644
--- a/dlls/user32/tests/msg.c
+++ b/dlls/user32/tests/msg.c
@@ -14929,7 +14929,6 @@ struct test_set_foreground_window_desc
 
     BOOL todo_seq_before_set_foreground;
     const struct message *seq_before_set_foreground;
-    BOOL todo_seq_after_set_foreground;
     const struct message *seq_after_set_foreground;
     BOOL todo_seq_after_peek_message;
     const struct message *seq_after_peek_message;
@@ -15017,26 +15016,26 @@ static void test_interthread_set_foreground_window(struct test_set_foreground_wi
     };
     const struct test_set_foreground_window_desc test_sfw_tests[] =
     {
-        { hwnd1, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, FALSE, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
-        { hwnd1, TRUE, FALSE, FALSE,   FALSE, WmEmptySeq,  TRUE, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
-        { hwnd1, FALSE, TRUE, FALSE,   FALSE, WmEmptySeq, FALSE, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
-        { hwnd1, TRUE, TRUE, FALSE,    FALSE, WmEmptySeq,  TRUE, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
-        { hwnd1, FALSE, FALSE, TRUE,   FALSE, WmEmptySeq, FALSE, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
-        { hwnd1, TRUE, FALSE, TRUE,    FALSE, WmEmptySeq,  TRUE, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
-
-        { hwnd2, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, FALSE, sequence_3,  TRUE, sequence_0,  TRUE, hwnd1 },
-        { hwnd2, TRUE, FALSE, FALSE,   FALSE, WmEmptySeq, FALSE, sequence_3,  TRUE, sequence_0,  TRUE, hwnd1 },
-        { hwnd2, FALSE, TRUE, FALSE,   FALSE, sequence_3, FALSE, WmEmptySeq,  TRUE, sequence_0,  TRUE, hwnd1 },
-        { hwnd2, TRUE, TRUE, FALSE,    FALSE, sequence_4,  TRUE, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
-        { hwnd2, FALSE, FALSE, TRUE,    TRUE, sequence_5, FALSE, WmEmptySeq,  TRUE, sequence_0,  TRUE, hwnd1 },
-        { hwnd2, TRUE, FALSE, TRUE,     TRUE, sequence_6,  TRUE, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
-
-        { hwnd0, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, FALSE, sequence_3, FALSE, sequence_0, FALSE, hwnd1 },
-        { hwnd0, TRUE, FALSE, FALSE,   FALSE, WmEmptySeq, FALSE, sequence_3,  TRUE, sequence_0,  TRUE, hwnd1 },
-        { hwnd0, FALSE, TRUE, FALSE,   FALSE, sequence_3, FALSE, WmEmptySeq, FALSE, sequence_0, FALSE, hwnd1 },
-        { hwnd0, TRUE, TRUE, FALSE,    FALSE, sequence_4,  TRUE, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
-        { hwnd0, FALSE, FALSE, TRUE,    TRUE, sequence_5, FALSE, WmEmptySeq, FALSE, sequence_0, FALSE, hwnd1 },
-        { hwnd0, TRUE, FALSE, TRUE,     TRUE, sequence_6,  TRUE, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, TRUE, FALSE, FALSE,   FALSE, WmEmptySeq, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, FALSE, TRUE, FALSE,   FALSE, WmEmptySeq, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, TRUE, TRUE, FALSE,    FALSE, WmEmptySeq, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, FALSE, FALSE, TRUE,   FALSE, WmEmptySeq, WmEmptySeq, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd1, TRUE, FALSE, TRUE,    FALSE, WmEmptySeq, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
+
+        { hwnd2, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, sequence_3,  TRUE, sequence_0,  TRUE, hwnd1 },
+        { hwnd2, TRUE, FALSE, FALSE,   FALSE, WmEmptySeq, sequence_3,  TRUE, sequence_0,  TRUE, hwnd1 },
+        { hwnd2, FALSE, TRUE, FALSE,   FALSE, sequence_3, WmEmptySeq,  TRUE, sequence_0,  TRUE, hwnd1 },
+        { hwnd2, TRUE, TRUE, FALSE,    FALSE, sequence_4, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd2, FALSE, FALSE, TRUE,    TRUE, sequence_5, WmEmptySeq,  TRUE, sequence_0,  TRUE, hwnd1 },
+        { hwnd2, TRUE, FALSE, TRUE,     TRUE, sequence_6, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
+
+        { hwnd0, FALSE, FALSE, FALSE,  FALSE, WmEmptySeq, sequence_3, FALSE, sequence_0, FALSE, hwnd1 },
+        { hwnd0, TRUE, FALSE, FALSE,   FALSE, WmEmptySeq, sequence_3,  TRUE, sequence_0,  TRUE, hwnd1 },
+        { hwnd0, FALSE, TRUE, FALSE,   FALSE, sequence_3, WmEmptySeq, FALSE, sequence_0, FALSE, hwnd1 },
+        { hwnd0, TRUE, TRUE, FALSE,    FALSE, sequence_4, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
+        { hwnd0, FALSE, FALSE, TRUE,    TRUE, sequence_5, WmEmptySeq, FALSE, sequence_0, FALSE, hwnd1 },
+        { hwnd0, TRUE, FALSE, TRUE,     TRUE, sequence_6, sequence_1, FALSE, sequence_2, FALSE, hwnd0 },
     };
 
     DWORD i, res;
@@ -15083,7 +15082,7 @@ static void test_interthread_set_foreground_window(struct test_set_foreground_wi
 
         flush_sequence();
         SetForegroundWindow( hwnd1 );
-        ok_sequence( test->seq_after_set_foreground, "after SetForegroundWindow", test->todo_seq_after_set_foreground );
+        ok_sequence( test->seq_after_set_foreground, "after SetForegroundWindow", FALSE );
         check_foreground_window( hwnd1, FALSE );
 
         flush_sequence();
diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -1407,6 +1407,10 @@ BOOL set_foreground_window( HWND hwnd, BOOL mouse )
         else if (send_msg_new)  /* old window belongs to us but new one to other thread */
             ret = set_active_window( 0, NULL, mouse, TRUE );
 
+        /* already active, set_active_window will do no nothing */
+        if (!send_msg_new && hwnd == get_active_window())
+            send_message( hwnd, WM_NCACTIVATE, TRUE, (LPARAM)hwnd );
+
         if (send_msg_new)  /* new window belongs to other thread */
             post_message( hwnd, WM_WINE_SETACTIVEWINDOW, (WPARAM)hwnd, 0 );
         else  /* new window belongs to us */
-- 
2.35.1

