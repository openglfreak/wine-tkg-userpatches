From a6c6e9a751a3c27a593a9a53182d10603adb9b08 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 23 Dec 2021 12:15:26 +0100
Subject: [PATCH 8/9] win32u: Use the registered device array in
 GetRegisteredRawInputDevices.

---
 dlls/win32u/rawinput.c | 44 ++++++++++++++++++------------------------
 1 file changed, 19 insertions(+), 25 deletions(-)

diff --git a/dlls/win32u/rawinput.c b/dlls/win32u/rawinput.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/rawinput.c
+++ b/dlls/win32u/rawinput.c
@@ -896,8 +896,7 @@ static int compare_raw_input_devices( const void *ap, const void *bp )
  */
 UINT WINAPI NtUserGetRegisteredRawInputDevices( RAWINPUTDEVICE *devices, UINT *device_count, UINT size )
 {
-    struct rawinput_device *buffer = NULL;
-    unsigned int i, status, buffer_size;
+    unsigned int i, count = *device_count;
 
     TRACE("devices %p, device_count %p, size %u\n", devices, device_count, size);
 
@@ -907,35 +906,30 @@ UINT WINAPI NtUserGetRegisteredRawInputDevices( RAWINPUTDEVICE *devices, UINT *d
         return ~0u;
     }
 
-    buffer_size = *device_count * sizeof(*buffer);
-    if (devices && !(buffer = malloc( buffer_size )))
-        return ~0u;
+    pthread_mutex_lock( &rawinput_devices_mutex );
 
-    SERVER_START_REQ(update_rawinput_devices)
+    *device_count = registered_count;
+    if (!devices)
+        count = 0;
+    else if (*device_count < count)
     {
-        if (buffer) wine_server_set_reply( req, buffer, buffer_size );
-        status = wine_server_call_err(req);
-        *device_count = reply->device_count;
+        SetLastError(ERROR_INSUFFICIENT_BUFFER);
+        count = ~0u;
     }
-    SERVER_END_REQ;
-    if (status)
+    else
     {
-        free( buffer );
-        return ~0u;
-    }
-
-    if (!devices) return 0;
+        for (i = 0, count = *device_count; i < count; ++i)
+        {
+            devices[i].usUsagePage = registered_array[i].usage_page;
+            devices[i].usUsage = registered_array[i].usage;
+            devices[i].dwFlags = registered_array[i].flags;
+            devices[i].hwndTarget = wine_server_ptr_handle(registered_array[i].target);
+        }
 
-    for (i = 0; i < *device_count; ++i)
-    {
-        devices[i].usUsagePage = buffer[i].usage_page;
-        devices[i].usUsage = buffer[i].usage;
-        devices[i].dwFlags = buffer[i].flags;
-        devices[i].hwndTarget = wine_server_ptr_handle(buffer[i].target);
+        qsort( devices, count, sizeof(*devices), compare_raw_input_devices );
     }
 
-    qsort( devices, *device_count, sizeof(*devices), compare_raw_input_devices );
+    pthread_mutex_unlock( &rawinput_devices_mutex );
 
-    free( buffer );
-    return *device_count;
+    return count;
 }
-- 
2.37.1

