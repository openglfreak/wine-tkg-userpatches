From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Subject: [PATCH 2/2] server: Relax memory order constraints in atomic_store_* functions.
Message-Id: <4c5c1b87-df6d-5bdf-55ac-8b5e0104c26e@gmail.com>
Date: Fri, 11 Feb 2022 02:19:50 +0900
In-Reply-To: <43291f42-4fb9-3f5c-e8ad-c418475696c9@gmail.com>
References: <43291f42-4fb9-3f5c-e8ad-c418475696c9@gmail.com>

We only require stores to not be reordered with other stores, so the
release semantics (load+store, store+store) would be enough.
Note that sequentially consistent memory accesses usually involve
an expensive memory barrier on most architectures.

Signed-off-by: Jinoh Kang <jinoh.kang.kr@gmail.com>
---
 server/fd.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/server/fd.c b/server/fd.c
index 11111111111..11111111111 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -390,7 +390,7 @@ static void atomic_store_ulong(volatile ULONG *ptr, ULONG value)
 #if defined(__i386__) || defined(__x86_64__)
     *ptr = value;
 #else
-    __atomic_store_n(ptr, value, __ATOMIC_SEQ_CST);
+    __atomic_store_n(ptr, value, __ATOMIC_RELEASE);
 #endif
 }
 
@@ -403,7 +403,7 @@ static void atomic_store_long(volatile LONG *ptr, LONG value)
 #if defined(__i386__) || defined(__x86_64__)
     *ptr = value;
 #else
-    __atomic_store_n(ptr, value, __ATOMIC_SEQ_CST);
+    __atomic_store_n(ptr, value, __ATOMIC_RELEASE);
 #endif
 }
 

-- 
0.0.0

