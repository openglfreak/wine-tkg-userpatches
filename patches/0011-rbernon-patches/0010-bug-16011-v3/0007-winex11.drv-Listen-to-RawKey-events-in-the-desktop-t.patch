From 4f4922ed2ac38c0a289c9081581fb3e2412ce5d1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 7 May 2022 01:51:52 +0200
Subject: [PATCH 7/8] winex11.drv: Listen to RawKey* events in the desktop
 thread.

This adds keyboard input support while Wine windows are in background,
so the events can be translated to raw input messages as on Windows,
which are required to keep dinput8 keyboard state up-to-date when
Alt+Tab is used to switch to a non-Wine window.
---
 dlls/winex11.drv/keyboard.c    | 50 ++++++++++++++++++++++++++++++++++
 dlls/winex11.drv/mouse.c       | 15 ++++++++++
 dlls/winex11.drv/x11drv.h      |  1 +
 dlls/winex11.drv/x11drv_main.c |  2 +-
 4 files changed, 67 insertions(+), 1 deletion(-)

diff --git a/dlls/winex11.drv/keyboard.c b/dlls/winex11.drv/keyboard.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/keyboard.c
+++ b/dlls/winex11.drv/keyboard.c
@@ -37,6 +37,9 @@
 #ifdef HAVE_X11_XKBLIB_H
 #include <X11/XKBlib.h>
 #endif
+#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
+#include <X11/extensions/XInput2.h>
+#endif
 
 #include <ctype.h>
 #include <stdarg.h>
@@ -1422,6 +1425,53 @@ BOOL X11DRV_KeyEvent( HWND hwnd, XEvent *xev )
     return TRUE;
 }
 
+
+#ifdef HAVE_X11_EXTENSIONS_XINPUT2_H
+/***********************************************************************
+ *           X11DRV_KeyEvent
+ *
+ * Handle a raw XInput2 key event for background windows
+ */
+BOOL X11DRV_RawKeyEvent( XGenericEventCookie *cookie )
+{
+    XIRawEvent *event = cookie->data;
+    DWORD flags;
+    WORD vkey, scan;
+    RAWINPUT rawinput;
+    INPUT input;
+
+    vkey = keyc2vkey[event->detail];
+    scan = keyc2scan[event->detail];
+
+    flags = 0;
+    if ( event->evtype == XI_RawKeyRelease ) flags |= KEYEVENTF_KEYUP;
+    if ( vkey & 0x100 ) flags |= KEYEVENTF_EXTENDEDKEY;
+
+    TRACE_(key)( "vkey=%04x scan=%04x flags=%04x\n", vkey, scan, flags );
+
+    rawinput.header.dwType = RIM_TYPEKEYBOARD;
+    rawinput.header.dwSize = offsetof(RAWINPUT, data) + sizeof(RAWKEYBOARD);
+    rawinput.header.hDevice = ULongToHandle(2); /* WINE_KEYBOARD_HANDLE */
+    rawinput.header.wParam = RIM_INPUT;
+
+    rawinput.data.keyboard.MakeCode = scan & 0xff;
+    rawinput.data.keyboard.Flags = flags;
+    rawinput.data.keyboard.Reserved = 0;
+    rawinput.data.keyboard.VKey = vkey & 0xff;
+    rawinput.data.keyboard.Message = 0;
+    rawinput.data.keyboard.ExtraInformation = 0;
+
+    input.type = INPUT_HARDWARE;
+    input.u.hi.uMsg = WM_INPUT;
+    input.u.hi.wParamH = 0;
+    input.u.hi.wParamL = 0;
+    __wine_send_input( 0, &input, &rawinput );
+
+    return TRUE;
+}
+#endif
+
+
 /**********************************************************************
  *		X11DRV_KEYBOARD_DetectLayout
  *
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -412,6 +412,18 @@ void X11DRV_XInput2_Enable( Display *display, Window window, long event_mask )
         XISetMask( mask_bits, XI_DeviceChanged );
         XISetMask( mask_bits, raw ? XI_RawButtonRelease : XI_ButtonRelease );
     }
+    if (event_mask & KeyPressMask)
+    {
+        event_mask &= ~ButtonPressMask;
+        XISetMask( mask_bits, XI_DeviceChanged );
+        XISetMask( mask_bits, raw ? XI_RawKeyPress : XI_KeyPress );
+    }
+    if (event_mask & KeyReleaseMask)
+    {
+        event_mask &= ~ButtonReleaseMask;
+        XISetMask( mask_bits, XI_DeviceChanged );
+        XISetMask( mask_bits, raw ? XI_RawKeyRelease : XI_KeyRelease );
+    }
     if ((event_mask & FocusChangeMask))
     {
         event_mask &= ~FocusChangeMask;
@@ -2138,6 +2150,9 @@ BOOL X11DRV_GenericEvent( HWND hwnd, XEvent *xev )
     case XI_ButtonPress:
     case XI_ButtonRelease:
         return X11DRV_XIDeviceEvent( event->data );
+    case XI_RawKeyPress:
+    case XI_RawKeyRelease:
+        return X11DRV_RawKeyEvent( event );
 
     default:
         TRACE( "Unhandled event %#x\n", event->evtype );
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -570,6 +570,7 @@ extern BOOL X11DRV_ButtonRelease( HWND hwnd, XEvent *event ) DECLSPEC_HIDDEN;
 extern BOOL X11DRV_MotionNotify( HWND hwnd, XEvent *event ) DECLSPEC_HIDDEN;
 extern BOOL X11DRV_EnterNotify( HWND hwnd, XEvent *event ) DECLSPEC_HIDDEN;
 extern BOOL X11DRV_KeyEvent( HWND hwnd, XEvent *event ) DECLSPEC_HIDDEN;
+extern BOOL X11DRV_RawKeyEvent( XGenericEventCookie *cookie ) DECLSPEC_HIDDEN;
 extern BOOL X11DRV_KeymapNotify( HWND hwnd, XEvent *event ) DECLSPEC_HIDDEN;
 extern BOOL X11DRV_DestroyNotify( HWND hwnd, XEvent *event ) DECLSPEC_HIDDEN;
 extern BOOL X11DRV_SelectionRequest( HWND hWnd, XEvent *event ) DECLSPEC_HIDDEN;
diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -986,7 +986,7 @@ struct x11drv_thread_data *x11drv_init_thread_data(void)
 
     X11DRV_XInput2_Init();
     if (NtUserGetWindowThread( NtUserGetDesktopWindow(), NULL ) == GetCurrentThreadId())
-        X11DRV_XInput2_Enable( data->display, None, PointerMotionMask|ButtonPressMask|ButtonReleaseMask );
+        X11DRV_XInput2_Enable( data->display, None, PointerMotionMask|ButtonPressMask|ButtonReleaseMask|KeyPressMask|KeyReleaseMask );
 
     return data;
 }
-- 
2.36.1

