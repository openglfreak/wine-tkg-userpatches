From 7dd5221d0a9fb2e98d078a94e65ce2facbc673a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 29 Apr 2022 00:26:40 +0200
Subject: [PATCH 2/8] winex11.drv: Pass XEvent instead of XClientMessageEvent
 to handlers.

This is to avoid a dubious cast from XClientMessageEvent to XEvent in
next patch.
---
 dlls/winex11.drv/event.c | 30 +++++++++++++++++++-----------
 1 file changed, 19 insertions(+), 11 deletions(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -740,8 +740,10 @@ static void set_focus( Display *display, Window window, HWND hwnd, Time time, BO
 /**********************************************************************
  *              handle_manager_message
  */
-static void handle_manager_message( HWND hwnd, XClientMessageEvent *event )
+static void handle_manager_message( HWND hwnd, XEvent *xev )
 {
+    XClientMessageEvent *event = &xev->xclient;
+
     if (hwnd != NtUserGetDesktopWindow()) return;
 
     if (systray_atom && event->data.l[1] == systray_atom)
@@ -759,8 +761,9 @@ static void handle_manager_message( HWND hwnd, XClientMessageEvent *event )
 /**********************************************************************
  *              handle_wm_protocols
  */
-static void handle_wm_protocols( HWND hwnd, XClientMessageEvent *event )
+static void handle_wm_protocols( HWND hwnd, XEvent *xev )
 {
+    XClientMessageEvent *event = &xev->xclient;
     Atom protocol = (Atom)event->data.l[0];
     Time event_time = (Time)event->data.l[1];
 
@@ -1858,8 +1861,9 @@ static void EVENT_DropURLs( HWND hWnd, XClientMessageEvent *event )
 /**********************************************************************
  *              handle_xembed_protocol
  */
-static void handle_xembed_protocol( HWND hwnd, XClientMessageEvent *event )
+static void handle_xembed_protocol( HWND hwnd, XEvent *xev )
 {
+    XClientMessageEvent *event = &xev->xclient;
     Time time = event->data.l[0];
 
     switch (event->data.l[1])
@@ -1916,8 +1920,9 @@ static void handle_xembed_protocol( HWND hwnd, XClientMessageEvent *event )
 /**********************************************************************
  *              handle_dnd_protocol
  */
-static void handle_dnd_protocol( HWND hwnd, XClientMessageEvent *event )
+static void handle_dnd_protocol( HWND hwnd, XEvent *xev )
 {
+    XClientMessageEvent *event = &xev->xclient;
     Window root, child;
     int root_x, root_y, child_x, child_y;
     unsigned int u;
@@ -1939,8 +1944,9 @@ static void handle_dnd_protocol( HWND hwnd, XClientMessageEvent *event )
  *
  * Handle an XdndEnter event.
  */
-static void handle_xdnd_enter_event( HWND hWnd, XClientMessageEvent *event )
+static void handle_xdnd_enter_event( HWND hWnd, XEvent *xev )
 {
+    XClientMessageEvent *event = &xev->xclient;
     struct format_entry *data;
     unsigned long count = 0;
     Atom *xdndtypes;
@@ -2043,8 +2049,9 @@ static long drop_effect_to_xdnd_action( DWORD effect )
 }
 
 
-static void handle_xdnd_position_event( HWND hwnd, XClientMessageEvent *event )
+static void handle_xdnd_position_event( HWND hwnd, XEvent *xev )
 {
+    XClientMessageEvent *event = &xev->xclient;
     struct dnd_position_event_params params;
     XClientMessageEvent e;
     DWORD effect;
@@ -2076,8 +2083,9 @@ static void handle_xdnd_position_event( HWND hwnd, XClientMessageEvent *event )
 }
 
 
-static void handle_xdnd_drop_event( HWND hwnd, XClientMessageEvent *event )
+static void handle_xdnd_drop_event( HWND hwnd, XEvent *xev )
 {
+    XClientMessageEvent *event = &xev->xclient;
     XClientMessageEvent e;
     DWORD effect;
 
@@ -2097,7 +2105,7 @@ static void handle_xdnd_drop_event( HWND hwnd, XClientMessageEvent *event )
 }
 
 
-static void handle_xdnd_leave_event( HWND hwnd, XClientMessageEvent *event )
+static void handle_xdnd_leave_event( HWND hwnd, XEvent *xev )
 {
     x11drv_client_call( client_dnd_leave_event, 0 );
 }
@@ -2105,8 +2113,8 @@ static void handle_xdnd_leave_event( HWND hwnd, XClientMessageEvent *event )
 
 struct client_message_handler
 {
-    int    atom;                                  /* protocol atom */
-    void (*handler)(HWND, XClientMessageEvent *); /* corresponding handler function */
+    int    atom;                     /* protocol atom */
+    void (*handler)(HWND, XEvent *); /* corresponding handler function */
 };
 
 static const struct client_message_handler client_messages[] =
@@ -2142,7 +2150,7 @@ static BOOL X11DRV_ClientMessage( HWND hwnd, XEvent *xev )
     {
         if (event->message_type == X11DRV_Atoms[client_messages[i].atom - FIRST_XATOM])
         {
-            client_messages[i].handler( hwnd, event );
+            client_messages[i].handler( hwnd, xev );
             return TRUE;
         }
     }
-- 
2.37.1

