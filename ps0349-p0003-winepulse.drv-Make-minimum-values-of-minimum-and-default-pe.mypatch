From 66e92ef78ddd98ef281bf9ac37e2683d713a8181 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 6 Mar 2021 01:26:06 +0100
Subject: [PATCH 3/9] winepulse.drv: Make minimum values of minimum and default
 period configurable per registry.

Signed-off-by: Torge Matthies <openglfreak@googlemail.com>
---
 dlls/winepulse.drv/mmdevdrv.c | 45 +++++++++++++++++++++++++++++++----
 1 file changed, 41 insertions(+), 4 deletions(-)

diff --git a/dlls/winepulse.drv/mmdevdrv.c b/dlls/winepulse.drv/mmdevdrv.c
index 8e2afcd3fbe..cd96dbe9e51 100644
--- a/dlls/winepulse.drv/mmdevdrv.c
+++ b/dlls/winepulse.drv/mmdevdrv.c
@@ -101,6 +101,9 @@ static const WCHAR drv_key_devicesW[] = {'S','o','f','t','w','a','r','e','\\',
     'W','i','n','e','\\','D','r','i','v','e','r','s','\\',
     'w','i','n','e','p','u','l','s','e','.','d','r','v','\\','d','e','v','i','c','e','s',0};
 static const WCHAR guidW[] = {'g','u','i','d',0};
+static const WCHAR drv_key_settingsW[] = {'S','o','f','t','w','a','r','e','\\',
+    'W','i','n','e','\\','D','r','i','v','e','r','s','\\',
+    'w','i','n','e','p','u','l','s','e','.','d','r','v','\\','s','e','t','t','i','n','g','s',0};
 
 static GUID pulse_render_guid =
 { 0xfd47d9cc, 0x4218, 0x4135, { 0x9c, 0xe2, 0x0c, 0x19, 0x5c, 0x87, 0x40, 0x5b } };
@@ -484,11 +487,15 @@ static void convert_channel_map(const pa_channel_map *pa_map, WAVEFORMATEXTENSIB
 }
 
 static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, WAVEFORMATEXTENSIBLE *fmt) {
+    static const WCHAR min_minimum_period_keyW[] = {'M','i','n','M','i','n','P','e','r','i','o','d',0};
+    static const WCHAR min_default_period_keyW[] = {'M','i','n','D','e','f','P','e','r','i','o','d',0};
     WAVEFORMATEX *wfx = &fmt->Format;
     pa_stream *stream;
     pa_channel_map map;
     pa_sample_spec ss;
     pa_buffer_attr attr;
+    REFERENCE_TIME min_minimum_period = MinimumPeriod, min_default_period = DefaultPeriod;
+    HKEY key;
     int ret;
     unsigned int length = 0;
 
@@ -536,11 +543,41 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
     if (length)
         pulse_def_period[!render] = pulse_min_period[!render] = pa_bytes_to_usec(10 * length, &ss);
 
-    if (pulse_min_period[!render] < MinimumPeriod)
-        pulse_min_period[!render] = MinimumPeriod;
+    if (RegCreateKeyExW(HKEY_CURRENT_USER, drv_key_settingsW, 0, NULL, 0,
+            KEY_READ, NULL, &key, NULL) != ERROR_SUCCESS)
+        ERR("Failed to open registry key %s\n", debugstr_w(drv_key_settingsW));
+    else{
+        DWORD64 data = 0;
+        DWORD type = 0, size = sizeof(data);
+        if (RegQueryValueExW(key, min_minimum_period_keyW, 0, &type, (BYTE *)&data,
+            &size) == ERROR_SUCCESS){
+            if (type == REG_DWORD && size == sizeof(DWORD))
+                min_minimum_period = (INT)*(DWORD*)&data;
+            if (type == REG_QWORD && size == sizeof(DWORD64))
+                min_minimum_period = (INT64)data;
+            else
+                ERR("Invalid type %u for setting %s, ignoring\n",
+                    type, wine_dbgstr_w(min_minimum_period_keyW));
+        }
+        size = sizeof(data);
+        if (RegQueryValueExW(key, min_default_period_keyW, 0, &type, (BYTE *)&data,
+            &size) == ERROR_SUCCESS){
+            if (type == REG_DWORD && size == sizeof(DWORD))
+                min_default_period = (INT)*(DWORD*)&data;
+            if (type == REG_QWORD && size == sizeof(DWORD64))
+                min_default_period = (INT64)data;
+            else
+                ERR("Invalid type %u for setting %s, ignoring\n",
+                    type, wine_dbgstr_w(min_default_period_keyW));
+        }
+        RegCloseKey(key);
+    }
+
+    if (pulse_min_period[!render] < min_minimum_period)
+        pulse_min_period[!render] = min_minimum_period;
 
-    if (pulse_def_period[!render] < DefaultPeriod)
-        pulse_def_period[!render] = DefaultPeriod;
+    if (pulse_def_period[!render] < min_default_period)
+        pulse_def_period[!render] = min_default_period;
 
     wfx->wFormatTag = WAVE_FORMAT_EXTENSIBLE;
     wfx->cbSize = sizeof(WAVEFORMATEXTENSIBLE) - sizeof(WAVEFORMATEX);
-- 
2.30.1

