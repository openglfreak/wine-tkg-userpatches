From 9f95bd3a33587ef79d79fe13993c1344ba0c1ef8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 28 Feb 2022 16:55:58 +0100
Subject: [PATCH 07/20] winegstreamer: Add timestamp and duration to struct
 wg_sample.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=45988
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47084
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49715
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52183
CW-Bug-Id: #16839
CW-Bug-Id: #18678
CW-Bug-Id: #19362
---
 dlls/winegstreamer/mfplat.c       | 10 ++++++++++
 dlls/winegstreamer/unixlib.h      |  4 ++++
 dlls/winegstreamer/wg_transform.c | 18 ++++++++++++++++++
 3 files changed, 32 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -923,6 +923,11 @@ HRESULT mf_create_wg_sample(IMFSample *sample, struct wg_sample **out)
     if (FAILED(hr = IMFMediaBuffer_Lock(mf_sample->media_buffer, &buffer, &max_length, &current_length)))
         goto out;
 
+    if (SUCCEEDED(IMFSample_GetSampleTime(sample, &mf_sample->wg_sample.timestamp)))
+        mf_sample->wg_sample.flags |= WG_SAMPLE_FLAG_HAS_TIMESTAMP;
+    if (SUCCEEDED(IMFSample_GetSampleDuration(sample, &mf_sample->wg_sample.duration)))
+        mf_sample->wg_sample.flags |= WG_SAMPLE_FLAG_HAS_DURATION;
+
     IMFSample_AddRef((mf_sample->sample = sample));
     mf_sample->wg_sample.data = buffer;
     mf_sample->wg_sample.size = current_length;
@@ -947,6 +952,11 @@ void mf_destroy_wg_sample(struct wg_sample *wg_sample)
     IMFMediaBuffer_SetCurrentLength(mf_sample->media_buffer, wg_sample->size);
     IMFMediaBuffer_Release(mf_sample->media_buffer);
 
+    if (wg_sample->flags & WG_SAMPLE_FLAG_HAS_TIMESTAMP)
+        IMFSample_SetSampleTime(mf_sample->sample, wg_sample->timestamp);
+    if (wg_sample->flags & WG_SAMPLE_FLAG_HAS_DURATION)
+        IMFSample_SetSampleDuration(mf_sample->sample, wg_sample->duration);
+
     IMFSample_Release(mf_sample->sample);
     free(mf_sample);
 }
diff --git a/dlls/winegstreamer/unixlib.h b/dlls/winegstreamer/unixlib.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/unixlib.h
+++ b/dlls/winegstreamer/unixlib.h
@@ -115,11 +115,15 @@ struct wg_format
 enum wg_sample_flag
 {
     WG_SAMPLE_FLAG_INCOMPLETE = 1,
+    WG_SAMPLE_FLAG_HAS_TIMESTAMP = 2,
+    WG_SAMPLE_FLAG_HAS_DURATION = 4,
 };
 
 struct wg_sample
 {
     struct wg_format format;
+    /* timestamp and duration are in 100-nanosecond units. */
+    LONGLONG timestamp, duration;
     UINT32 flags;
     UINT32 max_size;
     UINT32 size;
diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -270,6 +270,9 @@ NTSTATUS wg_transform_create(void *args)
              * to match its expectations.
              */
             transform->input_max_length = 16;
+            if (!(element = create_element("h264parse", "base"))
+                    || !transform_append_element(transform, element, &first, &last))
+                goto out;
             /* fallthrough */
         case WG_MAJOR_TYPE_WMA:
             if (!(element = transform_find_element(GST_ELEMENT_FACTORY_TYPE_DECODER, src_caps, raw_caps))
@@ -413,6 +416,10 @@ NTSTATUS wg_transform_push_data(void *args)
         return STATUS_NO_MEMORY;
     }
     gst_buffer_fill(buffer, 0, sample->data, sample->size);
+    if (sample->flags & WG_SAMPLE_FLAG_HAS_TIMESTAMP)
+        GST_BUFFER_PTS(buffer) = sample->timestamp * 100;
+    if (sample->flags & WG_SAMPLE_FLAG_HAS_DURATION)
+        GST_BUFFER_DURATION(buffer) = sample->duration * 100;
     gst_buffer_list_insert(transform->input, -1, buffer);
 
     GST_INFO("Copied %u bytes from sample %p to input buffer list", sample->size, sample);
@@ -444,6 +451,17 @@ static NTSTATUS read_transform_output_data(struct wg_transform *transform,
     gst_buffer_unmap(buffer, &info);
     gst_buffer_resize(buffer, sample->size, -1);
 
+    if (GST_BUFFER_PTS_IS_VALID(buffer))
+    {
+        sample->flags |= WG_SAMPLE_FLAG_HAS_TIMESTAMP;
+        sample->timestamp = GST_BUFFER_PTS(buffer) / 100;
+    }
+    if (GST_BUFFER_DURATION_IS_VALID(buffer))
+    {
+        sample->flags |= WG_SAMPLE_FLAG_HAS_DURATION;
+        sample->duration = GST_BUFFER_DURATION(buffer) / 100;
+    }
+
     if (info.size <= sample->size)
     {
         gst_buffer_unref(transform->output);
-- 
2.35.1

