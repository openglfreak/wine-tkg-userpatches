From 58a1d9ccabf67f394b8ef05e71e287789f99cf26 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 16 Jan 2020 17:51:48 +0100
Subject: [PATCH 09/12] winex11.drv: Call __wine_set_foreground_window on focus
 events.

This also instroduces a new internal __wine_set_foreground_window user32
export that takes a timestamp parameter.

This fixes the broken tests, because the WM_TAKE_FOCUS messages have
a timestamp, but it will not work when the take_focus mode is not used.

Standard focus events do not have a timestamp so we will have to use
XInput2 focus events to support this case.
---
 dlls/win32u/input.c      | 16 ++++++++++++++++
 dlls/win32u/win32u.spec  |  1 +
 dlls/winex11.drv/event.c |  6 +++---
 include/winuser.h        |  1 +
 4 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -348,6 +348,22 @@ HWND WINAPI SetFocus( HWND hwnd )
 }
 
 
+/*******************************************************************
+ *      __wine_set_foreground_window  (USER32.@)
+ *
+ * Internal SetForegroundWindow function to let the graphics driver
+ * update the foreground window.
+ */
+BOOL CDECL __wine_set_foreground_window( HWND hwnd, DWORD time )
+{
+    TRACE( "%p\n", hwnd );
+
+    hwnd = get_full_window_handle( hwnd );
+
+    return set_foreground_window( hwnd, FALSE, time );
+}
+
+
 /*******************************************************************
  *		SetForegroundWindow  (USER32.@)
  */
diff --git a/dlls/user32/user32.spec b/dlls/user32/user32.spec
index 11111111111..11111111111 100644
--- a/dlls/win32u/win32u.spec
+++ b/dlls/win32u/win32u.spec
@@ -839,6 +839,7 @@
 @ stdcall SetDCHook(long ptr long)
 @ stdcall SetHookFlags(long long)
 @ cdecl __wine_set_visible_region(long long ptr ptr ptr)
+@ cdecl __wine_set_foreground_window(long long)
 
 # Graphics drivers
 @ cdecl __wine_set_display_driver(ptr long)
diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -604,7 +604,7 @@ static void set_focus( XEvent *xev, HWND hwnd, Time time )
     x11drv_thread_data()->active_window = hwnd;
 
     TRACE( "setting foreground window to %p\n", hwnd );
-    SetForegroundWindow( hwnd );
+    __wine_set_foreground_window( hwnd, EVENT_x11_time_to_win32_time( time ) );
 
     /* Some applications expect that a being deactivated topmost window
      * receives the WM_WINDOWPOSCHANGING/WM_WINDOWPOSCHANGED messages,
@@ -833,7 +833,7 @@ static BOOL X11DRV_FocusIn( HWND hwnd, XEvent *xev )
         set_focus( xev, GetForegroundWindow(), CurrentTime );
     else if (!can_activate_window(hwnd))
         try_focus_another_window( xev, CurrentTime );
-    else SetForegroundWindow( hwnd );
+    else __wine_set_foreground_window( hwnd, GetTickCount() );
     return TRUE;
 }
 
@@ -887,7 +887,7 @@ static void focus_out( Display *display , HWND hwnd )
         if (hwnd == GetForegroundWindow())
         {
             TRACE( "lost focus, setting fg to desktop\n" );
-            SetForegroundWindow( GetDesktopWindow() );
+            __wine_set_foreground_window( GetDesktopWindow(), GetTickCount() );
         }
     }
  }
diff --git a/include/winuser.h b/include/winuser.h
index 11111111111..11111111111 100644
--- a/include/winuser.h
+++ b/include/winuser.h
@@ -4434,6 +4434,7 @@ WORD        WINAPI SYSTEM_KillSystemTimer( WORD );
 
 #ifdef __WINESRC__
 WINUSERAPI BOOL CDECL __wine_send_input( HWND hwnd, const INPUT *input, const RAWINPUT *rawinput );
+WINUSERAPI BOOL CDECL __wine_set_foreground_window( HWND hwnd, DWORD time );
 
 /* Uxtheme hook functions and struct */
 
diff --git a/dlls/win32u/gdiobj.c b/dlls/win32u/gdiobj.c
index 2af3b9529d5..c28523d2e68 100644
--- a/dlls/win32u/gdiobj.c
+++ b/dlls/win32u/gdiobj.c
@@ -1216,6 +1216,7 @@ static struct unix_funcs unix_funcs =
     __wine_get_wgl_driver,
     __wine_set_display_driver,
     __wine_set_visible_region,
+    __wine_set_foreground_window,
 };
 
 NTSTATUS gdi_init(void)
diff --git a/dlls/win32u/win32u_private.h b/dlls/win32u/win32u_private.h
index 8b896d62fa1..94282648b47 100644
--- a/dlls/win32u/win32u_private.h
+++ b/dlls/win32u/win32u_private.h
@@ -272,6 +272,7 @@ struct unix_funcs
     void (CDECL *set_display_driver)( struct user_driver_funcs *funcs, UINT version );
     void (CDECL *set_visible_region)( HDC hdc, HRGN hrgn, const RECT *vis_rect, const RECT *device_rect,
                                       struct window_surface *surface );
+    BOOL (CDECL *set_foreground_window)( HWND hwnd, DWORD time );
 };
 
 /* cursoricon.c */
diff --git a/dlls/win32u/wrappers.c b/dlls/win32u/wrappers.c
index fd96bbce5d7..70e2f76b539 100644
--- a/dlls/win32u/wrappers.c
+++ b/dlls/win32u/wrappers.c
@@ -1080,6 +1080,12 @@ void CDECL __wine_set_visible_region( HDC hdc, HRGN hrgn, const RECT *vis_rect,
     unix_funcs->set_visible_region( hdc, hrgn, vis_rect, device_rect, surface );
 }
 
+BOOL CDECL __wine_set_foreground_window( HWND hwnd, DWORD time )
+{
+    if (!unix_funcs) return;
+    unix_funcs->set_foreground_window( hwnd, time );
+}
+
 BOOL CDECL __wine_get_brush_bitmap_info( HBRUSH handle, BITMAPINFO *info, void *bits, UINT *usage )
 {
     if (!unix_funcs) return FALSE;
-- 
2.35.1

