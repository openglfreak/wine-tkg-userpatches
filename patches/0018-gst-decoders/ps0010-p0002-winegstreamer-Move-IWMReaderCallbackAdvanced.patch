From 056d8e11480080a754d88218d9ef9c30bff19a6c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 6 Jul 2022 18:35:58 +0200
Subject: [PATCH 2/3] winegstreamer: Move IWMReaderCallbackAdvanced
 *callback_advanced to a local variable.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: RÃ©mi Bernon <rbernon@codeweavers.com>
---
 dlls/winegstreamer/wm_asyncreader.c | 19 ++++++++++++++-----
 1 file changed, 14 insertions(+), 5 deletions(-)

diff --git a/dlls/winegstreamer/wm_asyncreader.c b/dlls/winegstreamer/wm_asyncreader.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wm_asyncreader.c
+++ b/dlls/winegstreamer/wm_asyncreader.c
@@ -73,6 +73,7 @@ static DWORD WINAPI stream_thread(void *arg)
 {
     struct async_reader *reader = arg;
     IWMReaderCallback *callback = reader->callback;
+    IWMReaderCallbackAdvanced *callback_advanced;
     REFERENCE_TIME start_time;
     struct wm_stream *stream;
     static const DWORD zero;
@@ -86,6 +87,11 @@ static DWORD WINAPI stream_thread(void *arg)
 
     EnterCriticalSection(&reader->stream_cs);
 
+    if (FAILED(hr = IWMReaderCallback_QueryInterface(callback,
+            &IID_IWMReaderCallbackAdvanced, (void **)&callback_advanced)))
+        callback_advanced = NULL;
+    TRACE("Querying for IWMReaderCallbackAdvanced returned %#lx.\n", hr);
+
     while (reader->running)
     {
         hr = wm_reader_get_stream_sample(&reader->reader, 0, &sample, &pts, &duration, &flags, &stream_number);
@@ -98,10 +104,10 @@ static DWORD WINAPI stream_thread(void *arg)
         {
             QWORD user_time = reader->user_time;
 
-            if (pts > user_time && reader->reader.callback_advanced)
+            if (pts > user_time && callback_advanced)
             {
                 LeaveCriticalSection(&reader->stream_cs);
-                IWMReaderCallbackAdvanced_OnTime(reader->reader.callback_advanced, user_time, reader->context);
+                IWMReaderCallbackAdvanced_OnTime(callback_advanced, user_time, reader->context);
                 EnterCriticalSection(&reader->stream_cs);
             }
 
@@ -126,7 +132,7 @@ static DWORD WINAPI stream_thread(void *arg)
         {
             LeaveCriticalSection(&reader->stream_cs);
             if (stream->read_compressed)
-                hr = IWMReaderCallbackAdvanced_OnStreamSample(reader->reader.callback_advanced,
+                hr = IWMReaderCallbackAdvanced_OnStreamSample(callback_advanced,
                         stream_number, pts, duration, flags, sample, reader->context);
             else
                 hr = IWMReaderCallback_OnSample(callback, stream_number - 1, pts, duration,
@@ -148,12 +154,12 @@ static DWORD WINAPI stream_thread(void *arg)
         IWMReaderCallback_OnStatus(callback, WMT_EOF, S_OK,
                 WMT_TYPE_DWORD, (BYTE *)&zero, reader->context);
 
-        if (reader->user_clock && reader->reader.callback_advanced)
+        if (reader->user_clock && callback_advanced)
         {
             /* We can only get here if user_time is greater than the PTS
              * of all samples, in which case we cannot have sent this
              * notification already. */
-            IWMReaderCallbackAdvanced_OnTime(reader->reader.callback_advanced,
+            IWMReaderCallbackAdvanced_OnTime(callback_advanced,
                     reader->user_time, reader->context);
         }
 
@@ -164,6 +170,9 @@ static DWORD WINAPI stream_thread(void *arg)
         ERR("Failed to get sample, hr %#lx.\n", hr);
     }
 
+    if (callback_advanced)
+        IWMReaderCallbackAdvanced_Release(callback_advanced);
+
     TRACE("Reader is stopping; exiting.\n");
     return 0;
 }


