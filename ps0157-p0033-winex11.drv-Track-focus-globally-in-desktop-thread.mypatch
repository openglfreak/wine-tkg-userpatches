From 7a3626f6b3a5f7259565e8d5b84a950d1d1d2242 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 16 Jan 2020 12:30:17 +0100
Subject: [PATCH 33/37] winex11.drv: Track focus globally, in desktop thread.

This lets us track if a Wine window has input focus, without relying on
their message processing loop. Some applications do not process their
messages for a while and it makes Wine focus state unreliable.
---
 dlls/winex11.drv/event.c  | 71 +++++++++++++++++++++++++++++++++++++++
 dlls/winex11.drv/window.c |  5 +++
 2 files changed, 76 insertions(+)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 7df0e6078e8..87dce4255fe 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -584,6 +584,60 @@ static inline BOOL can_activate_window( HWND hwnd )
 }
 
 
+static int x11drv_get_active_window_error( Display *dpy, XErrorEvent *event, void *arg )
+{
+    return 1;
+}
+
+
+/***********************************************************************
+ *      x11drv_get_active_window
+ */
+static HWND x11drv_get_active_window( Display *display, Window root, BOOL *is_foreign )
+{
+    struct x11drv_thread_data *data = x11drv_thread_data();
+    unsigned long count, remaining;
+    Window *active;
+    HWND *active_hwnd, hwnd = NULL;
+    Atom type;
+    int format;
+
+    *is_foreign = FALSE;
+    if (!data->ewmh.has__net_active_window) return NULL;
+
+    X11DRV_expect_error( display, x11drv_get_active_window_error, NULL );
+    XGetWindowProperty( display, root, x11drv_atom(_NET_ACTIVE_WINDOW),
+                        0, ~0UL, False, XA_WINDOW,
+                        &type, &format, &count, &remaining,
+                        (unsigned char **)&active);
+
+    if (X11DRV_check_error()) return NULL;
+    if (!active || !*active)
+    {
+        /* no X11 active window -yet- let's pretend we are still active */
+        if (active) XFree(active);
+        return GetForegroundWindow();
+    }
+
+    X11DRV_expect_error( display, x11drv_get_active_window_error, NULL );
+    XGetWindowProperty( display, *active, x11drv_atom(_WINE_HWND),
+                        0, ~0UL, False, XA_CARDINAL,
+                        &type, &format, &count, &remaining,
+                        (unsigned char **)&active_hwnd);
+    XFree(active);
+
+    if (X11DRV_check_error()) return NULL;
+    if (!active_hwnd) *is_foreign = TRUE;
+    else
+    {
+        hwnd = *active_hwnd;
+        XFree(active_hwnd);
+    }
+
+    return hwnd;
+}
+
+
 /**********************************************************************
  *              set_input_focus
  *
@@ -1379,6 +1433,23 @@ done:
 static BOOL X11DRV_PropertyNotify( HWND hwnd, XEvent *xev )
 {
     XPropertyEvent *event = &xev->xproperty;
+    DWORD time = EVENT_x11_time_to_win32_time( event->time );
+    HWND active_window;
+    BOOL foreign;
+
+    if (event->atom == x11drv_atom(_NET_ACTIVE_WINDOW))
+    {
+        /* virtual desktop uses focus events to track global focus instead */
+        if (is_virtual_desktop() || GetWindowThreadProcessId( GetDesktopWindow(), NULL ) != GetCurrentThreadId())
+            return FALSE;
+
+        if (!(active_window = x11drv_get_active_window( event->display, event->window, &foreign )) && foreign)
+            __wine_set_foreground_window( GetDesktopWindow(), time );
+        else
+            __wine_set_foreground_window( active_window, time );
+
+        return FALSE;
+    }
 
     if (!hwnd) return FALSE;
     if (event->atom == x11drv_atom(WM_STATE)) handle_wm_state_notify( hwnd, event, TRUE );
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index fc16fa12769..dd1041508ad 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1869,6 +1869,11 @@ BOOL CDECL X11DRV_CreateWindow( HWND hwnd )
         struct x11drv_thread_data *data = x11drv_init_thread_data();
         XSetWindowAttributes attr;
 
+        if (data->ewmh.has__net_active_window)
+            XSelectInput( data->display, DefaultRootWindow( data->display ), PropertyChangeMask );
+        else if (!is_virtual_desktop())
+            ERR("_NET_ACTIVE_WINDOW is not supported, and virtual desktop not enabled, unable to track focus globally!\n");
+
         desktop_orig_wndproc = (WNDPROC)SetWindowLongPtrW( hwnd, GWLP_WNDPROC,
                                                            (LONG_PTR)desktop_wndproc_wrapper );
 
-- 
2.31.0

