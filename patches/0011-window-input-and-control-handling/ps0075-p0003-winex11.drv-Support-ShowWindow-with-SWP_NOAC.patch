From e6a895aaaae11dee717fa4446ec55317dffadb77 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 8 Dec 2021 18:56:38 +0100
Subject: [PATCH 3/4] winex11.drv: Support ShowWindow with SWP_NOACTIVATE flag.

This associates a user time with each window instead of a per-process
user time, and uses the EWMH feature where a newly mapped window with a
0 user time should not be initially focused, to implement the flag.

This should help with focus incorrectly restored on invisible windows
that Origin creates and show using ShowWindow with SWP_NOACTIVATE, and
which are then automatically focused after they are mapped.

When closing the game window, focus is restored to the last window that
had it, so the invisible ones. This is particularly visible in FIFA 22
where the launcher isn't focused again after the game window is closed.
---
 dlls/winex11.drv/event.c    |  5 +++-
 dlls/winex11.drv/keyboard.c |  2 +-
 dlls/winex11.drv/mouse.c    |  2 +-
 dlls/winex11.drv/window.c   | 54 +++++++++++++++----------------------
 dlls/winex11.drv/x11drv.h   |  3 ++-
 5 files changed, 30 insertions(+), 36 deletions(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index d0e6c5ea8d3..bb221fffe5a 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -626,7 +626,7 @@ static void handle_wm_protocols( HWND hwnd, XClientMessageEvent *event )
 
     if (protocol == x11drv_atom(WM_DELETE_WINDOW))
     {
-        update_user_time( event_time );
+        update_user_time( event->display, event->window, event_time );
 
         if (hwnd == GetDesktopWindow())
         {
@@ -1332,6 +1332,9 @@ static BOOL X11DRV_PropertyNotify( HWND hwnd, XEvent *xev )
 {
     XPropertyEvent *event = &xev->xproperty;
 
+    /* sync with the X server time */
+    x11drv_time_to_ticks( event->time );
+
     if (!hwnd) return FALSE;
     if (event->atom == x11drv_atom(WM_STATE)) handle_wm_state_notify( hwnd, event, TRUE );
     return TRUE;
diff --git a/dlls/winex11.drv/keyboard.c b/dlls/winex11.drv/keyboard.c
index e70e1254c9e..680141d90c0 100644
--- a/dlls/winex11.drv/keyboard.c
+++ b/dlls/winex11.drv/keyboard.c
@@ -1336,7 +1336,7 @@ BOOL X11DRV_KeyEvent( HWND hwnd, XEvent *xev )
     TRACE_(key)("type %d, window %lx, state 0x%04x, keycode %u\n",
 		event->type, event->window, event->state, event->keycode);
 
-    if (event->type == KeyPress) update_user_time( event->time );
+    if (event->type == KeyPress) update_user_time( event->display, event->window, event->time );
 
     /* Clients should pass only KeyPress events to XmbLookupString */
     if (xic && event->type == KeyPress)
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index e60bb5ba45d..95d1e7eaa68 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -1776,7 +1776,7 @@ BOOL X11DRV_ButtonPress( HWND hwnd, XEvent *xev )
     input.u.mi.time        = x11drv_time_to_ticks( event->time );
     input.u.mi.dwExtraInfo = 0;
 
-    update_user_time( event->time );
+    update_user_time( event->display, event->window, event->time );
     map_event_coords( hwnd, event->window, event->root, event->x_root, event->y_root, &input );
     send_mouse_input( hwnd, event->window, event->state, &input );
     return TRUE;
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 29473ceba06..ac921acae12 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -88,10 +88,6 @@ XContext winContext = 0;
 /* X context to associate a struct x11drv_win_data to an hwnd */
 XContext win_data_context = 0;
 
-/* time of last user event and window where it's stored */
-static Time last_user_time;
-static Window user_time_window;
-
 static const char foreign_window_prop[] = "__wine_x11_foreign_window";
 static const char whole_window_prop[] = "__wine_x11_whole_window";
 static const char clip_window_prop[]  = "__wine_x11_clip_window";
@@ -127,7 +123,7 @@ static void remove_startup_notification(Display *display, Window window)
         return;
     SetEnvironmentVariableA("DESKTOP_STARTUP_ID", NULL);
 
-    if ((src = strstr( id, "_TIME" ))) update_user_time( atol( src + 5 ));
+    if ((src = strstr( id, "_TIME" ))) update_user_time( display, window, atol( src + 5 ));
 
     pos = snprintf(message, sizeof(message), "remove: ID=");
     message[pos++] = '"';
@@ -870,11 +866,6 @@ static void set_initial_wm_hints( Display *display, Window window )
 
     XChangeProperty( display, window, x11drv_atom(XdndAware),
                      XA_ATOM, 32, PropModeReplace, (unsigned char*)&dndVersion, 1 );
-
-    update_user_time( 0 );  /* make sure that the user time window exists */
-    if (user_time_window)
-        XChangeProperty( display, window, x11drv_atom(_NET_WM_USER_TIME_WINDOW),
-                         XA_WINDOW, 32, PropModeReplace, (unsigned char *)&user_time_window, 1 );
 }
 
 
@@ -943,26 +934,10 @@ Window init_clip_window(void)
 /***********************************************************************
  *     update_user_time
  */
-void update_user_time( Time time )
+void update_user_time( Display *display, Window window, Time time )
 {
-    if (!user_time_window)
-    {
-        Window win = XCreateWindow( gdi_display, root_window, -1, -1, 1, 1, 0, CopyFromParent,
-                                    InputOnly, CopyFromParent, 0, NULL );
-        if (InterlockedCompareExchangePointer( (void **)&user_time_window, (void *)win, 0 ))
-            XDestroyWindow( gdi_display, win );
-        TRACE( "user time window %lx\n", user_time_window );
-    }
-
-    if (!time) return;
-    XLockDisplay( gdi_display );
-    if (!last_user_time || (long)(time - last_user_time) > 0)
-    {
-        last_user_time = time;
-        XChangeProperty( gdi_display, user_time_window, x11drv_atom(_NET_WM_USER_TIME),
-                         XA_CARDINAL, 32, PropModeReplace, (unsigned char *)&time, 1 );
-    }
-    XUnlockDisplay( gdi_display );
+    XChangeProperty( display, window, x11drv_atom(_NET_WM_USER_TIME),
+                     XA_CARDINAL, 32, PropModeReplace, (unsigned char *)&time, 1 );
 }
 
 /***********************************************************************
@@ -1108,9 +1083,10 @@ static void set_xembed_flags( struct x11drv_win_data *data, unsigned long flags
 /***********************************************************************
  *     map_window
  */
-static void map_window( HWND hwnd, DWORD new_style )
+static void map_window( HWND hwnd, DWORD new_style, DWORD swp_flags )
 {
     struct x11drv_win_data *data;
+    Time time;
 
     make_owner_managed( hwnd );
     wait_for_withdrawn_state( hwnd, TRUE );
@@ -1128,6 +1104,10 @@ static void map_window( HWND hwnd, DWORD new_style )
         {
             update_net_wm_states( data );
             sync_window_style( data );
+            if (swp_flags & SWP_NOACTIVATE)
+                update_user_time( data->display, data->whole_window, 0 );
+            else if ((time = x11drv_ticks_to_time( GetTickCount() )))
+                update_user_time( data->display, data->whole_window, time );
             XMapWindow( data->display, data->whole_window );
             XFlush( data->display );
             if (data->surface && data->vis.visualid != default_visual.visualid)
@@ -2405,8 +2385,10 @@ void CDECL X11DRV_WindowPosChanged( HWND hwnd, HWND insert_after, UINT swp_flags
     DWORD new_style = GetWindowLongW( hwnd, GWL_STYLE );
     RECT old_window_rect, old_whole_rect, old_client_rect;
     int event_type;
+    Time time;
 
     if (!(data = get_win_data( hwnd ))) return;
+    data->swp_flags = swp_flags;
 
     thread_data = x11drv_thread_data();
 
@@ -2519,7 +2501,7 @@ void CDECL X11DRV_WindowPosChanged( HWND hwnd, HWND insert_after, UINT swp_flags
                 needs_map = data->layered || IsRectEmpty( rectWindow );
             release_win_data( data );
             if (needs_icon) fetch_icon_data( hwnd, 0, 0 );
-            if (needs_map) map_window( hwnd, new_style );
+            if (needs_map) map_window( hwnd, new_style, swp_flags );
             return;
         }
         else if ((swp_flags & SWP_STATECHANGED) && (!data->iconic != !(new_style & WS_MINIMIZE)))
@@ -2530,7 +2512,13 @@ void CDECL X11DRV_WindowPosChanged( HWND hwnd, HWND insert_after, UINT swp_flags
             if (data->iconic)
                 XIconifyWindow( data->display, data->whole_window, data->vis.screen );
             else if (is_window_rect_mapped( rectWindow ))
+            {
+                if (swp_flags & SWP_NOACTIVATE)
+                    update_user_time( data->display, data->whole_window, 0 );
+                else if ((time = x11drv_ticks_to_time( GetTickCount() )))
+                    update_user_time( data->display, data->whole_window, time );
                 XMapWindow( data->display, data->whole_window );
+            }
             update_net_wm_states( data );
         }
         else
@@ -2662,6 +2650,7 @@ void CDECL X11DRV_SetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw )
 void CDECL X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWORD flags )
 {
     struct x11drv_win_data *data = get_win_data( hwnd );
+    DWORD swp_flags;
     BOOL need_sync_gl;
 
     if (data)
@@ -2680,8 +2669,9 @@ void CDECL X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alph
             if ((style & WS_VISIBLE) &&
                 ((style & WS_MINIMIZE) || is_window_rect_mapped( &data->window_rect )))
             {
+                swp_flags = data->swp_flags;
                 release_win_data( data );
-                map_window( hwnd, style );
+                map_window( hwnd, style, swp_flags );
                 if (need_sync_gl) sync_gl_drawable( hwnd, FALSE );
                 return;
             }
@@ -3097,7 +3086,7 @@ BOOL CDECL X11DRV_UpdateLayeredWindow( HWND hwnd, const UPDATELAYEREDWINDOWINFO
         DWORD style = GetWindowLongW( hwnd, GWL_STYLE );
 
         if ((style & WS_VISIBLE) && ((style & WS_MINIMIZE) || is_window_rect_mapped( window_rect )))
-            map_window( hwnd, style );
+            map_window( hwnd, style, data->swp_flags );
     }
 
     if (need_sync_gl) sync_gl_drawable( hwnd, FALSE );
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 9a6987015e6..5a82c7e1564 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -626,6 +626,7 @@ struct x11drv_win_data
     BOOL        off_desktop : 1;/* is window on another WM desktop? */
     BOOL        shell_cloak : 1;/* the shell is (un)cloaking the window */
     BOOL        keep_fs_state : 1; /* don't override the window state when restoring from an event, if fullscreen */
+    DWORD       swp_flags;      /* last swp flags used for the window */
     int         wm_state;       /* current value of the WM_STATE property */
     DWORD       net_wm_state;   /* bit mask of active x11drv_net_wm_state values */
     Window      embedder;       /* window id of embedder */
@@ -651,7 +652,7 @@ extern void vulkan_thread_detach(void) DECLSPEC_HIDDEN;
 
 extern void wait_for_withdrawn_state( HWND hwnd, BOOL set ) DECLSPEC_HIDDEN;
 extern Window init_clip_window(void) DECLSPEC_HIDDEN;
-extern void update_user_time( Time time ) DECLSPEC_HIDDEN;
+extern void update_user_time( Display *display, Window window, Time time ) DECLSPEC_HIDDEN;
 extern void read_net_wm_states( Display *display, struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
 extern void update_net_wm_states( struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
 extern void make_window_embedded( struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
-- 
2.34.1

