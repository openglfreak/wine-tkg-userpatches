From 752adaba40a6e49594b4bab0fefe8a00f9e83bee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 7 Jun 2022 09:21:15 +0200
Subject: [PATCH 26/30] winegstreamer: Support zero-copy
 wg_parser_stream_read_data for quartz_parser.

---
 dlls/winegstreamer/gst_private.h   |  2 ++
 dlls/winegstreamer/quartz_parser.c | 22 +++++++++++++---------
 dlls/winegstreamer/wg_sample.c     | 30 ++++++++++++++++++++++++++++++
 3 files changed, 45 insertions(+), 9 deletions(-)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -137,6 +137,8 @@ void wg_sample_queue_end_append(struct wg_sample_queue *queue, struct wg_sample
 
 bool wg_sample_queue_find_mf(struct wg_sample_queue *queue, void *data,
         struct wg_sample **wg_sample, IMFSample **mf_sample);
+bool wg_sample_queue_find_qz(struct wg_sample_queue *queue, void *data,
+        struct wg_sample **wg_sample, IMediaSample **qz_sample);
 
 HRESULT wg_transform_push_mf(struct wg_transform *transform, struct wg_sample *sample,
         struct wg_sample_queue *queue);
diff --git a/dlls/winegstreamer/quartz_parser.c b/dlls/winegstreamer/quartz_parser.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/quartz_parser.c
+++ b/dlls/winegstreamer/quartz_parser.c
@@ -656,6 +656,7 @@ bool amt_to_wg_format(const AM_MEDIA_TYPE *mt, struct wg_format *format)
  * necessary). */
 static void send_buffer(struct parser_source *pin, const struct wg_parser_buffer *buffer)
 {
+    struct parser *filter = impl_from_strmbase_filter(pin->pin.pin.filter);
     bool success, incomplete = true;
     struct wg_sample *wg_sample;
     IMediaSample *sample;
@@ -671,16 +672,19 @@ static void send_buffer(struct parser_source *pin, const struct wg_parser_buffer
 
     while (SUCCEEDED(hr) && incomplete)
     {
-        if (FAILED(hr = IMemAllocator_GetBuffer(pin->pin.pAllocator, &sample, NULL, NULL, 0)))
+        if (!wg_sample_queue_find_qz(filter->wg_sample_queue, buffer->data, &wg_sample, &sample))
         {
-            ERR("Failed to get a sample, hr %#lx.\n", hr);
-            break;
-        }
-        if (FAILED(hr = wg_sample_create_quartz(sample, &wg_sample)))
-        {
-            ERR("Failed to create sample, hr %#lx.\n", hr);
-            IMediaSample_Release(sample);
-            break;
+            if (FAILED(hr = IMemAllocator_GetBuffer(pin->pin.pAllocator, &sample, NULL, NULL, 0)))
+            {
+                ERR("Failed to get a sample, hr %#lx.\n", hr);
+                break;
+            }
+            if (FAILED(hr = wg_sample_create_quartz(sample, &wg_sample)))
+            {
+                ERR("Failed to create sample, hr %#lx.\n", hr);
+                IMediaSample_Release(sample);
+                return;
+            }
         }
 
         if ((success = wg_parser_stream_read_qz(pin->wg_stream, wg_sample)))
diff --git a/dlls/winegstreamer/wg_sample.c b/dlls/winegstreamer/wg_sample.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_sample.c
+++ b/dlls/winegstreamer/wg_sample.c
@@ -591,3 +591,33 @@ bool wg_sample_queue_find_mf(struct wg_sample_queue *queue, void *data,
     LeaveCriticalSection(&queue->cs);
     return !!*wg_sample;
 }
+
+bool wg_sample_queue_find_qz(struct wg_sample_queue *queue, void *data,
+        struct wg_sample **wg_sample, IMediaSample **qz_sample)
+{
+    struct sample *sample, *next;
+
+    *wg_sample = NULL;
+    EnterCriticalSection(&queue->cs);
+
+    LIST_FOR_EACH_ENTRY_SAFE(sample, next, &queue->samples, struct sample, entry)
+    {
+        if (sample->wg_sample.data != data)
+            continue;
+
+        if (sample->ops != &quartz_sample_ops)
+        {
+            WARN_(quartz)("Invalid sample %p ops %p for data %p\n", sample->u.quartz.sample, sample->ops, data);
+            break;
+        }
+
+        TRACE_(quartz)("Found sample %p for data %p\n", sample->u.quartz.sample, data);
+        IMediaSample_AddRef((*qz_sample = sample->u.quartz.sample));
+        *wg_sample = &sample->wg_sample;
+        list_remove(&sample->entry);
+        break;
+    }
+
+    LeaveCriticalSection(&queue->cs);
+    return !!*wg_sample;
+}
-- 
2.37.1

