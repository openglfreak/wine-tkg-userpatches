From 8f13850568defecdb189417f59749993d63c857b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 7 May 2022 13:32:58 +0200
Subject: [PATCH 21/30] winegstreamer: Read media_source stream data using
 wg_sample struct.

---
 dlls/winegstreamer/gst_private.h  |  3 ++
 dlls/winegstreamer/main.c         | 13 ++++++
 dlls/winegstreamer/media_source.c | 66 ++++++-------------------------
 dlls/winegstreamer/unix_private.h |  3 ++
 dlls/winegstreamer/unixlib.h      |  7 ++++
 dlls/winegstreamer/wg_parser.c    | 30 ++++++++++++++
 dlls/winegstreamer/wg_sample.c    | 23 +++++++++++
 dlls/winegstreamer/wg_transform.c |  4 +-
 8 files changed, 93 insertions(+), 56 deletions(-)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -93,6 +93,7 @@ bool wg_parser_stream_get_buffer(struct wg_parser_stream *stream, struct wg_pars
 bool wg_parser_stream_copy_buffer(struct wg_parser_stream *stream,
         void *data, uint32_t offset, uint32_t size);
 void wg_parser_stream_release_buffer(struct wg_parser_stream *stream);
+bool wg_parser_stream_read_data(struct wg_parser_stream *stream, struct wg_sample *sample);
 void wg_parser_stream_notify_qos(struct wg_parser_stream *stream,
         bool underflow, double proportion, int64_t diff, uint64_t timestamp);
 
@@ -145,6 +146,8 @@ HRESULT wg_transform_read_mf(struct wg_transform *transform, struct wg_sample *s
         struct wg_format *format);
 HRESULT wg_transform_read_quartz(struct wg_transform *transform, struct wg_sample *sample);
 
+bool wg_parser_stream_read_mf(struct wg_parser_stream *stream, struct wg_sample *sample);
+
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj);
 
 HRESULT h264_decoder_create(REFIID riid, void **ret);
diff --git a/dlls/winegstreamer/main.c b/dlls/winegstreamer/main.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/main.c
+++ b/dlls/winegstreamer/main.c
@@ -260,6 +260,19 @@ void wg_parser_stream_release_buffer(struct wg_parser_stream *stream)
     __wine_unix_call(unix_handle, unix_wg_parser_stream_release_buffer, stream);
 }
 
+bool wg_parser_stream_read_data(struct wg_parser_stream *stream, struct wg_sample *sample)
+{
+    struct wg_parser_stream_read_data_params params =
+    {
+        .stream = stream,
+        .sample = sample,
+    };
+
+    TRACE("stream %p, sample %p.\n", stream, sample);
+
+    return !__wine_unix_call(unix_handle, unix_wg_parser_stream_read_data, &params);
+}
+
 void wg_parser_stream_notify_qos(struct wg_parser_stream *stream,
         bool underflow, double proportion, int64_t diff, uint64_t timestamp)
 {
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -471,76 +471,34 @@ static HRESULT mf_allocate_sample(UINT32 size, IMFSample **sample)
 
 static void send_buffer(struct media_stream *stream, const struct wg_parser_buffer *wg_buffer, IUnknown *token)
 {
-    IMFMediaBuffer *buffer;
+    struct wg_sample *wg_sample;
     IMFSample *sample;
+    bool success;
     HRESULT hr;
-    BYTE *data;
 
-    if (FAILED(hr = MFCreateSample(&sample)))
+    if (FAILED(hr = mf_allocate_sample(wg_buffer->size, &sample)))
     {
         ERR("Failed to create sample, hr %#lx.\n", hr);
         return;
     }
-
-    if (FAILED(hr = MFCreateMemoryBuffer(wg_buffer->size, &buffer)))
+    if (FAILED(hr = wg_sample_create_mf(sample, &wg_sample)))
     {
-        ERR("Failed to create buffer, hr %#lx.\n", hr);
+        ERR("Failed to create sample, hr %#lx.\n", hr);
         IMFSample_Release(sample);
         return;
     }
 
-    if (FAILED(hr = IMFSample_AddBuffer(sample, buffer)))
-    {
-        ERR("Failed to add buffer, hr %#lx.\n", hr);
-        goto out;
-    }
-
-    if (FAILED(hr = IMFMediaBuffer_SetCurrentLength(buffer, wg_buffer->size)))
-    {
-        ERR("Failed to set size, hr %#lx.\n", hr);
-        goto out;
-    }
-
-    if (FAILED(hr = IMFMediaBuffer_Lock(buffer, &data, NULL, NULL)))
-    {
-        ERR("Failed to lock buffer, hr %#lx.\n", hr);
-        goto out;
-    }
-
-    if (!wg_parser_stream_copy_buffer(stream->wg_stream, data, 0, wg_buffer->size))
-    {
-        wg_parser_stream_release_buffer(stream->wg_stream);
-        IMFMediaBuffer_Unlock(buffer);
-        goto out;
-    }
-    wg_parser_stream_release_buffer(stream->wg_stream);
-
-    if (FAILED(hr = IMFMediaBuffer_Unlock(buffer)))
-    {
-        ERR("Failed to unlock buffer, hr %#lx.\n", hr);
-        goto out;
-    }
-
-    if (FAILED(hr = IMFSample_SetSampleTime(sample, wg_buffer->pts)))
-    {
-        ERR("Failed to set sample time, hr %#lx.\n", hr);
-        goto out;
-    }
+    success = wg_parser_stream_read_mf(stream->wg_stream, wg_sample);
+    wg_sample_release(wg_sample);
 
-    if (FAILED(hr = IMFSample_SetSampleDuration(sample, wg_buffer->duration)))
+    if (success)
     {
-        ERR("Failed to set sample duration, hr %#lx.\n", hr);
-        goto out;
+        if (token)
+            IMFSample_SetUnknown(sample, &MFSampleExtension_Token, token);
+        IMFMediaEventQueue_QueueEventParamUnk(stream->event_queue, MEMediaSample,
+                &GUID_NULL, S_OK, (IUnknown *)sample);
     }
 
-    if (token)
-        IMFSample_SetUnknown(sample, &MFSampleExtension_Token, token);
-
-    IMFMediaEventQueue_QueueEventParamUnk(stream->event_queue, MEMediaSample,
-            &GUID_NULL, S_OK, (IUnknown *)sample);
-
-out:
-    IMFMediaBuffer_Release(buffer);
     IMFSample_Release(sample);
 }
 
diff --git a/dlls/winegstreamer/unix_private.h b/dlls/winegstreamer/unix_private.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/unix_private.h
+++ b/dlls/winegstreamer/unix_private.h
@@ -46,6 +46,9 @@ extern void wg_allocator_destroy(GstAllocator *allocator) DECLSPEC_HIDDEN;
 extern void wg_allocator_release_sample(GstAllocator *allocator, struct wg_sample *sample,
         bool discard_data) DECLSPEC_HIDDEN;
 
+extern NTSTATUS wg_sample_read_from_buffer(GstBuffer *buffer, GstCaps *caps, gsize plane_align,
+        struct wg_sample *sample) DECLSPEC_HIDDEN;
+
 static inline bool is_caps_video(GstCaps *caps)
 {
     const gchar *media_type;
diff --git a/dlls/winegstreamer/unixlib.h b/dlls/winegstreamer/unixlib.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/unixlib.h
+++ b/dlls/winegstreamer/unixlib.h
@@ -246,6 +246,12 @@ struct wg_parser_stream_copy_buffer_params
     UINT32 size;
 };
 
+struct wg_parser_stream_read_data_params
+{
+    struct wg_parser_stream *stream;
+    struct wg_sample *sample;
+};
+
 struct wg_parser_stream_notify_qos_params
 {
     struct wg_parser_stream *stream;
@@ -319,6 +325,7 @@ enum unix_funcs
     unix_wg_parser_stream_get_buffer,
     unix_wg_parser_stream_copy_buffer,
     unix_wg_parser_stream_release_buffer,
+    unix_wg_parser_stream_read_data,
     unix_wg_parser_stream_notify_qos,
 
     unix_wg_parser_stream_get_duration,
diff --git a/dlls/winegstreamer/wg_parser.c b/dlls/winegstreamer/wg_parser.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_parser.c
+++ b/dlls/winegstreamer/wg_parser.c
@@ -381,6 +381,35 @@ static NTSTATUS wg_parser_stream_release_buffer(void *args)
     return S_OK;
 }
 
+static NTSTATUS wg_parser_stream_read_data(void *args)
+{
+    struct wg_parser_stream_read_data_params *params = args;
+    struct wg_parser_stream *stream = params->stream;
+    struct wg_parser *parser = stream->parser;
+    struct wg_sample *sample = params->sample;
+    NTSTATUS status;
+
+    pthread_mutex_lock(&parser->mutex);
+
+    if (!stream->buffer)
+    {
+        pthread_mutex_unlock(&parser->mutex);
+        return VFW_E_WRONG_STATE;
+    }
+
+    status = wg_sample_read_from_buffer(stream->buffer, NULL, 0, sample);
+    if (!(sample->flags & WG_SAMPLE_FLAG_INCOMPLETE))
+    {
+        gst_buffer_unref(stream->buffer);
+        stream->buffer = NULL;
+        pthread_cond_signal(&stream->event_empty_cond);
+    }
+
+    pthread_mutex_unlock(&parser->mutex);
+
+    return status;
+}
+
 static NTSTATUS wg_parser_stream_get_duration(void *args)
 {
     struct wg_parser_stream_get_duration_params *params = args;
@@ -1759,6 +1788,7 @@ const unixlib_entry_t __wine_unix_call_funcs[] =
     X(wg_parser_stream_get_buffer),
     X(wg_parser_stream_copy_buffer),
     X(wg_parser_stream_release_buffer),
+    X(wg_parser_stream_read_data),
     X(wg_parser_stream_notify_qos),
 
     X(wg_parser_stream_get_duration),
diff --git a/dlls/winegstreamer/wg_sample.c b/dlls/winegstreamer/wg_sample.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_sample.c
+++ b/dlls/winegstreamer/wg_sample.c
@@ -459,3 +459,26 @@ HRESULT wg_transform_read_quartz(struct wg_transform *transform, struct wg_sampl
 
     return S_OK;
 }
+
+bool wg_parser_stream_read_mf(struct wg_parser_stream *stream, struct wg_sample *wg_sample)
+{
+    struct sample *sample = CONTAINING_RECORD(wg_sample, struct sample, wg_sample);
+
+    if (sample->ops != &mf_sample_ops)
+        return false;
+
+    if (!wg_parser_stream_read_data(stream, wg_sample))
+        return false;
+
+    IMFMediaBuffer_SetCurrentLength(sample->u.mf.buffer, wg_sample->size);
+
+    if (wg_sample->flags & WG_SAMPLE_FLAG_HAS_PTS)
+        IMFSample_SetSampleTime(sample->u.mf.sample, wg_sample->pts);
+    if (wg_sample->flags & WG_SAMPLE_FLAG_HAS_DURATION)
+        IMFSample_SetSampleDuration(sample->u.mf.sample, wg_sample->duration);
+    if (wg_sample->flags & WG_SAMPLE_FLAG_SYNC_POINT)
+        IMFSample_SetUINT32(sample->u.mf.sample, &MFSampleExtension_CleanPoint, 1);
+
+    return true;
+}
+
diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -718,7 +718,7 @@ static bool copy_buffer(GstBuffer *buffer, GstCaps *caps, struct wg_sample *samp
     return true;
 }
 
-static NTSTATUS read_transform_output_data(GstBuffer *buffer, GstCaps *caps, gsize plane_align,
+NTSTATUS wg_sample_read_from_buffer(GstBuffer *buffer, GstCaps *caps, gsize plane_align,
         struct wg_sample *sample)
 {
     bool ret, needs_copy;
@@ -877,7 +877,7 @@ NTSTATUS wg_transform_read_data(void *args)
         return STATUS_SUCCESS;
     }
 
-    if ((status = read_transform_output_data(output_buffer, output_caps,
+    if ((status = wg_sample_read_from_buffer(output_buffer, output_caps,
                 transform->output_plane_align, sample)))
     {
         wg_allocator_release_sample(transform->allocator, sample, false);
-- 
2.37.1

