From: Myah Caron <qsniyg@protonmail.com>
Subject: [PATCH] ntdll: Avoid reading TEB in NtCreateThreadEx.
Message-Id: <jz1lSzzJ1CePLndEhs4FO9PWu-ZJ0Nc5XOQRtLTdvZNp6JzNFuYd-TtFUD8SgCqNJyhD4-5h5UENwMUREJqAZc14TwTLNN94DRa-kEJ3zBE=@protonmail.com>
Date: Mon, 28 Sep 2020 18:59:14 +0000

Wine-bug: https://bugs.winehq.org/show_bug.cgi?id=49903
Signed-off-by: Myah Caron <qsniyg@protonmail.com>
---
As noted in the bug, some programs hold a breakpoint on memory reads to the TEB, and they get triggered by GetCurrentProcessId. Since this is a syscall, this wouldn't occur under Windows.

 dlls/ntdll/unix/thread.c | 4 +++-
 server/protocol.def      | 1 +
 server/thread.c          | 1 +
 3 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/thread.c b/dlls/ntdll/unix/thread.c
index 83294dc7d93..5a37bacdc3f 100644
--- a/dlls/ntdll/unix/thread.c
+++ b/dlls/ntdll/unix/thread.c
@@ -147,6 +147,7 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
     data_size_t len;
     struct object_attributes *objattr;
     struct ntdll_thread_data *thread_data;
+    DWORD pid = 0;
     DWORD tid = 0;
     int request_pipe[2];
     SIZE_T extra_stack = PTHREAD_STACK_MIN;
@@ -203,6 +204,7 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
         if (!(status = wine_server_call( req )))
         {
             *handle = wine_server_ptr_handle( reply->handle );
+            pid = reply->pid;
             tid = reply->tid;
         }
         close( request_pipe[0] );
@@ -226,7 +228,7 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE *handle, ACCESS_MASK access, OBJECT_ATT
         goto done;
     }
 
-    client_id.UniqueProcess = ULongToHandle( GetCurrentProcessId() );
+    client_id.UniqueProcess = ULongToHandle( pid );
     client_id.UniqueThread  = ULongToHandle( tid );
     teb->ClientId = client_id;
 
diff --git a/server/protocol.def b/server/protocol.def
index d79ac409dfe..ed53d9f09b5 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -881,6 +881,7 @@ typedef struct
     int          request_fd;   /* fd for request pipe */
     VARARG(objattr,object_attributes); /* object attributes */
 @REPLY
+    process_id_t pid;          /* process id */
     thread_id_t  tid;          /* thread id */
     obj_handle_t handle;       /* thread handle (in the current process) */
 @END
diff --git a/server/thread.c b/server/thread.c
index d2ccdc62d21..0c1f5725cef 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -1758,6 +1758,7 @@ DECL_HANDLER(new_thread)
     {
         thread->system_regs = current->system_regs;
         if (req->suspend) thread->suspend++;
+        reply->pid = get_process_id( process );
         reply->tid = get_thread_id( thread );
         if ((reply->handle = alloc_handle_no_access_check( current->process, thread,
                                                            req->access, objattr->attributes )))
