From 5ac39b687b57a09f28f6d78ae3634585773322f5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 17 Aug 2021 17:57:09 +0200
Subject: [PATCH 18/44] user32: Use the thread queue shared data for
 peek_message.

---
 dlls/user32/message.c      | 33 ++++++++++++++++++++++++++++++-
 dlls/user32/user_main.c    |  7 +++++++
 dlls/user32/user_private.h |  1 +
 dlls/user32/winstation.c   | 13 +++++++++++++
 include/ntuser.h           |  2 ++
 server/protocol.def        |  4 ++++
 server/queue.c             | 40 ++++++++++++++++++++++++++++++++++++++
 7 files changed, 99 insertions(+), 1 deletion(-)

diff --git a/dlls/user32/message.c b/dlls/user32/message.c
index 11111111111..11111111111 100644
--- a/dlls/user32/message.c
+++ b/dlls/user32/message.c
@@ -2692,12 +2692,14 @@ static inline void call_sendmsg_callback( SENDASYNCPROC callback, HWND hwnd, UIN
 static int peek_message( MSG *msg, HWND hwnd, UINT first, UINT last, UINT flags, UINT changed_mask )
 {
     LRESULT result;
+    volatile struct queue_shared_memory *shared = get_queue_shared_memory();
     struct user_thread_info *thread_info = get_user_thread_info();
     INPUT_MESSAGE_SOURCE prev_source = thread_info->msg_source;
     struct received_message_info info, *old_info;
     unsigned int hw_id = 0;  /* id of previous hardware message */
     void *buffer;
     size_t buffer_size = 1024;
+    BOOL skip = FALSE;
 
     if (!(buffer = HeapAlloc( GetProcessHeap(), 0, buffer_size ))) return -1;
 
@@ -2709,10 +2711,39 @@ static int peek_message( MSG *msg, HWND hwnd, UINT first, UINT last, UINT flags,
         NTSTATUS res;
         size_t size = 0;
         const message_data_t *msg_data = buffer;
+        UINT wake_mask = changed_mask & (QS_SENDMESSAGE | QS_SMRESULT);
+        DWORD clear_bits = 0, filter = flags >> 16 ? flags >> 16 : QS_ALLINPUT;
+        if (filter & QS_POSTMESSAGE)
+        {
+            clear_bits |= QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER;
+            if (first == 0 && last == ~0U) clear_bits |= QS_ALLPOSTMESSAGE;
+        }
+        if (filter & QS_INPUT) clear_bits |= QS_INPUT;
+        if (filter & QS_PAINT) clear_bits |= QS_PAINT;
 
         thread_info->msg_source = prev_source;
 
-        SERVER_START_REQ( get_message )
+        if (!shared) skip = FALSE;
+        else SHARED_READ_BEGIN( &shared->seq )
+        {
+            /* not created yet */
+            if (!shared->created) skip = FALSE;
+            /* if the masks need an update */
+            else if (shared->wake_mask != wake_mask) skip = FALSE;
+            else if (shared->changed_mask != changed_mask) skip = FALSE;
+            /* or if the queue is signaled */
+            else if (shared->wake_bits & wake_mask) skip = FALSE;
+            else if (shared->changed_bits & changed_mask) skip = FALSE;
+            /* or if the filter matches some bits */
+            else if (shared->wake_bits & filter) skip = FALSE;
+            /* or if we should clear some bits */
+            else if (shared->changed_bits & clear_bits) skip = FALSE;
+            else skip = TRUE;
+        }
+        SHARED_READ_END( &shared->seq );
+
+        if (skip) res = STATUS_PENDING;
+        else SERVER_START_REQ( get_message )
         {
             req->flags     = flags;
             req->get_win   = wine_server_user_handle( hwnd );
diff --git a/dlls/user32/user_main.c b/dlls/user32/user_main.c
index 11111111111..11111111111 100644
--- a/dlls/user32/user_main.c
+++ b/dlls/user32/user_main.c
@@ -268,6 +268,13 @@ static void thread_detach(void)
         thread_info->desktop_shared_memory = NULL;
     }
 
+    if (thread_info->queue_shared_map)
+    {
+        CloseHandle( thread_info->queue_shared_map );
+        thread_info->queue_shared_map = NULL;
+        thread_info->queue_shared_memory = NULL;
+    }
+
     exiting_thread_id = 0;
 }
 
diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index 11111111111..11111111111 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -210,6 +210,7 @@ extern BOOL WINPROC_call_window( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lPar
 extern const WCHAR *CLASS_GetVersionedName(const WCHAR *classname, UINT *basename_offset,
         WCHAR *combined, BOOL register_class) DECLSPEC_HIDDEN;
 extern volatile struct desktop_shared_memory *get_desktop_shared_memory( void ) DECLSPEC_HIDDEN;
+extern volatile struct queue_shared_memory *get_queue_shared_memory( void ) DECLSPEC_HIDDEN;
 
 /* kernel callbacks */
 
diff --git a/dlls/user32/winstation.c b/dlls/user32/winstation.c
index 11111111111..11111111111 100644
--- a/dlls/user32/winstation.c
+++ b/dlls/user32/winstation.c
@@ -160,6 +160,19 @@ volatile struct desktop_shared_memory *get_desktop_shared_memory( void )
 }
 
 
+volatile struct queue_shared_memory *get_queue_shared_memory( void )
+{
+    struct user_thread_info *thread_info = get_user_thread_info();
+    WCHAR buf[MAX_PATH];
+
+    if (thread_info->queue_shared_memory) return thread_info->queue_shared_memory;
+
+    swprintf( buf, ARRAY_SIZE(buf), L"\\KernelObjects\\__wine_thread_mappings\\%08x-queue", GetCurrentThreadId() );
+    map_shared_memory_section( buf, sizeof(struct queue_shared_memory), NULL,
+                               &thread_info->queue_shared_map, (void **)&thread_info->queue_shared_memory );
+    return thread_info->queue_shared_memory;
+}
+
 
 /***********************************************************************
  *              CreateWindowStationA  (USER32.@)
diff --git a/include/ntuser.h b/include/ntuser.h
index 11111111111..11111111111 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -99,6 +99,8 @@ struct user_thread_info
     struct rawinput_thread_data  *rawinput;               /* RawInput thread local data / buffer */
     HANDLE                        desktop_shared_map;     /* HANDLE to server's desktop shared memory */
     struct desktop_shared_memory *desktop_shared_memory;  /* Ptr to server's desktop shared memory */
+    HANDLE                        queue_shared_map;       /* HANDLE to server's thread queue shared memory */
+    struct queue_shared_memory   *queue_shared_memory;     /* Ptr to server's thread queue shared memory */
 };
 
 C_ASSERT( sizeof(struct user_thread_info) <= sizeof(((TEB *)0)->Win32ClientInfo) );
diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -872,6 +872,10 @@ struct queue_shared_memory
 {
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     int                  created;          /* queue has been created */
+    unsigned int         wake_bits;
+    unsigned int         changed_bits;
+    unsigned int         wake_mask;
+    unsigned int         changed_mask;
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 11111111111..11111111111 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -600,6 +600,12 @@ static inline void set_queue_bits( struct msg_queue *queue, unsigned int bits )
     }
     queue->wake_bits |= bits;
     queue->changed_bits |= bits;
+
+    SHARED_WRITE_BEGIN( &queue->shared->seq );
+    queue->shared->wake_bits = queue->wake_bits;
+    queue->shared->changed_bits = queue->changed_bits;
+    SHARED_WRITE_END( &queue->shared->seq );
+
     if (is_signaled( queue ))
     {
         wake_up( &queue->obj, 0 );
@@ -625,6 +631,11 @@ static inline void clear_queue_bits( struct msg_queue *queue, unsigned int bits
 
     if (do_esync() && !is_signaled( queue ))
         esync_clear( queue->esync_fd );
+
+    SHARED_WRITE_BEGIN( &queue->shared->seq );
+    queue->shared->wake_bits = queue->wake_bits;
+    queue->shared->changed_bits = queue->changed_bits;
+    SHARED_WRITE_END( &queue->shared->seq );
 }
 
 /* check whether msg is a keyboard message */
@@ -1167,6 +1178,11 @@ static void msg_queue_satisfied( struct object *obj, struct wait_queue_entry *en
     struct msg_queue *queue = (struct msg_queue *)obj;
     queue->wake_mask = 0;
     queue->changed_mask = 0;
+
+    SHARED_WRITE_BEGIN( &queue->shared->seq );
+    queue->shared->wake_mask = queue->wake_mask;
+    queue->shared->changed_mask = queue->changed_mask;
+    SHARED_WRITE_END( &queue->shared->seq );
     fast_reset_event( queue->fast_sync );
 }
 
@@ -2620,12 +2636,22 @@ DECL_HANDLER(set_queue_mask)
         queue->changed_mask = req->changed_mask;
         reply->wake_bits    = queue->wake_bits;
         reply->changed_bits = queue->changed_bits;
+
+        SHARED_WRITE_BEGIN( &queue->shared->seq );
+        queue->shared->wake_mask = queue->wake_mask;
+        queue->shared->changed_mask = queue->changed_mask;
+        SHARED_WRITE_END( &queue->shared->seq );
+
         if (is_signaled( queue ))
         {
             /* if skip wait is set, do what would have been done in the subsequent wait */
             if (req->skip_wait)
             {
                 queue->wake_mask = queue->changed_mask = 0;
+                SHARED_WRITE_BEGIN( &queue->shared->seq );
+                queue->shared->wake_mask = queue->wake_mask;
+                queue->shared->changed_mask = queue->changed_mask;
+                SHARED_WRITE_END( &queue->shared->seq );
                 fast_reset_event( queue->fast_sync );
             }
             else
@@ -2659,6 +2685,10 @@ DECL_HANDLER(get_queue_status)
 
         if (do_esync() && !is_signaled( queue ))
             esync_clear( queue->esync_fd );
+
+        SHARED_WRITE_BEGIN( &queue->shared->seq );
+        queue->shared->changed_bits = queue->changed_bits;
+        SHARED_WRITE_END( &queue->shared->seq );
     }
     else reply->wake_bits = reply->changed_bits = 0;
 }
@@ -2842,6 +2872,10 @@ DECL_HANDLER(get_message)
     if (!is_signaled( queue ))
         fast_reset_event( queue->fast_sync );
 
+    SHARED_WRITE_BEGIN( &queue->shared->seq );
+    queue->shared->changed_bits = queue->changed_bits;
+    SHARED_WRITE_END( &queue->shared->seq );
+
     /* then check for posted messages */
     if ((filter & QS_POSTMESSAGE) &&
         get_posted_message( queue, queue->ignore_post_msg, get_win, req->get_first, req->get_last, req->flags, reply ))
@@ -2905,6 +2939,12 @@ DECL_HANDLER(get_message)
     if (get_win == -1 && current->process->idle_event) set_event( current->process->idle_event );
     queue->wake_mask = req->wake_mask;
     queue->changed_mask = req->changed_mask;
+
+    SHARED_WRITE_BEGIN( &queue->shared->seq );
+    queue->shared->wake_mask = queue->wake_mask;
+    queue->shared->changed_mask = queue->changed_mask;
+    SHARED_WRITE_END( &queue->shared->seq );
+
     fast_reset_event( queue->fast_sync );
     set_error( STATUS_PENDING );  /* FIXME */
     return;
-- 
2.35.1

