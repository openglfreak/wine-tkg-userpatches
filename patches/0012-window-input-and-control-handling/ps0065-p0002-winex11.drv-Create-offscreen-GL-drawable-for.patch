From 68f9023fafc57f8f0861d80e054a389fbcefcac7 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 10 Sep 2021 22:21:13 +0300
Subject: [PATCH 2/5] winex11.drv: Create offscreen GL drawable for layered
 windows managed through UpdateLayeredWindow().

CW-Bug-ID: #19216
---
 dlls/winex11.drv/opengl.c | 70 +++++++++++++++++++++++++++++----------
 dlls/winex11.drv/window.c | 37 +++++++++++++++++++++
 dlls/winex11.drv/x11drv.h |  3 ++
 3 files changed, 92 insertions(+), 18 deletions(-)

diff --git a/dlls/winex11.drv/opengl.c b/dlls/winex11.drv/opengl.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/opengl.c
+++ b/dlls/winex11.drv/opengl.c
@@ -218,6 +218,12 @@ enum dc_gl_type
     DC_GL_PBUFFER     /* pseudo memory DC using a PBuffer */
 };
 
+enum dc_gl_layered_type
+{
+    DC_GL_LAYERED_NONE,
+    DC_GL_LAYERED_UPDATES,
+};
+
 struct gl_drawable
 {
     LONG                           ref;          /* reference count */
@@ -228,6 +234,7 @@ struct gl_drawable
     Pixmap                         pixmap;       /* base pixmap if drawable is a GLXPixmap */
     const struct wgl_pixel_format *format;       /* pixel format for the drawable */
     SIZE                           pixmap_size;  /* pixmap size for GLXPixmap drawables */
+    enum dc_gl_layered_type        layered_type;
     int                            swap_interval;
     BOOL                           refresh_swap_interval;
     BOOL                           mutable_pf;
@@ -1317,6 +1324,19 @@ static GLXContext create_glxcontext(Display *display, struct wgl_context *contex
 }
 
 
+static enum dc_gl_layered_type get_gl_layered_type( HWND hwnd )
+{
+    struct x11drv_win_data *data;
+    enum dc_gl_layered_type ret;
+
+    if (!(data = get_win_data( hwnd ))) return DC_GL_LAYERED_NONE;
+    ret = data->layered && !data->layered_attributes ? DC_GL_LAYERED_UPDATES : DC_GL_LAYERED_NONE;
+    release_win_data( data );
+
+    return ret;
+}
+
+
 /***********************************************************************
  *              create_gl_drawable
  */
@@ -1344,8 +1364,24 @@ static struct gl_drawable *create_gl_drawable( HWND hwnd, const struct wgl_pixel
     gl->ref = 1;
     gl->mutable_pf = mutable_pf;
 
-    if (!known_child && !NtUserGetWindowRelative( hwnd, GW_CHILD ) &&
-        NtUserGetAncestor( hwnd, GA_PARENT ) == NtUserGetDesktopWindow())  /* childless top-level window */
+    gl->layered_type = get_gl_layered_type( hwnd );
+
+    if (gl->layered_type)
+    {
+        detach_client_window( hwnd );
+        gl->type = DC_GL_PIXMAP_WIN;
+        gl->pixmap = XCreatePixmap( gdi_display, root_window, width, height, visual->depth );
+        if (gl->pixmap)
+        {
+            gl->drawable = pglXCreatePixmap( gdi_display, gl->format->fbconfig, gl->pixmap, NULL );
+            if (!gl->drawable) XFreePixmap( gdi_display, gl->pixmap );
+            gl->pixmap_size.cx = width;
+            gl->pixmap_size.cy = height;
+        }
+        TRACE( "%p created pixmap drawable %lx for layered window, type %u.\n", hwnd, gl->drawable, gl->layered_type );
+    }
+    else if (!known_child && !NtUserGetWindowRelative( hwnd, GW_CHILD ) &&
+             NtUserGetAncestor( hwnd, GA_PARENT ) == NtUserGetDesktopWindow())  /* childless top-level window */
     {
         gl->type = DC_GL_WINDOW;
         gl->window = create_client_window( hwnd, visual );
@@ -1475,24 +1511,22 @@ static BOOL set_pixel_format(HDC hdc, int format, BOOL allow_change)
  */
 void sync_gl_drawable( HWND hwnd, BOOL known_child )
 {
+    enum dc_gl_layered_type new_layered_type;
     struct gl_drawable *old, *new;
 
     if (!(old = get_gl_drawable( hwnd, 0 ))) return;
 
-    switch (old->type)
+    new_layered_type = get_gl_layered_type( hwnd );
+    if (old->type == DC_GL_PIXMAP_WIN || (known_child && old->type == DC_GL_WINDOW)
+        || old->layered_type != new_layered_type)
     {
-    case DC_GL_WINDOW:
-        if (!known_child) break; /* Still a childless top-level window */
-        /* fall through */
-    case DC_GL_PIXMAP_WIN:
-        if (!(new = create_gl_drawable( hwnd, old->format, known_child, old->mutable_pf ))) break;
-        mark_drawable_dirty( old, new );
-        XFlush( gdi_display );
-        TRACE( "Recreated GL drawable %lx to replace %lx\n", new->drawable, old->drawable );
-        release_gl_drawable( new );
-        break;
-    default:
-        break;
+        if ((new = create_gl_drawable( hwnd, old->format, known_child, old->mutable_pf )))
+        {
+            mark_drawable_dirty( old, new );
+            XFlush( gdi_display );
+            TRACE( "Recreated GL drawable %lx to replace %lx\n", new->drawable, old->drawable );
+            release_gl_drawable( new );
+        }
     }
     release_gl_drawable( old );
 }
@@ -1987,7 +2021,7 @@ static void wglFinish(void)
     {
         switch (gl->type)
         {
-        case DC_GL_PIXMAP_WIN: escape.drawable = gl->pixmap; break;
+        case DC_GL_PIXMAP_WIN: if (!gl->layered_type) escape.drawable = gl->pixmap; break;
         case DC_GL_CHILD_WIN:  escape.drawable = gl->window; break;
         default: break;
         }
@@ -2014,7 +2048,7 @@ static void wglFlush(void)
     {
         switch (gl->type)
         {
-        case DC_GL_PIXMAP_WIN: escape.drawable = gl->pixmap; break;
+        case DC_GL_PIXMAP_WIN: if (!gl->layered_type) escape.drawable = gl->pixmap; break;
         case DC_GL_CHILD_WIN:  escape.drawable = gl->window; break;
         default: break;
         }
@@ -3372,7 +3406,7 @@ static BOOL glxdrv_wglSwapBuffers( HDC hdc )
     {
     case DC_GL_PIXMAP_WIN:
         if (ctx) sync_context( ctx );
-        escape.drawable = gl->pixmap;
+        if (!gl->layered_type) escape.drawable = gl->pixmap;
         if (pglXCopySubBufferMESA) {
             /* (glX)SwapBuffers has an implicit glFlush effect, however
              * GLX_MESA_copy_sub_buffer doesn't. Make sure GL is flushed before
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1683,6 +1683,30 @@ void update_client_window( HWND hwnd )
 }
 
 
+/**********************************************************************
+ *		detach_client_window
+ */
+void detach_client_window( HWND hwnd )
+{
+    struct x11drv_win_data *data;
+
+    if (!(data = get_win_data( hwnd ))) return;
+
+    if (!data->client_window)
+    {
+        release_win_data( data );
+        return;
+    }
+
+    XDeleteContext( data->display, data->client_window, winContext );
+    XReparentWindow( gdi_display, data->client_window, get_dummy_parent(), 0, 0 );
+    TRACE( "%p reparent xwin %lx/%lx\n", data->hwnd, data->whole_window, data->client_window );
+    data->client_window = 0;
+    XFlush( data->display );
+    release_win_data( data );
+}
+
+
 /**********************************************************************
  *		create_dummy_client_window
  */
@@ -1978,6 +2002,7 @@ void X11DRV_SetWindowStyle( HWND hwnd, INT offset, STYLESTRUCT *style )
     struct x11drv_win_data *data;
     DWORD changed = style->styleNew ^ style->styleOld;
     HWND parent = NtUserGetAncestor( hwnd, GA_PARENT );
+    BOOL need_sync_gl = FALSE;
 
     if (offset == GWL_STYLE && (changed & WS_CHILD))
     {
@@ -1997,12 +2022,15 @@ void X11DRV_SetWindowStyle( HWND hwnd, INT offset, STYLESTRUCT *style )
     if (offset == GWL_EXSTYLE && (changed & WS_EX_LAYERED)) /* changing WS_EX_LAYERED resets attributes */
     {
         data->layered = FALSE;
+        data->layered_attributes = FALSE;
+        need_sync_gl = TRUE;
         set_window_visual( data, &default_visual, FALSE );
         if (!data->cloaked) set_window_opacity( data->display, data->whole_window, 0xff );
         if (data->surface) set_surface_color_key( data->surface, CLR_INVALID );
     }
 done:
     release_win_data( data );
+    if (need_sync_gl) sync_gl_drawable( hwnd, FALSE );
 }
 
 
@@ -3238,6 +3266,7 @@ void X11DRV_SetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw )
 void X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWORD flags )
 {
     struct x11drv_win_data *data = get_win_data( hwnd );
+    BOOL need_sync_gl;
 
     if (data)
     {
@@ -3248,7 +3277,9 @@ void X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWO
         if (data->surface)
             set_surface_color_key( data->surface, (flags & LWA_COLORKEY) ? key : CLR_INVALID );
 
+        need_sync_gl = !data->layered || !data->layered_attributes;
         data->layered = TRUE;
+        data->layered_attributes = TRUE;
         if (!data->mapped)  /* mapping is delayed until attributes are set */
         {
             DWORD style = NtUserGetWindowLongW( data->hwnd, GWL_STYLE );
@@ -3258,10 +3289,12 @@ void X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWO
             {
                 release_win_data( data );
                 map_window( hwnd, style );
+                if (need_sync_gl) sync_gl_drawable( hwnd, FALSE );
                 return;
             }
         }
         release_win_data( data );
+        if (need_sync_gl) sync_gl_drawable( hwnd, FALSE );
     }
     else
     {
@@ -3300,6 +3333,7 @@ BOOL X11DRV_UpdateLayeredWindow( HWND hwnd, const UPDATELAYEREDWINDOWINFO *info,
     BITMAPINFO *bmi = (BITMAPINFO *)buffer;
     void *src_bits, *dst_bits;
     RECT rect, src_rect;
+    BOOL need_sync_gl;
     HDC hdc = 0;
     HBITMAP dib;
     BOOL mapped, ret = FALSE;
@@ -3309,6 +3343,7 @@ BOOL X11DRV_UpdateLayeredWindow( HWND hwnd, const UPDATELAYEREDWINDOWINFO *info,
 
     if (!(data = get_win_data( hwnd ))) return FALSE;
 
+    need_sync_gl = !data->layered;
     data->layered = TRUE;
     if (!data->embedded && argb_visual.visualid) set_window_visual( data, &argb_visual, TRUE );
 
@@ -3341,6 +3376,8 @@ BOOL X11DRV_UpdateLayeredWindow( HWND hwnd, const UPDATELAYEREDWINDOWINFO *info,
             map_window( hwnd, style );
     }
 
+    if (need_sync_gl) sync_gl_drawable( hwnd, FALSE );
+
     if (!surface)
     {
         release_win_data( data );
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -648,6 +648,8 @@ struct x11drv_win_data
     BOOL        embedded : 1;   /* is window an XEMBED client? */
     BOOL        shaped : 1;     /* is window using a custom region shape? */
     BOOL        layered : 1;    /* is window layered and with valid attributes? */
+    BOOL        layered_attributes : 1;
+                                /* is layered window has leyered attributes set (or otherwise managed with UpdateLayeredWindow()? */
     BOOL        use_alpha : 1;  /* does window use an alpha channel? */
     BOOL        skip_taskbar : 1; /* does window should be deleted from taskbar */
     BOOL        add_taskbar : 1; /* does window should be added to taskbar regardless of style */
@@ -693,6 +695,7 @@ extern void update_net_wm_states( struct x11drv_win_data *data ) DECLSPEC_HIDDEN
 extern void make_window_embedded( struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
 extern Window create_dummy_client_window(void) DECLSPEC_HIDDEN;
 extern Window create_client_window( HWND hwnd, const XVisualInfo *visual ) DECLSPEC_HIDDEN;
+extern void detach_client_window( HWND hwnd ) DECLSPEC_HIDDEN;
 extern void update_client_window( HWND hwnd ) DECLSPEC_HIDDEN;
 extern void set_window_visual( struct x11drv_win_data *data, const XVisualInfo *vis, BOOL use_alpha ) DECLSPEC_HIDDEN;
 extern void change_systray_owner( Display *display, Window systray_window ) DECLSPEC_HIDDEN;

