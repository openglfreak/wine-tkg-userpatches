From: "Gabriel Ivăncescu" <gabrielopcode@gmail.com>
Subject: [PATCH 3/6] winex11.drv: Implement cloaking using window opacity and Xshape.
Message-Id: <125d8112b6e8c8fe9de4fac3d71a975c84ea674a.1604678337.git.gabrielopcode@gmail.com>
Date: Fri,  6 Nov 2020 18:03:32 +0200
In-Reply-To: <c2d924287aa6ead5a30239d694d834427a61cf3c.1604678337.git.gabrielopcode@gmail.com>
References: <c2d924287aa6ead5a30239d694d834427a61cf3c.1604678337.git.gabrielopcode@gmail.com>

Cloaking is implemented by setting the opacity of a window to zero, and
setting an empty shape using libXshape. This makes it transparent to mouse
input and completely invisible, while otherwise still processing the exact
same messages/events as a visible window would, to match what Windows does.

While a cloaked window still has a taskbar visible, it also has the same
traits as a normal window. For example, a minimized cloaked window will show
the "Restore" or "Unminimize" function when right-clicking on its taskbar
icon. So that means unmapping the window would *not* be the same behavior
as Windows, since it even removes the taskbar item in the first place.

Signed-off-by: Gabriel Ivăncescu <gabrielopcode@gmail.com>
---

The reason the NtUserGetWindowRelative( hwnd, GW_OWNER ) check is done in this patch,
rather than in user32, is because it must not be checked for shell-cloaked
windows (last patch in the series). The shell has full control over what
windows it hides and doesn't abide by that, at least on Wine, because of
how virtual desktops work.

 dlls/winex11.drv/init.c   |   1 +
 dlls/winex11.drv/window.c | 106 +++++++++++++++++++++++++++++++++++---
 dlls/winex11.drv/x11drv.h |   3 ++
 3 files changed, 103 insertions(+), 7 deletions(-)

diff --git a/dlls/winex11.drv/init.c b/dlls/winex11.drv/init.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/init.c
+++ b/dlls/winex11.drv/init.c
@@ -433,6 +433,7 @@ static const struct user_driver_funcs x11drv_funcs =
     .pSetForegroundWindow = X11DRV_SetForegroundWindow,
     .pSetLayeredWindowAttributes = X11DRV_SetLayeredWindowAttributes,
     .pSetParent = X11DRV_SetParent,
+    .pSetWindowCompositionAttribute = X11DRV_SetWindowCompositionAttribute,
     .pSetWindowIcon = X11DRV_SetWindowIcon,
     .pSetWindowRgn = X11DRV_SetWindowRgn,
     .pSetWindowStyle = X11DRV_SetWindowStyle,
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -41,6 +41,7 @@
 #undef Status
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
+#include "dwmapi.h"
 #include "windef.h"
 #include "winbase.h"
 #include "wingdi.h"
@@ -389,7 +390,7 @@ static void sync_window_region( struct x11drv_win_data *data, HRGN win_region )
     if (!data->whole_window) return;
     data->shaped = FALSE;
 
-    if (IsRectEmpty( &data->window_rect ))  /* set an empty shape */
+    if (IsRectEmpty( &data->window_rect ) || data->cloaked)  /* set an empty shape */
     {
         static XRectangle empty_rect;
         XShapeCombineRectangles( data->display, data->whole_window, ShapeBounding, 0, 0,
@@ -1770,7 +1771,13 @@ static void create_whole_window( struct x11drv_win_data *data )
     if (win_rgn || IsRectEmpty( &data->window_rect )) sync_window_region( data, win_rgn );
 
     /* set the window opacity */
-    if (!NtUserGetLayeredWindowAttributes( data->hwnd, &key, &alpha, &layered_flags )) layered_flags = 0;
+    if (data->cloaked)
+    {
+        key = 0;
+        alpha = 0;
+        layered_flags = LWA_ALPHA;
+    }
+    else if (!NtUserGetLayeredWindowAttributes( data->hwnd, &key, &alpha, &layered_flags )) layered_flags = 0;
     set_window_opacity( data->display, data->whole_window, (layered_flags & LWA_ALPHA) ? alpha : 0xff );
 
     XFlush( data->display );  /* make sure the window exists before we start painting to it */
@@ -1942,7 +1949,7 @@ void X11DRV_SetWindowStyle( HWND hwnd, INT offset, STYLESTRUCT *style )
     {
         data->layered = FALSE;
         set_window_visual( data, &default_visual, FALSE );
-        set_window_opacity( data->display, data->whole_window, 0xff );
+        if (!data->cloaked) set_window_opacity( data->display, data->whole_window, 0xff );
         if (data->surface) set_surface_color_key( data->surface, CLR_INVALID );
     }
 done:
@@ -2886,6 +2893,80 @@ static void x11drv_desktop_set_hicon_cursor( HICON handle, Cursor cursor )
     XUnlockDisplay( gdi_display );
 }
 
+/**********************************************************************
+ *		SetWindowCompositionAttribute  (X11DRV.@)
+ */
+DWORD CDECL X11DRV_SetWindowCompositionAttribute( HWND hwnd, DWORD attribute, void *attr_data )
+{
+    struct x11drv_win_data *data;
+    DWORD ret = 0;
+    HWND owner;
+
+    switch (attribute)
+    {
+    case WCA_CLOAK:
+        if (!(data = get_win_data( hwnd )))
+        {
+            SetLastError( ERROR_INVALID_HANDLE );
+            return ~0;
+        }
+        ret = *(BOOL*)attr_data ? SET_WINDOW_CLOAKED_ON : 0;
+
+        /* If the owner is cloaked, manual uncloaking is not allowed */
+        if (!ret && (owner = NtUserGetWindowRelative( hwnd, GW_OWNER )))
+        {
+            struct x11drv_win_data *owner_data = get_win_data( owner );
+            DWORD cloaked = 0;
+            if (owner_data)
+            {
+                cloaked = owner_data->cloaked ? DWM_CLOAKED_APP : 0;
+                release_win_data( owner_data );
+            }
+            else
+            {
+                SERVER_START_REQ( get_window_cloaked )
+                {
+                    req->handle = wine_server_user_handle( owner );
+                    if (!wine_server_call( req )) cloaked = reply->cloaked;
+                }
+                SERVER_END_REQ;
+            }
+            if (cloaked)
+            {
+                release_win_data( data );
+                SetLastError( ERROR_INVALID_PARAMETER );
+                return ~0;
+            }
+        }
+
+        if (!data->cloaked != !ret)
+        {
+#ifdef HAVE_LIBXSHAPE
+            DWORD layered_flags = LWA_ALPHA;
+            COLORREF key = 0;
+            BYTE alpha = 0;
+
+            data->cloaked = ret;
+            if (!ret && !NtUserGetLayeredWindowAttributes( hwnd, &key, &alpha, &layered_flags ))
+                layered_flags = 0;
+
+            set_window_opacity( data->display, data->whole_window, (layered_flags & LWA_ALPHA) ? alpha : 0xff );
+            sync_window_region( data, (HRGN)1 );
+#else
+            FIXME("libXshape is not available, but cloaking requires it.\n");
+            SetLastError( ERROR_CALL_NOT_IMPLEMENTED );
+            ret = ~0;
+#endif
+        }
+        release_win_data( data );
+        break;
+    default:
+        break;
+    }
+    return ret;
+}
+
+
 /**********************************************************************
  *		SetWindowIcon (X11DRV.@)
  *
@@ -2945,7 +3026,7 @@ void X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWO
     {
         set_window_visual( data, &default_visual, FALSE );
 
-        if (data->whole_window)
+        if (data->whole_window && !data->cloaked)
             set_window_opacity( data->display, data->whole_window, (flags & LWA_ALPHA) ? alpha : 0xff );
         if (data->surface)
             set_surface_color_key( data->surface, (flags & LWA_COLORKEY) ? key : CLR_INVALID );
@@ -2970,9 +3051,20 @@ void X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha, DWO
         Window win = X11DRV_get_whole_window( hwnd );
         if (win)
         {
-            set_window_opacity( gdi_display, win, (flags & LWA_ALPHA) ? alpha : 0xff );
-            if (flags & LWA_COLORKEY)
-                FIXME( "LWA_COLORKEY not supported on foreign process window %p\n", hwnd );
+            DWORD cloaked = 0;
+
+            SERVER_START_REQ( get_window_cloaked )
+            {
+                req->handle = wine_server_user_handle( hwnd );
+                if (!wine_server_call( req )) cloaked = reply->cloaked;
+            }
+            SERVER_END_REQ;
+            if (!cloaked)
+            {
+                set_window_opacity( gdi_display, win, (flags & LWA_ALPHA) ? alpha : 0xff );
+                if (flags & LWA_COLORKEY)
+                    FIXME( "LWA_COLORKEY not supported on foreign process window %p\n", hwnd );
+            }
         }
     }
 }
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -639,6 +639,7 @@ struct x11drv_win_data
     BOOL        managed : 1;    /* is window managed? */
     BOOL        mapped : 1;     /* is window mapped? (in either normal or iconic state) */
     BOOL        iconic : 1;     /* is window in iconic state? */
+    BOOL        cloaked : 1;    /* is window cloaked manually? */
     BOOL        embedded : 1;   /* is window an XEMBED client? */
     BOOL        shaped : 1;     /* is window using a custom region shape? */
     BOOL        layered : 1;    /* is window layered and with valid attributes? */
@@ -991,4 +992,6 @@ static inline int ntdll_wcstoumbs( const WCHAR *src, DWORD srclen, char *dst, DW
         } while (__SHARED_READ_SEQ( x ) != __seq); \
     } while(0)
 
+extern DWORD CDECL X11DRV_SetWindowCompositionAttribute( HWND hwnd, DWORD attribute, void *attr_data ) DECLSPEC_HIDDEN;
+
 #endif  /* __WINE_X11DRV_H */

-- 
2.36.0

