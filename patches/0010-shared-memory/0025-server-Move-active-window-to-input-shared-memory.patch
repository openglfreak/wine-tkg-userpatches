From 4faa990701250ede63fbe0565edfa81757db9289 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 17:35:50 +0100
Subject: [PATCH 25/44] server: Move active window to input shared memory.

---
 server/protocol.def |  1 +
 server/queue.c      | 44 ++++++++++++++++++++++++++++----------------
 2 files changed, 29 insertions(+), 16 deletions(-)

diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -884,6 +884,7 @@ struct input_shared_memory
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     int                  created;
     thread_id_t          tid;
+    user_handle_t        active;           /* handle to the active window */
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 11111111111..11111111111 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -103,7 +103,6 @@ struct thread_input
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
     user_handle_t          focus;         /* focus window */
     user_handle_t          capture;       /* capture window */
-    user_handle_t          active;        /* active window */
     user_handle_t          menu_owner;    /* current menu owner window */
     user_handle_t          move_size;     /* current moving/resizing window */
     user_handle_t          caret;         /* caret window */
@@ -319,13 +318,15 @@ static struct thread_input *create_thread_input( struct thread *thread )
     {
         input->shared_mapping = grab_object( thread->input_shared_mapping );
         input->shared = thread->input_shared;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
         input->focus        = 0;
         input->capture      = 0;
-        input->active       = 0;
+        input->shared->active       = 0;
         input->menu_owner   = 0;
         input->move_size    = 0;
         input->cursor       = 0;
         input->cursor_count = 0;
+        SHARED_WRITE_END( &input->shared->seq );
         list_init( &input->msg_list );
         set_caret_window( input, 0 );
         memset( input->keystate, 0, sizeof(input->keystate) );
@@ -1270,7 +1271,7 @@ static void thread_input_dump( struct object *obj, int verbose )
 {
     struct thread_input *input = (struct thread_input *)obj;
     fprintf( stderr, "Thread input focus=%08x capture=%08x active=%08x\n",
-             input->focus, input->capture, input->active );
+             input->focus, input->capture, input->shared->active );
 }
 
 static void thread_input_destroy( struct object *obj )
@@ -1291,12 +1292,14 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
 {
     struct thread_input *input = queue->input;
 
+    SHARED_WRITE_BEGIN( &input->shared->seq );
     if (window == input->focus) input->focus = 0;
     if (window == input->capture) input->capture = 0;
-    if (window == input->active) input->active = 0;
+    if (window == input->shared->active) input->shared->active = 0;
     if (window == input->menu_owner) input->menu_owner = 0;
     if (window == input->move_size) input->move_size = 0;
     if (window == input->caret) set_caret_window( input, 0 );
+    SHARED_WRITE_END( &input->shared->seq );
 }
 
 /* check if the specified window can be set in the input data of a given queue */
@@ -1329,7 +1332,7 @@ int init_thread_queue( struct thread *thread )
 int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
 {
     struct desktop *desktop;
-    struct thread_input *input;
+    struct thread_input *input, *old_input;
     int ret;
 
     if (!thread_to->queue && !(thread_to->queue = create_msg_queue( thread_to, NULL ))) return 0;
@@ -1346,8 +1349,11 @@ int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
 
     if (thread_from->queue)
     {
-        if (!input->focus) input->focus = thread_from->queue->input->focus;
-        if (!input->active) input->active = thread_from->queue->input->active;
+        SHARED_WRITE_BEGIN( &input->shared->seq );
+        old_input = thread_from->queue->input;
+        if (!input->focus) input->focus = old_input->focus;
+        if (!input->shared->active) input->shared->active = old_input->shared->active;
+        SHARED_WRITE_END( &input->shared->seq );
     }
 
     ret = assign_thread_input( thread_from, input );
@@ -1373,12 +1379,16 @@ void detach_thread_input( struct thread *thread_from )
             }
             release_object( thread );
         }
-        if (old_input->active && (thread = get_window_thread( old_input->active )))
+        if (old_input->shared->active && (thread = get_window_thread( old_input->shared->active )))
         {
             if (thread == thread_from)
             {
-                input->active = old_input->active;
-                old_input->active = 0;
+                SHARED_WRITE_BEGIN( &input->shared->seq );
+                input->shared->active = old_input->shared->active;
+                SHARED_WRITE_END( &input->shared->seq );
+                SHARED_WRITE_BEGIN( &old_input->shared->seq );
+                old_input->shared->active = 0;
+                SHARED_WRITE_END( &old_input->shared->seq );
             }
             release_object( thread );
         }
@@ -1705,7 +1715,7 @@ static user_handle_t find_hardware_message_window( struct desktop *desktop, stru
     {
         if (input && !(win = input->focus))
         {
-            win = input->active;
+            win = input->shared->active;
             if (*msg_code < WM_SYSKEYDOWN) *msg_code += WM_SYSKEYDOWN - WM_KEYDOWN;
         }
     }
@@ -3312,7 +3322,7 @@ DECL_HANDLER(get_thread_input)
     {
         reply->focus      = input->focus;
         reply->capture    = input->capture;
-        reply->active     = input->active;
+        reply->active     = input->shared->active;
         reply->menu_owner = input->menu_owner;
         reply->move_size  = input->move_size;
         reply->caret      = input->caret;
@@ -3322,7 +3332,7 @@ DECL_HANDLER(get_thread_input)
     }
 
     /* foreground window is active window of foreground thread */
-    reply->foreground = desktop->foreground_input ? desktop->foreground_input->active : 0;
+    reply->foreground = desktop->foreground_input ? desktop->foreground_input->shared->active : 0;
     if (thread) release_object( thread );
     release_object( desktop );
 }
@@ -3389,7 +3399,7 @@ DECL_HANDLER(set_foreground_window)
     struct msg_queue *queue = get_current_queue();
 
     if (!(desktop = get_thread_desktop( current, 0 ))) return;
-    reply->previous = desktop->foreground_input ? desktop->foreground_input->active : 0;
+    reply->previous = desktop->foreground_input ? desktop->foreground_input->shared->active : 0;
     reply->send_msg_old = (reply->previous && desktop->foreground_input != queue->input);
     reply->send_msg_new = FALSE;
 
@@ -3431,8 +3441,10 @@ DECL_HANDLER(set_active_window)
     {
         if (!req->handle || make_window_active( req->handle ))
         {
-            reply->previous = queue->input->active;
-            queue->input->active = get_user_full_handle( req->handle );
+            reply->previous = queue->input->shared->active;
+            SHARED_WRITE_BEGIN( &queue->input->shared->seq );
+            queue->input->shared->active = get_user_full_handle( req->handle );
+            SHARED_WRITE_END( &queue->input->shared->seq );
         }
         else set_error( STATUS_INVALID_HANDLE );
     }

