From 9b5d9a0aa8841875028d9b85710abe5bc6715f66 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 9 Dec 2021 16:52:31 +0100
Subject: [PATCH 4/4] winex11.drv: Try focusing another window if the current
 one is not right.

---
 dlls/winex11.drv/event.c  | 38 ++++++++++++++++++++++++--------------
 dlls/winex11.drv/window.c | 18 ++++++++++++++++++
 dlls/winex11.drv/x11drv.h |  1 +
 3 files changed, 43 insertions(+), 14 deletions(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index a1eb7437b67..f6fd17febde 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -654,13 +654,23 @@ static void handle_manager_message( HWND hwnd, XClientMessageEvent *event )
 }
 
 
+static void try_focus_another_window( Display *display, Time time )
+{
+    HWND hwnd = GetFocus();
+    if (hwnd) hwnd = GetAncestor( hwnd, GA_ROOT );
+    if (!hwnd) hwnd = GetActiveWindow();
+    if (!hwnd) hwnd = x11drv_thread_data()->last_focus;
+    if (hwnd && can_activate_window(hwnd)) set_focus( display, hwnd, time );
+}
+
+
 /**********************************************************************
  *              handle_wm_protocols
  */
 static void handle_wm_protocols( HWND hwnd, XClientMessageEvent *event )
 {
+    Time user_time, event_time = (Time)event->data.l[1];
     Atom protocol = (Atom)event->data.l[0];
-    Time event_time = (Time)event->data.l[1];
 
     if (!protocol) return;
 
@@ -725,6 +735,11 @@ static void handle_wm_protocols( HWND hwnd, XClientMessageEvent *event )
                hwnd, IsWindowEnabled(hwnd), IsWindowVisible(hwnd), GetWindowLongW(hwnd, GWL_STYLE),
                GetFocus(), GetActiveWindow(), GetForegroundWindow(), last_focus );
 
+        /* if the window was shown with SWP_NOACTIVATE and never received user input,
+         * it should not activate */
+        if (read_user_time( event->display, event->window, &user_time ) && !user_time)
+            return;
+
         if (can_activate_window(hwnd))
         {
             /* simulate a mouse click on the menu to find out
@@ -747,11 +762,7 @@ static void handle_wm_protocols( HWND hwnd, XClientMessageEvent *event )
             return;
         }
         /* try to find some other window to give the focus to */
-        hwnd = GetFocus();
-        if (hwnd) hwnd = GetAncestor( hwnd, GA_ROOT );
-        if (!hwnd) hwnd = GetActiveWindow();
-        if (!hwnd) hwnd = last_focus;
-        if (hwnd && can_activate_window(hwnd)) set_focus( event->display, hwnd, event_time );
+        try_focus_another_window( event->display, event_time );
     }
     else if (protocol == x11drv_atom(_NET_WM_PING))
     {
@@ -791,6 +802,7 @@ static const char * const focus_modes[] =
 static BOOL X11DRV_FocusIn( HWND hwnd, XEvent *xev )
 {
     XFocusChangeEvent *event = &xev->xfocus;
+    Time user_time;
     XIC xic;
 
     if (!hwnd) return FALSE;
@@ -827,14 +839,12 @@ static BOOL X11DRV_FocusIn( HWND hwnd, XEvent *xev )
         return TRUE;
     }
 
-    if (!can_activate_window(hwnd))
-    {
-        HWND hwnd = GetFocus();
-        if (hwnd) hwnd = GetAncestor( hwnd, GA_ROOT );
-        if (!hwnd) hwnd = GetActiveWindow();
-        if (!hwnd) hwnd = x11drv_thread_data()->last_focus;
-        if (hwnd && can_activate_window(hwnd)) set_focus( event->display, hwnd, CurrentTime );
-    }
+    /* if the window was shown with SWP_NOACTIVATE and never received user input,
+     * it should not activate */
+    if (read_user_time( event->display, event->window, &user_time ) && !user_time)
+        set_focus( event->display, GetForegroundWindow(), CurrentTime );
+    else if (!can_activate_window(hwnd))
+        try_focus_another_window( event->display, CurrentTime );
     else SetForegroundWindow( hwnd );
     return TRUE;
 }
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 2e8974c5ae6..d989b5a5a35 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1007,6 +1007,24 @@ void update_user_time( Display *display, Window window, Time time )
                      XA_CARDINAL, 32, PropModeReplace, (unsigned char *)&time, 1 );
 }
 
+/***********************************************************************
+ *     read_user_time
+ */
+BOOL read_user_time( Display *display, Window window, Time *time )
+{
+    unsigned long count, remaining;
+    Time *property = NULL;
+    int format;
+    Atom type;
+
+    if (!XGetWindowProperty( display, window, x11drv_atom(_NET_WM_USER_TIME), 0, 1, False, XA_CARDINAL,
+                             &type, &format, &count, &remaining, (unsigned char **)&property ) &&
+        count && property && format == 32) *time = *property;
+    XFree( property );
+
+    return count && property && format == 32;
+}
+
 /***********************************************************************
  *     update_net_wm_states
  */
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 534de1447db..c7e934d23fc 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -685,6 +685,7 @@ extern void vulkan_thread_detach(void) DECLSPEC_HIDDEN;
 extern void wait_for_withdrawn_state( HWND hwnd, BOOL set ) DECLSPEC_HIDDEN;
 extern Window init_clip_window(void) DECLSPEC_HIDDEN;
 extern void update_user_time( Display *display, Window window, Time time ) DECLSPEC_HIDDEN;
+extern BOOL read_user_time( Display *display, Window window, Time *time ) DECLSPEC_HIDDEN;
 extern void read_net_wm_states( Display *display, struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
 extern void update_net_wm_states( struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
 extern void make_window_embedded( struct x11drv_win_data *data ) DECLSPEC_HIDDEN;
-- 
2.35.1

