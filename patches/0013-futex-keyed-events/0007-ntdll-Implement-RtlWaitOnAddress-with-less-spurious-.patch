From 9659c979c236d8d184897f97ffd2f243833cafda Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 24 Dec 2020 18:55:28 +0100
Subject: [PATCH 7/7] ntdll: Implement RtlWaitOnAddress with less spurious
 wakeups.

---
 dlls/ntdll/unix/sync.c | 165 ++++++++++++++++++++---------------------
 1 file changed, 80 insertions(+), 85 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 89fbd935488..5619f8706a4 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -2855,67 +2855,49 @@ static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, cons
     return status;
 }
 
-/* We can't map addresses to futex directly, because an application can wait on
- * 8 bytes, and we can't pass all 8 as the compare value to futex(). Instead we
- * map all addresses to a small fixed table of futexes. This may result in
- * spurious wakes, but the application is already expected to handle those. */
-
-static int addr_futex_table[256];
-
-static inline int *hash_addr( const void *addr )
+struct fast_address_entry
 {
-    ULONG_PTR val = (ULONG_PTR)addr;
+    int wait_cs; /* 0: unlocked, 1: locked, 2: contested */
+    int signal;
+};
 
-    return &addr_futex_table[(val >> 2) & 255];
-}
+static struct fast_address_entry fast_address_table[256];
 
-static inline NTSTATUS fast_wait_addr( const void *addr, const void *cmp, SIZE_T size,
-                                       const LARGE_INTEGER *timeout )
+static inline NTSTATUS fast_wait_on_address( struct keyed_entry *entry, const LARGE_INTEGER *timeout, const void *addr, const void *cmp, SIZE_T size )
 {
-    int *futex;
-    int val;
-    struct timespec timespec;
-    int ret;
-
-    if (!use_futexes())
-        return STATUS_NOT_IMPLEMENTED;
+    struct fast_address_entry *fast = &fast_address_table[entry - keyed_entries];
+    struct timespec time, *timespec = nt_timeout_to_timespec( &time, timeout );
+    NTSTATUS status = STATUS_SUCCESS;
+    int ret, signal;
 
-    futex = hash_addr( addr );
+    if (!use_futexes()) return STATUS_NOT_IMPLEMENTED;
 
-    /* We must read the previous value of the futex before checking the value
-     * of the address being waited on. That way, if we receive a wake between
-     * now and waiting on the futex, we know that val will have changed.
-     * Use an atomic load so that memory accesses are ordered between this read
-     * and the increment below. */
-    val = InterlockedCompareExchange( futex, 0, 0 );
+    if ((status = futex_cs_enter( &fast->wait_cs, timespec ))) return status;
     if (!compare_addr( addr, cmp, size ))
-        return STATUS_SUCCESS;
-
-    if (timeout)
     {
-        timespec_from_timeout( &timespec, timeout );
-        ret = futex_wait( futex, val, &timespec );
+        futex_cs_leave( &fast->wait_cs );
+        return STATUS_SUCCESS;
     }
-    else
-        ret = futex_wait( futex, val, NULL );
-
-    if (ret == -1 && errno == ETIMEDOUT)
-        return STATUS_TIMEOUT;
-    return STATUS_SUCCESS;
+    /* wait for signal */
+    signal = fast->signal;
+    futex_cs_leave( &fast->wait_cs );
+    if (!(ret = futex_wait_abs( &fast->signal, signal, timespec ))) status = STATUS_SUCCESS;
+    else if (ret == -1 && errno == ETIMEDOUT) status = STATUS_TIMEOUT;
+    else if (ret == -1 && errno != EAGAIN) ERR("futex_wait_abs unexpectedly failed, errno: %d\n", errno);
+    return status;
 }
 
-static inline NTSTATUS fast_wake_addr( const void *addr )
+static inline NTSTATUS fast_wake_address( struct keyed_entry *entry, BOOLEAN all )
 {
-    int *futex;
-
-    if (!use_futexes())
-        return STATUS_NOT_IMPLEMENTED;
-
-    futex = hash_addr( addr );
+    struct fast_address_entry *fast = &fast_address_table[entry - keyed_entries];
+    NTSTATUS status = STATUS_SUCCESS;
 
-    InterlockedIncrement( futex );
+    if (!use_futexes()) return STATUS_NOT_IMPLEMENTED;
 
-    futex_wake( futex, INT_MAX );
+    if ((status = futex_cs_enter( &fast->wait_cs, NULL ))) return status;
+    InterlockedIncrement( &fast->signal );
+    futex_wake( &fast->signal, all ? INT_MAX : 1 );
+    futex_cs_leave( &fast->wait_cs );
     return STATUS_SUCCESS;
 }
 
@@ -2971,13 +2953,12 @@ static inline NTSTATUS fast_release_keyed_event( struct keyed_entry *entry, cons
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static inline NTSTATUS fast_wait_addr( const void *addr, const void *cmp, SIZE_T size,
-                                       const LARGE_INTEGER *timeout )
+static inline NTSTATUS fast_wait_on_address( struct keyed_entry *entry, const LARGE_INTEGER *timeout, const void *addr, const void *cmp, SIZE_T size )
 {
     return STATUS_NOT_IMPLEMENTED;
 }
 
-static inline NTSTATUS fast_wake_addr( const void *addr )
+static inline NTSTATUS fast_wake_address( struct keyed_entry *entry, BOOLEAN all )
 {
     return STATUS_NOT_IMPLEMENTED;
 }
@@ -2991,6 +2972,7 @@ static inline NTSTATUS fast_wake_addr( const void *addr )
 NTSTATUS WINAPI RtlWaitOnAddress( const void *addr, const void *cmp, SIZE_T size,
                                   const LARGE_INTEGER *timeout )
 {
+    struct keyed_entry *entry;
     select_op_t select_op;
     NTSTATUS ret;
     timeout_t abs_timeout = timeout ? timeout->QuadPart : TIMEOUT_INFINITE;
@@ -2998,30 +2980,33 @@ NTSTATUS WINAPI RtlWaitOnAddress( const void *addr, const void *cmp, SIZE_T size
     if (size != 1 && size != 2 && size != 4 && size != 8)
         return STATUS_INVALID_PARAMETER;
 
-    if ((ret = fast_wait_addr( addr, cmp, size, timeout )) != STATUS_NOT_IMPLEMENTED)
-        return ret;
-
-    mutex_lock( &addr_mutex );
-    if (!compare_addr( addr, cmp, size ))
+    entry = keyed_entry_acquire( 0, ~wine_server_client_ptr( addr ), FALSE );
+    if ((ret = fast_wait_on_address( entry, timeout, addr, cmp, size )) == STATUS_NOT_IMPLEMENTED)
     {
-        mutex_unlock( &addr_mutex );
-        return STATUS_SUCCESS;
-    }
+        mutex_lock( &addr_mutex );
+        if (!compare_addr( addr, cmp, size ))
+        {
+            mutex_unlock( &addr_mutex );
+            return STATUS_SUCCESS;
+        }
 
-    if (abs_timeout < 0)
-    {
-        LARGE_INTEGER now;
+        if (abs_timeout < 0)
+        {
+            LARGE_INTEGER now;
 
-        NtQueryPerformanceCounter( &now, NULL );
-        abs_timeout -= now.QuadPart;
-    }
+            NtQueryPerformanceCounter( &now, NULL );
+            abs_timeout -= now.QuadPart;
+        }
 
-    select_op.keyed_event.op     = SELECT_KEYED_EVENT_WAIT;
-    select_op.keyed_event.handle = wine_server_obj_handle( keyed_event );
-    select_op.keyed_event.key    = ~wine_server_client_ptr( addr );
+        select_op.keyed_event.op     = SELECT_KEYED_EVENT_WAIT;
+        select_op.keyed_event.handle = wine_server_obj_handle( keyed_event );
+        select_op.keyed_event.key    = entry->key;
 
-    return server_select( &select_op, sizeof(select_op.keyed_event), SELECT_INTERRUPTIBLE,
-                          abs_timeout, NULL, &addr_mutex, NULL );
+        ret = server_select( &select_op, sizeof(select_op.keyed_event), SELECT_INTERRUPTIBLE,
+                             abs_timeout, NULL, &addr_mutex, NULL );
+    }
+    keyed_entry_release( entry );
+    return ret;
 }
 
 /***********************************************************************
@@ -3029,18 +3014,23 @@ NTSTATUS WINAPI RtlWaitOnAddress( const void *addr, const void *cmp, SIZE_T size
  */
 void WINAPI RtlWakeAddressAll( const void *addr )
 {
+    struct keyed_entry *entry;
     select_op_t select_op;
-    if (fast_wake_addr( addr ) != STATUS_NOT_IMPLEMENTED) return;
 
-    mutex_lock( &addr_mutex );
-    do
+    entry = keyed_entry_acquire( 0, ~wine_server_client_ptr( addr ), FALSE );
+    if (fast_wake_address( entry, TRUE ) == STATUS_NOT_IMPLEMENTED)
     {
-        select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
-        select_op.keyed_event.handle = wine_server_obj_handle( keyed_event );
-        select_op.keyed_event.key    = ~wine_server_client_ptr( addr );
+        mutex_lock( &addr_mutex );
+        do
+        {
+            select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
+            select_op.keyed_event.handle = wine_server_obj_handle( keyed_event );
+            select_op.keyed_event.key    = entry->key;
+        }
+        while (!server_wait( &select_op, sizeof(select_op.keyed_event), SELECT_INTERRUPTIBLE, &zero_timeout ));
+        mutex_unlock( &addr_mutex );
     }
-    while (!server_wait( &select_op, sizeof(select_op.keyed_event), SELECT_INTERRUPTIBLE, &zero_timeout ));
-    mutex_unlock( &addr_mutex );
+    keyed_entry_release( entry );
 }
 
 /***********************************************************************
@@ -3048,13 +3038,18 @@ void WINAPI RtlWakeAddressAll( const void *addr )
  */
 void WINAPI RtlWakeAddressSingle( const void *addr )
 {
+    struct keyed_entry *entry;
     select_op_t select_op;
-    if (fast_wake_addr( addr ) != STATUS_NOT_IMPLEMENTED) return;
-
-    mutex_lock( &addr_mutex );
-    select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
-    select_op.keyed_event.handle = wine_server_obj_handle( keyed_event );
-    select_op.keyed_event.key    = ~wine_server_client_ptr( addr );
-    server_wait( &select_op, sizeof(select_op.keyed_event), SELECT_INTERRUPTIBLE, &zero_timeout );
-    mutex_unlock( &addr_mutex );
+
+    entry = keyed_entry_acquire( 0, ~wine_server_client_ptr( addr ), FALSE );
+    if (fast_wake_address( entry, FALSE ) == STATUS_NOT_IMPLEMENTED)
+    {
+        mutex_lock( &addr_mutex );
+        select_op.keyed_event.op     = SELECT_KEYED_EVENT_RELEASE;
+        select_op.keyed_event.handle = wine_server_obj_handle( keyed_event );
+        select_op.keyed_event.key    = entry->key;
+        server_wait( &select_op, sizeof(select_op.keyed_event), SELECT_INTERRUPTIBLE, &zero_timeout );
+        mutex_unlock( &addr_mutex );
+    }
+    keyed_entry_release( entry );
 }
-- 
2.32.0

