From: Paul Gofman <pgofman@codeweavers.com>
Subject: [PATCH v2] kernelbase: Implement GetFileInformationByHandleEx(FileFullDirectoryInfo).
Message-Id: <20220209153313.35011-1-pgofman@codeweavers.com>
Date: Wed,  9 Feb 2022 18:33:13 +0300

Signed-off-by: Paul Gofman <pgofman@codeweavers.com>
---
v2:
     - fix test failures on Win7.

 dlls/kernel32/tests/file.c | 75 ++++++++++++++++++++++++++++++++++----
 1 file changed, 68 insertions(+), 7 deletions(-)

diff --git a/dlls/kernel32/tests/file.c b/dlls/kernel32/tests/file.c
index 11111111111..11111111111 100644
--- a/dlls/kernel32/tests/file.c
+++ b/dlls/kernel32/tests/file.c
@@ -4173,11 +4173,13 @@ static void test_CreateFile(void)
 static void test_GetFileInformationByHandleEx(void)
 {
     int i;
-    char tempPath[MAX_PATH], tempFileName[MAX_PATH], buffer[1024], *strPtr;
-    BOOL ret;
+    char tempPath[MAX_PATH], tempFileName[MAX_PATH], buffer[1024], buffer2[1024], *strPtr;
+    BOOL first, ret;
     DWORD ret2, written;
+    unsigned int count, count2, size;
     HANDLE directory, file;
     FILE_ID_BOTH_DIR_INFO *bothDirInfo;
+    FILE_FULL_DIR_INFO *full_dir_info;
     FILE_BASIC_INFO *basicInfo;
     FILE_STANDARD_INFO *standardInfo;
     FILE_NAME_INFO *nameInfo;
@@ -4187,17 +4189,26 @@ static void test_GetFileInformationByHandleEx(void)
     FILE_DISPOSITION_INFO dispinfo;
     FILE_END_OF_FILE_INFO eofinfo;
     FILE_RENAME_INFO renameinfo;
+    BOOL full_dir_info_supported;
 
-    struct {
+    struct
+    {
         FILE_INFO_BY_HANDLE_CLASS handleClass;
         void *ptr;
         DWORD size;
         DWORD errorCode;
-    } checks[] = {
+        BOOL not_always_supported;
+    }
+    checks[] =
+    {
         {0xdeadbeef, NULL, 0, ERROR_INVALID_PARAMETER},
         {FileIdBothDirectoryInfo, NULL, 0, ERROR_BAD_LENGTH},
         {FileIdBothDirectoryInfo, NULL, sizeof(buffer), ERROR_NOACCESS},
-        {FileIdBothDirectoryInfo, buffer, 0, ERROR_BAD_LENGTH}};
+        {FileIdBothDirectoryInfo, buffer, 0, ERROR_BAD_LENGTH},
+        {FileFullDirectoryInfo, NULL, 0, ERROR_BAD_LENGTH, TRUE},
+        {FileFullDirectoryInfo, NULL, sizeof(buffer), ERROR_NOACCESS},
+        {FileFullDirectoryInfo, buffer, 0, ERROR_BAD_LENGTH},
+    };
 
     if (!pGetFileInformationByHandleEx)
     {
@@ -4224,10 +4235,17 @@ static void test_GetFileInformationByHandleEx(void)
     {
         SetLastError(0xdeadbeef);
         ret = pGetFileInformationByHandleEx(directory, checks[i].handleClass, checks[i].ptr, checks[i].size);
+        if (checks[i].not_always_supported && !ret && GetLastError() == ERROR_INVALID_PARAMETER)
+        {
+            win_skip("class %u is not supported, skipping the rest.\n", checks[i].handleClass);
+            break;
+        }
         ok(!ret && GetLastError() == checks[i].errorCode, "GetFileInformationByHandleEx: expected error %lu, "
            "got %lu.\n", checks[i].errorCode, GetLastError());
     }
+    full_dir_info_supported = (i == ARRAY_SIZE(checks));
 
+    first = TRUE;
     while (TRUE)
     {
         memset(buffer, 0xff, sizeof(buffer));
@@ -4235,8 +4253,51 @@ static void test_GetFileInformationByHandleEx(void)
         if (!ret && GetLastError() == ERROR_NO_MORE_FILES)
             break;
         ok(ret, "GetFileInformationByHandleEx: failed to query for FileIdBothDirectoryInfo, got error %lu.\n", GetLastError());
-        if (!ret)
-            break;
+
+        if (full_dir_info_supported && first)
+        {
+            count = 1;
+            bothDirInfo = (FILE_ID_BOTH_DIR_INFO *)buffer;
+            while (bothDirInfo->NextEntryOffset)
+            {
+                ++count;
+                size = offsetof(FILE_ID_BOTH_DIR_INFO, FileName[bothDirInfo->FileNameLength / 2]);
+                size = (size + 7) & ~7;
+                ok(bothDirInfo->NextEntryOffset == size,
+                        "Got unexpected structure size, NextEntryOffset %u (%u).\n", bothDirInfo->NextEntryOffset,
+                        size);
+                bothDirInfo = (FILE_ID_BOTH_DIR_INFO *)(((char *)bothDirInfo) + bothDirInfo->NextEntryOffset);
+            }
+            size = offsetof(FILE_FULL_DIR_INFO, FileName[bothDirInfo->FileNameLength / 2]);
+            ret = pGetFileInformationByHandleEx(directory, FileFullDirectoryRestartInfo, buffer2, sizeof(buffer2));
+            ok(ret, "failed to query for FileFullDirectoryInfo, got error %lu.\n", GetLastError());
+
+            count2 = 0;
+            bothDirInfo = (FILE_ID_BOTH_DIR_INFO *)buffer;
+            full_dir_info = (FILE_FULL_DIR_INFO *)buffer2;
+            while (1)
+            {
+                ++count2;
+                ok(bothDirInfo->FileNameLength == full_dir_info->FileNameLength,
+                        "FileNameLength does not match, count2 %u.\n", count2);
+                ok(!memcmp(bothDirInfo->FileName, full_dir_info->FileName, full_dir_info->FileNameLength),
+                        "FileName does not match, count %u.\n", count2);
+
+                if (!full_dir_info->NextEntryOffset || !bothDirInfo->NextEntryOffset)
+                    break;
+
+                size = offsetof(FILE_FULL_DIR_INFO, FileName[full_dir_info->FileNameLength / 2]);
+                size = (size + 7) & ~7;
+                ok(full_dir_info->NextEntryOffset == size,
+                        "Got unexpected structure size, NextEntryOffset %u (%u).\n", bothDirInfo->NextEntryOffset,
+                        size);
+                full_dir_info = (FILE_FULL_DIR_INFO *)(((char *)full_dir_info) + full_dir_info->NextEntryOffset);
+                bothDirInfo = (FILE_ID_BOTH_DIR_INFO *)(((char *)bothDirInfo) + bothDirInfo->NextEntryOffset);
+            }
+            ok(count2 == count, "Got unexpected count2 %u, count %u.\n", count2, count);
+            first = FALSE;
+        }
+
         bothDirInfo = (FILE_ID_BOTH_DIR_INFO *)buffer;
         while (TRUE)
         {

-- 
2.39.0

