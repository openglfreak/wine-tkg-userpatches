From 1cf26abbab31fad50f6cec794a4f3279c7aaa321 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 26 Jan 2021 09:49:23 +0100
Subject: [PATCH 14/18] winex11.drv: Clip cursor in the desktop thread.

---
# dlls/winex11.drv/event.c  |   6 +-
 dlls/winex11.drv/mouse.c  | 114 +++++++++-----------------------------
 dlls/winex11.drv/window.c |   6 +-
 dlls/winex11.drv/x11drv.h |   4 --
 4 files changed, 31 insertions(+), 99 deletions(-)

#diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
#index bd4fea95ccb..14acc543260 100644
#--- a/dlls/winex11.drv/event.c
#+++ b/dlls/winex11.drv/event.c
#@@ -628,8 +628,8 @@ static void set_focus( XEvent *xev, HWND hwnd, Time time )
# 
#     if (!try_grab_pointer( xev->xany.display ))
#     {
#-        /* ask the foreground window to release its grab before trying to get ours */
#-        SendMessageW( GetForegroundWindow(), WM_X11DRV_RELEASE_CURSOR, 0, 0 );
#+        /* ask the desktop window to release its grab before trying to get ours */
#+        SendMessageW( GetDesktopWindow(), WM_X11DRV_RELEASE_CURSOR, 0, 0 );
#         XSendEvent( xev->xany.display, xev->xany.window, False, 0, xev );
#         return;
#     }
#@@ -937,7 +937,7 @@ static BOOL X11DRV_FocusOut( HWND hwnd, XEvent *xev )
#     }
#     if (!hwnd) return FALSE;
# 
#-    if (hwnd == GetForegroundWindow()) ungrab_clipping_window();
#+    if (hwnd == GetForegroundWindow()) SendNotifyMessageW( GetDesktopWindow(), WM_X11DRV_RELEASE_CURSOR, 0, 0 );
# 
#     /* ignore wm specific NotifyUngrab / NotifyGrab events w.r.t focus */
#     if (event->mode == NotifyGrab || event->mode == NotifyUngrab) return FALSE;
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 170d14735fb..d45aa1e08a3 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -451,43 +451,44 @@ static BOOL grab_clipping_window( const RECT *clip )
 {
     static const WCHAR messageW[] = {'M','e','s','s','a','g','e',0};
     struct x11drv_thread_data *data = x11drv_thread_data();
-    HCURSOR cursor;
+    CURSORINFO pci;
     Window clip_window;
-    HWND msg_hwnd = 0;
     POINT pos;
 
-    if (GetWindowThreadProcessId( GetDesktopWindow(), NULL ) == GetCurrentThreadId())
-        return TRUE;  /* don't clip in the desktop process */
-
     if (!data) return FALSE;
     if (!(clip_window = init_clip_window())) return TRUE;
 
-    if (!(msg_hwnd = CreateWindowW( messageW, NULL, 0, 0, 0, 0, 0, HWND_MESSAGE, 0,
+    if (!data->clip_hwnd &&
+        !(data->clip_hwnd = CreateWindowW( messageW, NULL, 0, 0, 0, 0, 0, HWND_MESSAGE, 0,
                                     GetModuleHandleW(0), NULL )))
         return TRUE;
 
-    /* enable XInput2 unless we are already clipping */
-    if (!data->clip_hwnd) X11DRV_XInput2_Enable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
-
+    if (data->xi2_state != xi_enabled) X11DRV_XInput2_Enable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
     if (data->xi2_state != xi_enabled)
     {
         WARN( "XInput2 not supported, refusing to clip to %s\n", wine_dbgstr_rect(clip) );
-        DestroyWindow( msg_hwnd );
+        DestroyWindow( data->clip_hwnd );
+        data->clip_hwnd = NULL;
         ClipCursor( NULL );
         return TRUE;
     }
 
     TRACE( "clipping to %s win %lx\n", wine_dbgstr_rect(clip), clip_window );
 
-    if (!data->clip_hwnd) XUnmapWindow( data->display, clip_window );
     pos = virtual_screen_to_root( clip->left, clip->top );
     XMoveResizeWindow( data->display, clip_window, pos.x, pos.y,
                        max( 1, clip->right - clip->left ), max( 1, clip->bottom - clip->top ) );
-    XMapWindow( data->display, clip_window );
-    clip_window_mapped = TRUE;
+
+    if (!clipping_cursor)
+    {
+        XMapWindow( data->display, clip_window );
+        clip_window_mapped = TRUE;
+        GetCursorInfo( &pci );
+        set_window_cursor( clip_window, (pci.flags & CURSOR_SHOWING) ? pci.hCursor : 0 );
+    }
 
     /* if the rectangle is shrinking we may get a pointer warp */
-    if (!data->clip_hwnd || clip->left > clip_rect.left || clip->top > clip_rect.top ||
+    if (!clipping_cursor || clip->left > clip_rect.left || clip->top > clip_rect.top ||
         clip->right < clip_rect.right || clip->bottom < clip_rect.bottom)
         data->warp_serial = NextRequest( data->display );
 
@@ -508,29 +508,15 @@ static BOOL grab_clipping_window( const RECT *clip )
                        GrabModeAsync, GrabModeAsync, clip_window, None, CurrentTime ))
         clipping_cursor = TRUE;
 
-    SERVER_START_REQ( set_cursor )
-    {
-        req->flags = 0;
-        wine_server_call( req );
-        cursor = reply->prev_count >= 0 ? wine_server_ptr_handle( reply->prev_handle ) : 0;
-    }
-    SERVER_END_REQ;
-    set_window_cursor( clip_window, cursor );
-
     if (!clipping_cursor)
     {
         X11DRV_XInput2_Disable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
-        DestroyWindow( msg_hwnd );
+        XUnmapWindow( data->display, clip_window );
+        DestroyWindow( data->clip_hwnd );
+        data->clip_hwnd = NULL;
-
-        /* we couldn't grab the cursor yet and we won't get notified when it
-         * is released, so we have to retry again a little bit later */
-        Sleep(100);
-        PostMessageW( GetForegroundWindow(), WM_X11DRV_CLIP_CURSOR_NOTIFY, 0, 0 );
         return FALSE;
     }
     clip_rect = *clip;
-    data->clip_hwnd = msg_hwnd;
-    SendNotifyMessageW( GetDesktopWindow(), WM_X11DRV_CLIP_CURSOR_NOTIFY, 0, (LPARAM)msg_hwnd );
     return TRUE;
 }
 
@@ -537,16 +528,18 @@ static BOOL grab_clipping_window( const RECT *clip )
  */
 void ungrab_clipping_window(void)
 {
-    Display *display = thread_init_display();
+    struct x11drv_thread_data *data = x11drv_init_thread_data();
     Window clip_window = init_clip_window();
 
     if (!clip_window) return;
 
     TRACE( "no longer clipping\n" );
-    if (clip_window_mapped) XUnmapWindow( display, clip_window );
+    if (clip_window_mapped) XUnmapWindow( data->display, clip_window );
     clip_window_mapped = FALSE;
     clipping_cursor = FALSE;
-    SendNotifyMessageW( GetDesktopWindow(), WM_X11DRV_CLIP_CURSOR_NOTIFY, 0, 0 );
+    if (data->clip_hwnd) DestroyWindow( data->clip_hwnd );
+    data->clip_hwnd = NULL;
+    data->clip_reset = GetTickCount();
 }
 
 /***********************************************************************
@@ -560,43 +553,6 @@ void reset_clipping_window(void)
     ClipCursor( NULL );  /* make sure the clip rectangle is reset too */
 }
 
-/***********************************************************************
- *             clip_cursor_notify
- *
- * Notification function called upon receiving a WM_X11DRV_CLIP_CURSOR_NOTIFY.
- */
-LRESULT clip_cursor_notify( HWND hwnd, HWND prev_clip_hwnd, HWND new_clip_hwnd )
-{
-    struct x11drv_thread_data *data = x11drv_init_thread_data();
-
-    if (hwnd == GetDesktopWindow())  /* change the clip window stored in the desktop process */
-    {
-        static HWND clip_hwnd;
-
-        HWND prev = clip_hwnd;
-        clip_hwnd = new_clip_hwnd;
-        if (prev || new_clip_hwnd) TRACE( "clip hwnd changed from %p to %p\n", prev, new_clip_hwnd );
-        if (prev) SendNotifyMessageW( prev, WM_X11DRV_CLIP_CURSOR_NOTIFY, (WPARAM)prev, 0 );
-    }
-    else if (hwnd == data->clip_hwnd)  /* this is a notification that clipping has been reset */
-    {
-        TRACE( "clip hwnd reset from %p\n", hwnd );
-        data->clip_hwnd = 0;
-        data->clip_reset = GetTickCount();
-        X11DRV_XInput2_Disable( data->display, DefaultRootWindow( data->display ), PointerMotionMask );
-        DestroyWindow( hwnd );
-    }
-    else if (prev_clip_hwnd)
-    {
-        /* This is a notification send by the desktop window to an old
-         * dangling clip window.
-         */
-        TRACE( "destroying old clip hwnd %p\n", prev_clip_hwnd );
-        DestroyWindow( prev_clip_hwnd );
-    }
-    return 0;
-}
-
 /***********************************************************************
  *		clip_fullscreen_window
  *
@@ -1587,26 +1543,12 @@ BOOL CDECL X11DRV_ClipCursor( LPCRECT clip )
  * Function called upon receiving a WM_X11DRV_DESKTOP_CLIP_CURSOR.
  */
 void x11drv_desktop_clip_cursor( BOOL fullscreen, BOOL reset )
-{
-    SendNotifyMessageW( GetForegroundWindow(), WM_X11DRV_CLIP_CURSOR_REQUEST, fullscreen, reset );
-}
-
-/***********************************************************************
- *             clip_cursor_request
- *
- * Function called upon receiving a WM_X11DRV_CLIP_CURSOR_REQUEST.
- */
-LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset )
 {
     RECT clip, virtual_rect;
     HWND foreground = GetForegroundWindow();
 
-    if (hwnd == GetDesktopWindow())
-        WARN( "ignoring clip cursor request on desktop window.\n" );
-    else if (hwnd != foreground)
-        WARN( "ignoring clip cursor request on non-foreground window.\n" );
-    else if (fullscreen)
-        clip_fullscreen_window( hwnd, reset );
+    if (fullscreen)
+        clip_fullscreen_window( foreground, reset );
     else if (!grab_pointer)
         ungrab_clipping_window();
     else
@@ -1619,7 +1561,7 @@ LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset )
         if (clip.left > virtual_rect.left || clip.right < virtual_rect.right ||
             clip.top > virtual_rect.top || clip.bottom < virtual_rect.bottom)
         {
-            if (grab_clipping_window( &clip )) return 0;
+            if (grab_clipping_window( &clip )) return;
         }
         else /* if currently clipping, check if we should switch to fullscreen clipping */
         {
@@ -1627,14 +1569,12 @@ LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset )
             if (data)
             {
                 if ((data->clip_hwnd && EqualRect( &clip, &clip_rect ) && !EqualRect(&clip_rect, &virtual_rect)) || clip_fullscreen_window( foreground, TRUE ))
-                    return TRUE;
+                    return;
             }
         }
 
         ungrab_clipping_window();
     }
-
-    return 0;
 }
 
 /***********************************************************************
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 0e0a8509631..536c5f6fa6d 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -3131,21 +3131,17 @@ LRESULT CDECL X11DRV_WindowMessage( HWND hwnd, UINT msg, WPARAM wp, LPARAM lp )
             release_win_data( data );
             if (win) set_window_cursor( win, (HCURSOR)lp );
         }
-        if (clipping_cursor) set_window_cursor( x11drv_thread_data()->clip_window, (HCURSOR)lp );
         return 0;
     case WM_X11DRV_DESKTOP_SET_HICON_CURSOR:
         x11drv_desktop_set_hicon_cursor( (HICON)wp, (Cursor)lp );
         return 0;
     case WM_X11DRV_DESKTOP_SET_WINDOW_CURSOR:
+        if (clipping_cursor) set_window_cursor( x11drv_thread_data()->clip_window, (HCURSOR)lp );
         SendNotifyMessageW( (HWND)wp, WM_X11DRV_SET_CURSOR, 0, lp );
         return 0;
     case WM_X11DRV_DESKTOP_CLIP_CURSOR:
         x11drv_desktop_clip_cursor( (BOOL)wp, (BOOL)lp );
         return 0;
-    case WM_X11DRV_CLIP_CURSOR_NOTIFY:
-        return clip_cursor_notify( hwnd, (HWND)wp, (HWND)lp );
-    case WM_X11DRV_CLIP_CURSOR_REQUEST:
-        return clip_cursor_request( hwnd, (BOOL)wp, (BOOL)lp );
     case WM_X11DRV_DROPEVENT:
         X11DRV_XDND_DropEventProcess( hwnd );
         return 0;
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 490be228530..56cc8db8b5c 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -551,8 +551,6 @@ enum x11drv_window_messages
     WM_X11DRV_DESKTOP_SET_HICON_CURSOR,
     WM_X11DRV_DESKTOP_SET_WINDOW_CURSOR,
     WM_X11DRV_DESKTOP_CLIP_CURSOR,
-    WM_X11DRV_CLIP_CURSOR_NOTIFY,
-    WM_X11DRV_CLIP_CURSOR_REQUEST,
     WM_X11DRV_DROPEVENT
 };
 
@@ -666,8 +664,6 @@ extern XContext cursor_context DECLSPEC_HIDDEN;
 extern void X11DRV_InitClipboard(void) DECLSPEC_HIDDEN;
 extern void CDECL X11DRV_SetFocus( HWND hwnd ) DECLSPEC_HIDDEN;
 extern void set_window_cursor( Window window, HCURSOR handle ) DECLSPEC_HIDDEN;
-extern LRESULT clip_cursor_notify( HWND hwnd, HWND prev_clip_hwnd, HWND new_clip_hwnd ) DECLSPEC_HIDDEN;
-extern LRESULT clip_cursor_request( HWND hwnd, BOOL fullscreen, BOOL reset ) DECLSPEC_HIDDEN;
 extern void x11drv_desktop_clip_cursor( BOOL fullscreen, BOOL reset ) DECLSPEC_HIDDEN;
 extern void ungrab_clipping_window(void) DECLSPEC_HIDDEN;
 extern void reset_clipping_window(void) DECLSPEC_HIDDEN;

