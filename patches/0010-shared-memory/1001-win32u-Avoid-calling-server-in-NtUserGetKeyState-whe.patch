From 51a1db2755be4edf30c6ba523f79c7d890fd9246 Mon Sep 17 00:00:00 2001
From: Paul Gofman <gofmanp@gmail.com>
Date: Thu, 12 Jan 2023 19:02:11 -0600
Subject: [PATCH 1001/1] win32u: Avoid calling server in NtUserGetKeyState() when
 input keystate is in sync.

CW-Bug-Id: #21761
---
 dlls/win32u/input.c | 16 ++++++++++++++--
 server/protocol.def |  2 ++
 server/queue.c      |  4 ++++
 server/winstation.c |  6 +++++-
 4 files changed, 25 insertions(+), 3 deletions(-)

diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -925,6 +925,7 @@ HKL WINAPI NtUserGetKeyboardLayout( DWORD thread_id )
 SHORT WINAPI NtUserGetKeyState( INT vkey )
 {
     volatile struct input_shared_memory *shared = get_input_shared_memory();
+    volatile struct desktop_shared_memory *desktop_shared;
     SHORT retval = 0;
     BOOL skip = TRUE;
 
@@ -932,8 +933,19 @@ SHORT WINAPI NtUserGetKeyState( INT vkey )
     else SHARED_READ_BEGIN( &shared->seq )
     {
         if (!shared->created) skip = FALSE; /* server needs to create the queue */
-        else if (!shared->keystate_lock) skip = FALSE; /* server needs to call sync_input_keystate */
-        else retval = (signed char)(shared->keystate[vkey & 0xff] & 0x81);
+        else if (!shared->keystate_lock)
+        {
+            desktop_shared = get_desktop_shared_memory();
+            if (!desktop_shared) skip = FALSE;
+            else SHARED_READ_BEGIN( &desktop_shared->seq )
+            {
+                if (shared->sync_serial != desktop_shared->update_serial)
+                    skip = FALSE; /* server needs to call sync_input_keystate */
+            }
+            SHARED_READ_END( &desktop_shared->seq );
+        }
+        if (skip)
+            retval = (signed char)(shared->keystate[vkey & 0xff] & 0x81);
     }
     SHARED_READ_END( &shared->seq );
 
diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -912,6 +912,7 @@ struct desktop_shared_memory
     struct shared_cursor cursor;           /* global cursor information */
     unsigned char        keystate[256];    /* asynchronous key state */
     thread_id_t          foreground_tid;   /* tid of the foreground thread */
+    __int64              update_serial;
 };
 
 struct queue_shared_memory
@@ -941,6 +942,7 @@ struct input_shared_memory
     int                  cursor_count;     /* cursor show count */
     unsigned char        keystate[256];    /* key state */
     int                  keystate_lock;    /* keystate is locked */
+    __int64              sync_serial;
 };
 
 /* Bits that must be clear for client to read */
diff --git a/server/queue.c b/server/queue.c
index 11111111111..11111111111 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -419,6 +419,7 @@ static void sync_input_keystate( struct thread_input *input )
         if (input->desktop_keystate[i] == input->desktop->shared->keystate[i]) continue;
         input->shared->keystate[i] = input->desktop_keystate[i] = input->desktop->shared->keystate[i];
     }
+    input->shared->sync_serial = input->desktop->shared->update_serial;
     SHARED_WRITE_END( &input->shared->seq );
 }
 
@@ -1731,6 +1732,7 @@ static void update_input_key_state( struct thread_input *input, unsigned int msg
 static void update_desktop_key_state( struct desktop *desktop, unsigned int msg, lparam_t wparam )
 {
     SHARED_WRITE_BEGIN( &desktop->shared->seq );
+    ++desktop->shared->update_serial;
     update_key_state( desktop->shared->keystate, msg, wparam, 1 );
     SHARED_WRITE_END( &desktop->shared->seq );
 }
@@ -3475,6 +3477,7 @@ DECL_HANDLER(get_key_state)
         {
             reply->state = desktop->shared->keystate[req->key & 0xff];
             SHARED_WRITE_BEGIN( &desktop->shared->seq );
+            ++desktop->shared->update_serial;
             desktop->shared->keystate[req->key & 0xff] &= ~0x40;
             SHARED_WRITE_END( &desktop->shared->seq );
         }
@@ -3510,6 +3513,7 @@ DECL_HANDLER(set_key_state)
     if (req->async && (desktop = get_thread_desktop( current, 0 )))
     {
         SHARED_WRITE_BEGIN( &desktop->shared->seq );
+        ++desktop->shared->update_serial;
         memcpy( (void *)desktop->shared->keystate, get_req_data(), size );
         SHARED_WRITE_END( &desktop->shared->seq );
         release_object( desktop );
diff --git a/server/winstation.c b/server/winstation.c
index 11111111111..11111111111 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -235,7 +235,11 @@ static volatile void *init_desktop_mapping( struct desktop *desktop, const struc
     desktop->shared_mapping = create_shared_mapping( dir, name, sizeof(struct desktop_shared_memory),
                                                      NULL, (void **)&desktop->shared );
     release_object( dir );
-    if (desktop->shared_mapping) memset( (void *)desktop->shared, 0, sizeof(*desktop->shared) );
+    if (desktop->shared_mapping)
+    {
+        memset( (void *)desktop->shared, 0, sizeof(*desktop->shared) );
+        desktop->shared->update_serial = 1;
+    }
     return desktop->shared;
 }
 
