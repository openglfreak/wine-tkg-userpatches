From fd88725ae9127e7d4e63e089037e6decff552986 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 22 Feb 2022 21:14:28 +0100
Subject: [PATCH 27/35] winegstreamer: Introduce and instantiate a new
 WgBufferPool pool.

For: Call of Duty III, Mortal Kombat 11, Shadow Warrior 2,
Yakuza 4 Remastered, Hard Reset Redux.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=45988
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=47084
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49715
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52183
CW-Bug-Id: #16839
CW-Bug-Id: #18678
CW-Bug-Id: #19362
---
 dlls/winegstreamer/Makefile.in    |   1 +
 dlls/winegstreamer/unix_private.h |   3 +
 dlls/winegstreamer/wg_pool.c      | 113 ++++++++++++++++++++++++++++++
 dlls/winegstreamer/wg_transform.c |   6 ++
 4 files changed, 123 insertions(+)
 create mode 100644 dlls/winegstreamer/wg_pool.c

diff --git a/dlls/winegstreamer/Makefile.in b/dlls/winegstreamer/Makefile.in
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/Makefile.in
+++ b/dlls/winegstreamer/Makefile.in
@@ -15,6 +15,7 @@ C_SRCS = \
 	quartz_parser.c \
 	wg_format.c \
 	wg_parser.c \
+	wg_pool.c \
 	wg_transform.c \
 	wm_asyncreader.c \
 	wm_reader.c \
diff --git a/dlls/winegstreamer/unix_private.h b/dlls/winegstreamer/unix_private.h
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/unix_private.h
+++ b/dlls/winegstreamer/unix_private.h
@@ -39,4 +39,7 @@ extern NTSTATUS wg_transform_destroy(void *args) DECLSPEC_HIDDEN;
 extern NTSTATUS wg_transform_push_data(void *args) DECLSPEC_HIDDEN;
 extern NTSTATUS wg_transform_read_data(void *args) DECLSPEC_HIDDEN;
 
+extern GstBufferPool *wg_pool_create(void) DECLSPEC_HIDDEN;
+extern void wg_pool_destroy(GstBufferPool *gst_pool) DECLSPEC_HIDDEN;
+
 #endif /* __WINE_WINEGSTREAMER_UNIX_PRIVATE_H */
diff --git a/dlls/winegstreamer/wg_pool.c b/dlls/winegstreamer/wg_pool.c
new file mode 100644
index 00000000000..11111111111
--- /dev/null
+++ b/dlls/winegstreamer/wg_pool.c
@@ -0,0 +1,113 @@
+/*
+ * GStreamer buffer pool backend
+ *
+ * Copyright 2022 RÃ©mi Bernon for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#if 0
+#pragma makedep unix
+#endif
+
+#include "config.h"
+
+#include <assert.h>
+#include <stdarg.h>
+
+#include <gst/gst.h>
+#include <gst/video/video.h>
+
+#include "unix_private.h"
+
+GST_DEBUG_CATEGORY_EXTERN(wine);
+#define GST_CAT_DEFAULT wine
+
+typedef struct
+{
+    GstVideoBufferPool parent;
+} WgBufferPool;
+
+typedef struct
+{
+    GstVideoBufferPoolClass parent_class;
+} WgBufferPoolClass;
+
+G_DEFINE_TYPE(WgBufferPool, wg_pool, GST_TYPE_VIDEO_BUFFER_POOL);
+
+static GstFlowReturn wg_pool_alloc_buffer(GstBufferPool *gst_pool, GstBuffer **buffer,
+        GstBufferPoolAcquireParams *params)
+{
+    WgBufferPool *pool = (WgBufferPool *)gst_pool;
+
+    GST_FIXME("pool %p, buffer %p, params %p, stub!", pool, buffer, params);
+
+    return GST_FLOW_ERROR;
+}
+
+static void wg_pool_free_buffer(GstBufferPool *gst_pool, GstBuffer *buffer)
+{
+    WgBufferPool *pool = (WgBufferPool *)gst_pool;
+
+    GST_FIXME("pool %p, buffer %p, stub!", pool, buffer);
+}
+
+static void wg_pool_init(WgBufferPool *pool)
+{
+    GST_LOG("pool %p", pool);
+}
+
+static void wg_pool_finalize(GObject *object)
+{
+    WgBufferPool *pool = (WgBufferPool *)object;
+
+    GST_LOG("pool %p", pool);
+
+    G_OBJECT_CLASS(wg_pool_parent_class)->finalize(object);
+}
+
+static void wg_pool_class_init(WgBufferPoolClass *klass)
+{
+    GstBufferPoolClass *base_class = (GstBufferPoolClass *)klass;
+    GObjectClass *root_class = (GObjectClass *)klass;
+
+    GST_LOG("klass %p", klass);
+
+    base_class->alloc_buffer = wg_pool_alloc_buffer;
+    base_class->free_buffer = wg_pool_free_buffer;
+    root_class->finalize = wg_pool_finalize;
+}
+
+GstBufferPool *wg_pool_create(void)
+{
+    GstBufferPool *gst_pool;
+    WgBufferPool *pool;
+
+    if (!(pool = g_object_new(wg_pool_get_type(), NULL)))
+        return NULL;
+    gst_pool = GST_BUFFER_POOL(pool);
+
+    GST_LOG("Created buffer pool %p", pool);
+    return gst_pool;
+}
+
+void wg_pool_destroy(GstBufferPool *gst_pool)
+{
+    WgBufferPool *pool = (WgBufferPool *)gst_pool;
+
+    GST_DEBUG("pool %p", pool);
+
+    g_object_unref(pool);
+}
diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -61,6 +61,7 @@ struct wg_transform
     pthread_mutex_t mutex;
     struct list samples;
     GstCaps *sink_caps;
+    GstBufferPool *pool;
 };
 
 static GstFlowReturn transform_sink_chain_cb(GstPad *pad, GstObject *parent, GstBuffer *buffer)
@@ -124,6 +125,7 @@ NTSTATUS wg_transform_destroy(void *args)
     struct wg_transform *transform = args;
     struct sample_entry *entry, *next;
 
+    wg_pool_destroy(transform->pool);
     gst_element_set_state(transform->container, GST_STATE_NULL);
     LIST_FOR_EACH_ENTRY_SAFE(entry, next, &transform->samples, struct sample_entry, entry)
     {
@@ -242,6 +244,8 @@ NTSTATUS wg_transform_create(void *args)
 
     if (!(transform->sink_caps = wg_format_to_caps(&output_format)))
         goto out;
+    if (!(transform->pool = wg_pool_create()))
+        goto out;
     if (!(sink_caps = gst_caps_copy(transform->sink_caps)))
         goto out;
 
@@ -396,6 +400,8 @@ out:
         gst_object_unref(transform->my_src);
     if (src_caps)
         gst_caps_unref(src_caps);
+    if (transform->pool)
+        wg_pool_destroy(transform->pool);
     if (transform->container)
     {
         gst_element_set_state(transform->container, GST_STATE_NULL);

