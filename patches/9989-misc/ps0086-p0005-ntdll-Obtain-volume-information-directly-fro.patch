From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Subject: [PATCH 5/5] ntdll: Obtain volume information directly from the mountmgr.
Message-Id: <CAEU2+vpgnjzFRas0kbz7A_ETfwwVVViPNtXKPFFqMXA=YsJKXA@mail.gmail.com>
Date: Thu, 18 Mar 2021 10:54:28 -0600

This patch replaces the IOCTL_MOUNTMGR_QUERY_UNIX_DRIVE query in
dlls/ntdll/unix/file.c with the new IOCTL_MOUNTMGR_QUERY_VOLUME.  With
this patch all FileFsAttributeInformation and FileFsVolumeInformation
queries run through the mountmgr for both code paths instead of being
duplicated in ntdll.

Best,
Erich

From d2864aff1860b635e73f66d9ed1b222749a42cb5 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Sat, 20 Feb 2021 17:45:18 -0700
#Subject: ntdll: Obtain volume information directly from the mountmgr.

Signed-off-by: Erich E. Hoover <erich.e.hoover@gmail.com>
---
 dlls/ntdll/unix/file.c | 145 ++++++-----------------------------------
 1 file changed, 19 insertions(+), 126 deletions(-)

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -2186,8 +2186,11 @@ static int find_dos_device( const char *path )
     return -1;
 }
 
-static NTSTATUS get_mountmgr_fs_info( HANDLE handle, int fd, struct mountmgr_unix_drive *drive, ULONG size )
+
+static NTSTATUS get_mountmgr_vol_info( HANDLE handle, int fd, FS_INFORMATION_CLASS info_class,
+                                       void *ptr, ULONG size, ULONG_PTR *outsize )
 {
+    struct mountmgr_volume volume;
     OBJECT_ATTRIBUTES attr;
     UNICODE_STRING string;
     char *unix_name;
@@ -2200,16 +2203,19 @@ static NTSTATUS get_mountmgr_fs_info( HANDLE handle, int fd, struct mountmgr_uni
     letter = find_dos_device( unix_name );
     free( unix_name );
 
-    memset( drive, 0, sizeof(*drive) );
+    memset( &volume, 0, sizeof(volume) );
     if (letter == -1)
     {
         struct stat st;
 
         fstat( fd, &st );
-        drive->unix_dev = st.st_rdev ? st.st_rdev : st.st_dev;
+        volume.unix_dev = st.st_rdev ? st.st_rdev : st.st_dev;
     }
     else
-        drive->letter = 'a' + letter;
+        volume.letter = 'a' + letter;
+    volume.info_class = info_class;
+    volume.process = GetCurrentProcessId();
+    volume.handle = handle;
 
     init_unicode_string( &string, MOUNTMGR_DEVICE_NAME );
     InitializeObjectAttributes( &attr, &string, 0, NULL, NULL );
@@ -2217,11 +2223,12 @@ static NTSTATUS get_mountmgr_fs_info( HANDLE handle, int fd, struct mountmgr_uni
                                       FILE_SHARE_READ | FILE_SHARE_WRITE, FILE_SYNCHRONOUS_IO_NONALERT );
     if (status) return status;
 
-    status = NtDeviceIoControlFile( mountmgr, NULL, NULL, NULL, &io, IOCTL_MOUNTMGR_QUERY_UNIX_DRIVE,
-                                    drive, sizeof(*drive), drive, size );
+    status = NtDeviceIoControlFile( mountmgr, NULL, NULL, NULL, &io, IOCTL_MOUNTMGR_QUERY_VOLUME,
+                                    &volume, sizeof(volume), ptr, size );
     NtClose( mountmgr );
     if (status == STATUS_BUFFER_OVERFLOW) status = STATUS_SUCCESS;
     else if (status) WARN("failed to retrieve filesystem type from mountmgr, status %#x\n", status);
+    if (outsize && !status) *outsize = io.Information;
     return status;
 }
 
@@ -4595,12 +4602,14 @@ NTSTATUS WINAPI NtQueryInformationFile( HANDLE handle, IO_STATUS_BLOCK *io,
         if (fd_get_file_info( fd, options, &st, &attr ) == -1) status = errno_to_status( errno );
         else
         {
-            struct mountmgr_unix_drive drive;
+            BYTE buf[sizeof(FILE_FS_VOLUME_INFORMATION) + MAX_PATH * sizeof(WCHAR)];
+            FILE_FS_VOLUME_INFORMATION *ffvi = (FILE_FS_VOLUME_INFORMATION *)buf;
+            FS_INFORMATION_CLASS info_class = FileFsVolumeInformation;
             FILE_ID_INFORMATION *info = ptr;
 
             info->VolumeSerialNumber = 0;
-            if (!get_mountmgr_fs_info( handle, fd, &drive, sizeof(drive) ))
-                info->VolumeSerialNumber = drive.serial;
+            if (!get_mountmgr_vol_info( handle, fd, info_class, buf, sizeof(buf), NULL ))
+                info->VolumeSerialNumber = ffvi->VolumeSerialNumber;
             memset( &info->FileId, 0, sizeof(info->FileId) );
             *(ULONGLONG *)&info->FileId = st.st_ino;
         }
@@ -7821,125 +7830,9 @@ NTSTATUS WINAPI NtQueryVolumeInformationFile( HANDLE handle, IO_STATUS_BLOCK *io
         break;
 
     case FileFsAttributeInformation:
-    {
-        static const WCHAR fatW[] = {'F','A','T'};
-        static const WCHAR fat32W[] = {'F','A','T','3','2'};
-        static const WCHAR ntfsW[] = {'N','T','F','S'};
-        static const WCHAR cdfsW[] = {'C','D','F','S'};
-        static const WCHAR udfW[] = {'U','D','F'};
-
-        FILE_FS_ATTRIBUTE_INFORMATION *info = buffer;
-        struct mountmgr_unix_drive drive;
-        enum mountmgr_fs_type fs_type = MOUNTMGR_FS_TYPE_NTFS;
-
-        if (length < sizeof(FILE_FS_ATTRIBUTE_INFORMATION))
-        {
-            status = STATUS_INFO_LENGTH_MISMATCH;
-            break;
-        }
-
-        if (!get_mountmgr_fs_info( handle, fd, &drive, sizeof(drive) )) fs_type = drive.fs_type;
-        else
-        {
-            struct statfs stfs;
-
-            if (!fstatfs( fd, &stfs ))
-            {
-#if defined(linux) && defined(HAVE_FSTATFS)
-                switch (stfs.f_type)
-                {
-                case 0x9660:
-                    fs_type = MOUNTMGR_FS_TYPE_ISO9660;
-                    break;
-                case 0x15013346:
-                    fs_type = MOUNTMGR_FS_TYPE_UDF;
-                    break;
-                case 0x4d44:
-                    fs_type = MOUNTMGR_FS_TYPE_FAT32;
-                    break;
-                }
-#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__DragonFly__) || defined(__APPLE__)
-                if (!strcmp( stfs.f_fstypename, "cd9660" ))
-                    fs_type = MOUNTMGR_FS_TYPE_ISO9660;
-                else if (!strcmp( stfs.f_fstypename, "udf" ))
-                    fs_type = MOUNTMGR_FS_TYPE_UDF;
-                else if (!strcmp( stfs.f_fstypename, "msdos" )) /* FreeBSD < 5, Apple */
-                    fs_type = MOUNTMGR_FS_TYPE_FAT32;
-                else if (!strcmp( stfs.f_fstypename, "msdosfs" )) /* FreeBSD >= 5 */
-                    fs_type = MOUNTMGR_FS_TYPE_FAT32;
-#endif
-            }
-        }
-
-        switch (fs_type)
-        {
-        case MOUNTMGR_FS_TYPE_ISO9660:
-            info->FileSystemAttributes = FILE_READ_ONLY_VOLUME;
-            info->MaximumComponentNameLength = 221;
-            info->FileSystemNameLength = min( sizeof(cdfsW), length - offsetof( FILE_FS_ATTRIBUTE_INFORMATION, FileSystemName ) );
-            memcpy(info->FileSystemName, cdfsW, info->FileSystemNameLength);
-            break;
-        case MOUNTMGR_FS_TYPE_UDF:
-            info->FileSystemAttributes = FILE_READ_ONLY_VOLUME | FILE_UNICODE_ON_DISK | FILE_CASE_SENSITIVE_SEARCH;
-            info->MaximumComponentNameLength = 255;
-            info->FileSystemNameLength = min( sizeof(udfW), length - offsetof( FILE_FS_ATTRIBUTE_INFORMATION, FileSystemName ) );
-            memcpy(info->FileSystemName, udfW, info->FileSystemNameLength);
-            break;
-        case MOUNTMGR_FS_TYPE_FAT:
-            info->FileSystemAttributes = FILE_CASE_PRESERVED_NAMES; /* FIXME */
-            info->MaximumComponentNameLength = 255;
-            info->FileSystemNameLength = min( sizeof(fatW), length - offsetof( FILE_FS_ATTRIBUTE_INFORMATION, FileSystemName ) );
-            memcpy(info->FileSystemName, fatW, info->FileSystemNameLength);
-            break;
-        case MOUNTMGR_FS_TYPE_FAT32:
-            info->FileSystemAttributes = FILE_CASE_PRESERVED_NAMES; /* FIXME */
-            info->MaximumComponentNameLength = 255;
-            info->FileSystemNameLength = min( sizeof(fat32W), length - offsetof( FILE_FS_ATTRIBUTE_INFORMATION, FileSystemName ) );
-            memcpy(info->FileSystemName, fat32W, info->FileSystemNameLength);
-            break;
-        default:
-            info->FileSystemAttributes = FILE_CASE_PRESERVED_NAMES | FILE_PERSISTENT_ACLS;
-            info->MaximumComponentNameLength = 255;
-            info->FileSystemNameLength = min( sizeof(ntfsW), length - offsetof( FILE_FS_ATTRIBUTE_INFORMATION, FileSystemName ) );
-            memcpy(info->FileSystemName, ntfsW, info->FileSystemNameLength);
-            break;
-        }
-
-        io->Information = offsetof( FILE_FS_ATTRIBUTE_INFORMATION, FileSystemName ) + info->FileSystemNameLength;
-        status = STATUS_SUCCESS;
-        break;
-    }
-
     case FileFsVolumeInformation:
-    {
-        FILE_FS_VOLUME_INFORMATION *info = buffer;
-        ULONGLONG data[64];
-        struct mountmgr_unix_drive *drive = (struct mountmgr_unix_drive *)data;
-        const WCHAR *label;
-
-        if (length < sizeof(FILE_FS_VOLUME_INFORMATION))
-        {
-            status = STATUS_INFO_LENGTH_MISMATCH;
-            break;
-        }
-
-        if (get_mountmgr_fs_info( handle, fd, drive, sizeof(data) ))
-        {
-            status = STATUS_NOT_IMPLEMENTED;
-            break;
-        }
-
-        label = (WCHAR *)((char *)drive + drive->label_offset);
-        info->VolumeCreationTime.QuadPart = 0; /* FIXME */
-        info->VolumeSerialNumber = drive->serial;
-        info->VolumeLabelLength = min( wcslen( label ) * sizeof(WCHAR),
-                                       length - offsetof( FILE_FS_VOLUME_INFORMATION, VolumeLabel ) );
-        info->SupportsObjects = (drive->fs_type == MOUNTMGR_FS_TYPE_NTFS);
-        memcpy( info->VolumeLabel, label, info->VolumeLabelLength );
-        io->Information = offsetof( FILE_FS_VOLUME_INFORMATION, VolumeLabel ) + info->VolumeLabelLength;
-        status = STATUS_SUCCESS;
+        status = get_mountmgr_vol_info( handle, fd, info_class, buffer, length, &io->Information );
         break;
-    }
 
     case FileFsControlInformation:
         FIXME( "%p: control info not supported\n", handle );

-- 
2.36.0

