From 3d48ada3cb0bfefff14abbc915a87eb7db802c1b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 1 Mar 2022 11:21:30 +0100
Subject: [PATCH 18/20] winegstreamer: Rename audio converter functions to be
 more generic.

---
 dlls/winegstreamer/audioconvert.c | 204 +++++++++++++++---------------
 1 file changed, 102 insertions(+), 102 deletions(-)

diff --git a/dlls/winegstreamer/audioconvert.c b/dlls/winegstreamer/audioconvert.c
index 11111111111..11111111111 100644
--- a/dlls/winegstreamer/audioconvert.c
+++ b/dlls/winegstreamer/audioconvert.c
@@ -37,12 +37,12 @@ struct audio_converter
     CRITICAL_SECTION cs;
 };
 
-static struct audio_converter *impl_audio_converter_from_IMFTransform(IMFTransform *iface)
+static struct audio_converter *impl_from_IMFTransform(IMFTransform *iface)
 {
     return CONTAINING_RECORD(iface, struct audio_converter, IMFTransform_iface);
 }
 
-static HRESULT WINAPI audio_converter_QueryInterface(IMFTransform *iface, REFIID riid, void **obj)
+static HRESULT WINAPI transform_QueryInterface(IMFTransform *iface, REFIID riid, void **obj)
 {
     TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
 
@@ -59,9 +59,9 @@ static HRESULT WINAPI audio_converter_QueryInterface(IMFTransform *iface, REFIID
     return E_NOINTERFACE;
 }
 
-static ULONG WINAPI audio_converter_AddRef(IMFTransform *iface)
+static ULONG WINAPI transform_AddRef(IMFTransform *iface)
 {
-    struct audio_converter *transform = impl_audio_converter_from_IMFTransform(iface);
+    struct audio_converter *transform = impl_from_IMFTransform(iface);
     ULONG refcount = InterlockedIncrement(&transform->refcount);
 
     TRACE("%p, refcount %lu.\n", iface, refcount);
@@ -69,9 +69,9 @@ static ULONG WINAPI audio_converter_AddRef(IMFTransform *iface)
     return refcount;
 }
 
-static ULONG WINAPI audio_converter_Release(IMFTransform *iface)
+static ULONG WINAPI transform_Release(IMFTransform *iface)
 {
-    struct audio_converter *transform = impl_audio_converter_from_IMFTransform(iface);
+    struct audio_converter *transform = impl_from_IMFTransform(iface);
     ULONG refcount = InterlockedDecrement(&transform->refcount);
 
     TRACE("%p, refcount %lu.\n", iface, refcount);
@@ -86,7 +86,7 @@ static ULONG WINAPI audio_converter_Release(IMFTransform *iface)
     return refcount;
 }
 
-static HRESULT WINAPI audio_converter_GetStreamLimits(IMFTransform *iface, DWORD *input_minimum, DWORD *input_maximum,
+static HRESULT WINAPI transform_GetStreamLimits(IMFTransform *iface, DWORD *input_minimum, DWORD *input_maximum,
         DWORD *output_minimum, DWORD *output_maximum)
 {
     TRACE("%p, %p, %p, %p, %p.\n", iface, input_minimum, input_maximum, output_minimum, output_maximum);
@@ -96,7 +96,7 @@ static HRESULT WINAPI audio_converter_GetStreamLimits(IMFTransform *iface, DWORD
     return S_OK;
 }
 
-static HRESULT WINAPI audio_converter_GetStreamCount(IMFTransform *iface, DWORD *inputs, DWORD *outputs)
+static HRESULT WINAPI transform_GetStreamCount(IMFTransform *iface, DWORD *inputs, DWORD *outputs)
 {
     TRACE("%p, %p, %p.\n", iface, inputs, outputs);
 
@@ -105,7 +105,7 @@ static HRESULT WINAPI audio_converter_GetStreamCount(IMFTransform *iface, DWORD
     return S_OK;
 }
 
-static HRESULT WINAPI audio_converter_GetStreamIDs(IMFTransform *iface, DWORD input_size, DWORD *inputs,
+static HRESULT WINAPI transform_GetStreamIDs(IMFTransform *iface, DWORD input_size, DWORD *inputs,
         DWORD output_size, DWORD *outputs)
 {
     TRACE("%p, %lu, %p, %lu, %p.\n", iface, input_size, inputs, output_size, outputs);
@@ -113,28 +113,28 @@ static HRESULT WINAPI audio_converter_GetStreamIDs(IMFTransform *iface, DWORD in
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_GetInputStreamInfo(IMFTransform *iface, DWORD id, MFT_INPUT_STREAM_INFO *info)
+static HRESULT WINAPI transform_GetInputStreamInfo(IMFTransform *iface, DWORD id, MFT_INPUT_STREAM_INFO *info)
 {
     FIXME("%p, %lu, %p.\n", iface, id, info);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_GetOutputStreamInfo(IMFTransform *iface, DWORD id, MFT_OUTPUT_STREAM_INFO *info)
+static HRESULT WINAPI transform_GetOutputStreamInfo(IMFTransform *iface, DWORD id, MFT_OUTPUT_STREAM_INFO *info)
 {
     FIXME("%p. %lu, %p.\n", iface, id, info);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_GetAttributes(IMFTransform *iface, IMFAttributes **attributes)
+static HRESULT WINAPI transform_GetAttributes(IMFTransform *iface, IMFAttributes **attributes)
 {
     FIXME("%p, %p.\n", iface, attributes);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_GetInputStreamAttributes(IMFTransform *iface, DWORD id,
+static HRESULT WINAPI transform_GetInputStreamAttributes(IMFTransform *iface, DWORD id,
         IMFAttributes **attributes)
 {
     FIXME("%p, %lu, %p.\n", iface, id, attributes);
@@ -142,7 +142,7 @@ static HRESULT WINAPI audio_converter_GetInputStreamAttributes(IMFTransform *ifa
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_GetOutputStreamAttributes(IMFTransform *iface, DWORD id,
+static HRESULT WINAPI transform_GetOutputStreamAttributes(IMFTransform *iface, DWORD id,
         IMFAttributes **attributes)
 {
     FIXME("%p, %lu, %p.\n", iface, id, attributes);
@@ -150,21 +150,21 @@ static HRESULT WINAPI audio_converter_GetOutputStreamAttributes(IMFTransform *if
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_DeleteInputStream(IMFTransform *iface, DWORD id)
+static HRESULT WINAPI transform_DeleteInputStream(IMFTransform *iface, DWORD id)
 {
     TRACE("%p, %lu.\n", iface, id);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_AddInputStreams(IMFTransform *iface, DWORD streams, DWORD *ids)
+static HRESULT WINAPI transform_AddInputStreams(IMFTransform *iface, DWORD streams, DWORD *ids)
 {
     TRACE("%p, %lu, %p.\n", iface, streams, ids);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_GetInputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+static HRESULT WINAPI transform_GetInputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
         IMFMediaType **type)
 {
     IMFMediaType *ret;
@@ -198,7 +198,7 @@ static HRESULT WINAPI audio_converter_GetInputAvailableType(IMFTransform *iface,
     return S_OK;
 }
 
-static HRESULT WINAPI audio_converter_GetOutputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+static HRESULT WINAPI transform_GetOutputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
         IMFMediaType **type)
 {
     IMFMediaType *output_type;
@@ -269,13 +269,13 @@ fail:
     return hr;
 }
 
-static HRESULT WINAPI audio_converter_SetInputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+static HRESULT WINAPI transform_SetInputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
 {
     GUID major_type, subtype;
     UINT32 unused;
     HRESULT hr;
 
-    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    struct audio_converter *transform = impl_from_IMFTransform(iface);
 
     TRACE("%p, %lu, %p, %#lx.\n", iface, id, type, flags);
 
@@ -287,15 +287,15 @@ static HRESULT WINAPI audio_converter_SetInputType(IMFTransform *iface, DWORD id
         if (flags & MFT_SET_TYPE_TEST_ONLY)
             return S_OK;
 
-        EnterCriticalSection(&converter->cs);
+        EnterCriticalSection(&transform->cs);
 
-        if (converter->input_type)
+        if (transform->input_type)
         {
-            IMFMediaType_Release(converter->input_type);
-            converter->input_type = NULL;
+            IMFMediaType_Release(transform->input_type);
+            transform->input_type = NULL;
         }
 
-        LeaveCriticalSection(&converter->cs);
+        LeaveCriticalSection(&transform->cs);
 
         return S_OK;
     }
@@ -320,30 +320,30 @@ static HRESULT WINAPI audio_converter_SetInputType(IMFTransform *iface, DWORD id
     if (flags & MFT_SET_TYPE_TEST_ONLY)
         return S_OK;
 
-    EnterCriticalSection(&converter->cs);
+    EnterCriticalSection(&transform->cs);
 
     hr = S_OK;
 
-    if (!converter->input_type)
-        hr = MFCreateMediaType(&converter->input_type);
+    if (!transform->input_type)
+        hr = MFCreateMediaType(&transform->input_type);
 
     if (SUCCEEDED(hr))
-        hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->input_type);
+        hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) transform->input_type);
 
     if (FAILED(hr))
     {
-        IMFMediaType_Release(converter->input_type);
-        converter->input_type = NULL;
+        IMFMediaType_Release(transform->input_type);
+        transform->input_type = NULL;
     }
 
-    LeaveCriticalSection(&converter->cs);
+    LeaveCriticalSection(&transform->cs);
 
     return hr;
 }
 
-static HRESULT WINAPI audio_converter_SetOutputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+static HRESULT WINAPI transform_SetOutputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
 {
-    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    struct audio_converter *transform = impl_from_IMFTransform(iface);
     GUID major_type, subtype;
     UINT32 unused;
     HRESULT hr;
@@ -353,7 +353,7 @@ static HRESULT WINAPI audio_converter_SetOutputType(IMFTransform *iface, DWORD i
     if (id != 0)
         return MF_E_INVALIDSTREAMNUMBER;
 
-    if (!converter->input_type)
+    if (!transform->input_type)
         return MF_E_TRANSFORM_TYPE_NOT_SET;
 
     if (!type)
@@ -361,15 +361,15 @@ static HRESULT WINAPI audio_converter_SetOutputType(IMFTransform *iface, DWORD i
         if (flags & MFT_SET_TYPE_TEST_ONLY)
             return S_OK;
 
-        EnterCriticalSection(&converter->cs);
+        EnterCriticalSection(&transform->cs);
 
-        if (converter->output_type)
+        if (transform->output_type)
         {
-            IMFMediaType_Release(converter->output_type);
-            converter->output_type = NULL;
+            IMFMediaType_Release(transform->output_type);
+            transform->output_type = NULL;
         }
 
-        LeaveCriticalSection(&converter->cs);
+        LeaveCriticalSection(&transform->cs);
 
         return S_OK;
     }
@@ -394,34 +394,34 @@ static HRESULT WINAPI audio_converter_SetOutputType(IMFTransform *iface, DWORD i
     if (flags & MFT_SET_TYPE_TEST_ONLY)
         return S_OK;
 
-    EnterCriticalSection(&converter->cs);
+    EnterCriticalSection(&transform->cs);
 
     hr = S_OK;
 
-    if (!converter->output_type)
-        hr = MFCreateMediaType(&converter->output_type);
+    if (!transform->output_type)
+        hr = MFCreateMediaType(&transform->output_type);
 
     if (SUCCEEDED(hr))
-        hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->output_type);
+        hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) transform->output_type);
 
     if (FAILED(hr))
     {
-        IMFMediaType_Release(converter->output_type);
-        converter->output_type = NULL;
+        IMFMediaType_Release(transform->output_type);
+        transform->output_type = NULL;
     }
 
-    LeaveCriticalSection(&converter->cs);
+    LeaveCriticalSection(&transform->cs);
 
     return hr;
 }
 
-static HRESULT WINAPI audio_converter_GetInputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+static HRESULT WINAPI transform_GetInputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
 {
-    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    struct audio_converter *transform = impl_from_IMFTransform(iface);
     IMFMediaType *ret;
     HRESULT hr;
 
-    TRACE("%p, %lu, %p.\n", converter, id, type);
+    TRACE("%p, %lu, %p.\n", transform, id, type);
 
     if (id != 0)
         return MF_E_INVALIDSTREAMNUMBER;
@@ -429,14 +429,14 @@ static HRESULT WINAPI audio_converter_GetInputCurrentType(IMFTransform *iface, D
     if (FAILED(hr = MFCreateMediaType(&ret)))
         return hr;
 
-    EnterCriticalSection(&converter->cs);
+    EnterCriticalSection(&transform->cs);
 
-    if (converter->input_type)
-        hr = IMFMediaType_CopyAllItems(converter->input_type, (IMFAttributes *)ret);
+    if (transform->input_type)
+        hr = IMFMediaType_CopyAllItems(transform->input_type, (IMFAttributes *)ret);
     else
         hr = MF_E_TRANSFORM_TYPE_NOT_SET;
 
-    LeaveCriticalSection(&converter->cs);
+    LeaveCriticalSection(&transform->cs);
 
     if (SUCCEEDED(hr))
         *type = ret;
@@ -446,13 +446,13 @@ static HRESULT WINAPI audio_converter_GetInputCurrentType(IMFTransform *iface, D
     return hr;
 }
 
-static HRESULT WINAPI audio_converter_GetOutputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+static HRESULT WINAPI transform_GetOutputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
 {
-    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    struct audio_converter *transform = impl_from_IMFTransform(iface);
     IMFMediaType *ret;
     HRESULT hr;
 
-    TRACE("%p, %lu, %p.\n", converter, id, type);
+    TRACE("%p, %lu, %p.\n", transform, id, type);
 
     if (id != 0)
         return MF_E_INVALIDSTREAMNUMBER;
@@ -460,14 +460,14 @@ static HRESULT WINAPI audio_converter_GetOutputCurrentType(IMFTransform *iface,
     if (FAILED(hr = MFCreateMediaType(&ret)))
         return hr;
 
-    EnterCriticalSection(&converter->cs);
+    EnterCriticalSection(&transform->cs);
 
-    if (converter->output_type)
-        hr = IMFMediaType_CopyAllItems(converter->output_type, (IMFAttributes *)ret);
+    if (transform->output_type)
+        hr = IMFMediaType_CopyAllItems(transform->output_type, (IMFAttributes *)ret);
     else
         hr = MF_E_TRANSFORM_TYPE_NOT_SET;
 
-    LeaveCriticalSection(&converter->cs);
+    LeaveCriticalSection(&transform->cs);
 
     if (SUCCEEDED(hr))
         *type = ret;
@@ -477,35 +477,35 @@ static HRESULT WINAPI audio_converter_GetOutputCurrentType(IMFTransform *iface,
     return hr;
 }
 
-static HRESULT WINAPI audio_converter_GetInputStatus(IMFTransform *iface, DWORD id, DWORD *flags)
+static HRESULT WINAPI transform_GetInputStatus(IMFTransform *iface, DWORD id, DWORD *flags)
 {
     FIXME("%p, %lu, %p.\n", iface, id, flags);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_GetOutputStatus(IMFTransform *iface, DWORD *flags)
+static HRESULT WINAPI transform_GetOutputStatus(IMFTransform *iface, DWORD *flags)
 {
     FIXME("%p, %p.\n", iface, flags);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_SetOutputBounds(IMFTransform *iface, LONGLONG lower, LONGLONG upper)
+static HRESULT WINAPI transform_SetOutputBounds(IMFTransform *iface, LONGLONG lower, LONGLONG upper)
 {
     FIXME("%p, %s, %s.\n", iface, wine_dbgstr_longlong(lower), wine_dbgstr_longlong(upper));
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_ProcessEvent(IMFTransform *iface, DWORD id, IMFMediaEvent *event)
+static HRESULT WINAPI transform_ProcessEvent(IMFTransform *iface, DWORD id, IMFMediaEvent *event)
 {
     TRACE("%p, %lu, %p.\n", iface, id, event);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_ProcessMessage(IMFTransform *iface, MFT_MESSAGE_TYPE message, ULONG_PTR param)
+static HRESULT WINAPI transform_ProcessMessage(IMFTransform *iface, MFT_MESSAGE_TYPE message, ULONG_PTR param)
 {
     TRACE("%p, %u, %Iu.\n", iface, message, param);
 
@@ -519,14 +519,14 @@ static HRESULT WINAPI audio_converter_ProcessMessage(IMFTransform *iface, MFT_ME
     }
 }
 
-static HRESULT WINAPI audio_converter_ProcessInput(IMFTransform *iface, DWORD id, IMFSample *sample, DWORD flags)
+static HRESULT WINAPI transform_ProcessInput(IMFTransform *iface, DWORD id, IMFSample *sample, DWORD flags)
 {
     FIXME("%p, %lu, %p, %#lx.\n", iface, id, sample, flags);
 
     return E_NOTIMPL;
 }
 
-static HRESULT WINAPI audio_converter_ProcessOutput(IMFTransform *iface, DWORD flags, DWORD count,
+static HRESULT WINAPI transform_ProcessOutput(IMFTransform *iface, DWORD flags, DWORD count,
         MFT_OUTPUT_DATA_BUFFER *samples, DWORD *status)
 {
     FIXME("%p, %#lx, %lu, %p, %p.\n", iface, flags, count, samples, status);
@@ -534,51 +534,51 @@ static HRESULT WINAPI audio_converter_ProcessOutput(IMFTransform *iface, DWORD f
     return E_NOTIMPL;
 }
 
-static const IMFTransformVtbl audio_converter_vtbl =
+static const IMFTransformVtbl transform_vtbl =
 {
-    audio_converter_QueryInterface,
-    audio_converter_AddRef,
-    audio_converter_Release,
-    audio_converter_GetStreamLimits,
-    audio_converter_GetStreamCount,
-    audio_converter_GetStreamIDs,
-    audio_converter_GetInputStreamInfo,
-    audio_converter_GetOutputStreamInfo,
-    audio_converter_GetAttributes,
-    audio_converter_GetInputStreamAttributes,
-    audio_converter_GetOutputStreamAttributes,
-    audio_converter_DeleteInputStream,
-    audio_converter_AddInputStreams,
-    audio_converter_GetInputAvailableType,
-    audio_converter_GetOutputAvailableType,
-    audio_converter_SetInputType,
-    audio_converter_SetOutputType,
-    audio_converter_GetInputCurrentType,
-    audio_converter_GetOutputCurrentType,
-    audio_converter_GetInputStatus,
-    audio_converter_GetOutputStatus,
-    audio_converter_SetOutputBounds,
-    audio_converter_ProcessEvent,
-    audio_converter_ProcessMessage,
-    audio_converter_ProcessInput,
-    audio_converter_ProcessOutput,
+    transform_QueryInterface,
+    transform_AddRef,
+    transform_Release,
+    transform_GetStreamLimits,
+    transform_GetStreamCount,
+    transform_GetStreamIDs,
+    transform_GetInputStreamInfo,
+    transform_GetOutputStreamInfo,
+    transform_GetAttributes,
+    transform_GetInputStreamAttributes,
+    transform_GetOutputStreamAttributes,
+    transform_DeleteInputStream,
+    transform_AddInputStreams,
+    transform_GetInputAvailableType,
+    transform_GetOutputAvailableType,
+    transform_SetInputType,
+    transform_SetOutputType,
+    transform_GetInputCurrentType,
+    transform_GetOutputCurrentType,
+    transform_GetInputStatus,
+    transform_GetOutputStatus,
+    transform_SetOutputBounds,
+    transform_ProcessEvent,
+    transform_ProcessMessage,
+    transform_ProcessInput,
+    transform_ProcessOutput,
 };
 
 HRESULT audio_converter_create(REFIID riid, void **ret)
 {
-    struct audio_converter *object;
+    struct audio_converter *transform;
 
     TRACE("%s %p\n", debugstr_guid(riid), ret);
 
-    if (!(object = calloc(1, sizeof(*object))))
+    if (!(transform = calloc(1, sizeof(*transform))))
         return E_OUTOFMEMORY;
 
-    object->IMFTransform_iface.lpVtbl = &audio_converter_vtbl;
-    object->refcount = 1;
+    transform->IMFTransform_iface.lpVtbl = &transform_vtbl;
+    transform->refcount = 1;
 
-    InitializeCriticalSection(&object->cs);
-    object->cs.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": audio_converter_lock");
+    InitializeCriticalSection(&transform->cs);
+    transform->cs.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": transform_lock");
 
-    *ret = &object->IMFTransform_iface;
+    *ret = &transform->IMFTransform_iface;
     return S_OK;
 }
-- 
2.35.1

