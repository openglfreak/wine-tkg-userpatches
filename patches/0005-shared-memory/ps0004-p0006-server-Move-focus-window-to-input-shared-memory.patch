From 22ee1543f71fc96c10953e4ef9bd721f4d3a56e3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 18 Jan 2021 22:09:12 +0100
Subject: [PATCH 06/18] server: Move focus window to input shared memory.

---
 server/protocol.def |  1 +
 server/queue.c      | 33 +++++++++++++++++++--------------
 2 files changed, 20 insertions(+), 14 deletions(-)

diff --git a/server/protocol.def b/server/protocol.def
index b3c180e56c5..2880c3a16e4 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -881,6 +881,7 @@ struct input_shared_memory
 {
     unsigned int         seq;              /* sequence number - server updating if (seq_no & SEQUENCE_MASK) != 0 */
     thread_id_t          tid;
+    user_handle_t        focus;            /* handle to the focus window */
     user_handle_t        active;           /* handle to the active window */
 };
 
diff --git a/server/queue.c b/server/queue.c
index d4a509c8eb7..790dff0a105 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -103,7 +103,6 @@ struct thread_input
 {
     struct object          obj;           /* object header */
     struct desktop        *desktop;       /* desktop that this thread input belongs to */
-    user_handle_t          focus;         /* focus window */
     user_handle_t          capture;       /* capture window */
     user_handle_t          menu_owner;    /* current menu owner window */
     user_handle_t          move_size;     /* current moving/resizing window */
@@ -312,7 +311,7 @@ static struct thread_input *create_thread_input( struct thread *thread )
         input->shared_mapping = grab_object( thread->input_shared_mapping );
         input->shared = thread->input_shared;
         SHARED_WRITE_BEGIN( &input->shared->seq );
-        input->focus        = 0;
+        input->shared->focus        = 0;
         input->capture      = 0;
         input->shared->active       = 0;
         input->menu_owner   = 0;
@@ -1179,7 +1178,7 @@ static void thread_input_dump( struct object *obj, int verbose )
 {
     struct thread_input *input = (struct thread_input *)obj;
     fprintf( stderr, "Thread input focus=%08x capture=%08x active=%08x\n",
-             input->focus, input->capture, input->shared->active );
+             input->shared->focus, input->capture, input->shared->active );
 }
 
 static void thread_input_destroy( struct object *obj )
@@ -1201,7 +1200,7 @@ static inline void thread_input_cleanup_window( struct msg_queue *queue, user_ha
     struct thread_input *input = queue->input;
 
     SHARED_WRITE_BEGIN( &input->shared->seq );
-    if (window == input->focus) input->focus = 0;
+    if (window == input->shared->focus) input->shared->focus = 0;
     if (window == input->capture) input->capture = 0;
     if (window == input->shared->active) input->shared->active = 0;
     if (window == input->menu_owner) input->menu_owner = 0;
@@ -1259,7 +1258,7 @@ int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
     {
         SHARED_WRITE_BEGIN( &input->shared->seq );
         old_input = thread_from->queue->input;
-        if (!input->focus) input->focus = old_input->focus;
+        if (!input->shared->focus) input->shared->focus = old_input->shared->focus;
         if (!input->shared->active) input->shared->active = old_input->shared->active;
         SHARED_WRITE_END( &input->shared->seq );
     }
@@ -1278,12 +1277,16 @@ void detach_thread_input( struct thread *thread_from )
 
     if ((input = create_thread_input( thread_from )))
     {
-        if (old_input->focus && (thread = get_window_thread( old_input->focus )))
+        if (old_input->shared->focus && (thread = get_window_thread( old_input->shared->focus )))
         {
             if (thread == thread_from)
             {
-                input->focus = old_input->focus;
-                old_input->focus = 0;
+                SHARED_WRITE_BEGIN( &input->shared->seq );
+                input->shared->focus = old_input->shared->focus;
+                SHARED_WRITE_END( &input->shared->seq );
+                SHARED_WRITE_BEGIN( &old_input->shared->seq );
+                old_input->shared->focus = 0;
+                SHARED_WRITE_END( &old_input->shared->seq );
             }
             release_object( thread );
         }
@@ -1616,11 +1619,11 @@ static user_handle_t find_hardware_message_window( struct desktop *desktop, stru
     *msg_code = msg->msg;
     if (msg->msg == WM_INPUT || msg->msg == WM_INPUT_DEVICE_CHANGE)
     {
-        if (!(win = msg->win) && input) win = input->focus;
+        if (!(win = msg->win) && input) win = input->shared->focus;
     }
     else if (is_keyboard_msg( msg ))
     {
-        if (input && !(win = input->focus))
+        if (input && !(win = input->shared->focus))
         {
             win = input->shared->active;
             if (*msg_code < WM_SYSKEYDOWN) *msg_code += WM_SYSKEYDOWN - WM_KEYDOWN;
@@ -1800,7 +1803,7 @@ static int send_hook_ll_message( struct desktop *desktop, struct message *hardwa
 static struct thread *get_foreground_thread( struct desktop *desktop, user_handle_t window )
 {
     /* if desktop has no foreground process, assume the receiving window is */
-    if (desktop->foreground_input) return get_window_thread( desktop->foreground_input->focus );
+    if (desktop->foreground_input) return get_window_thread( desktop->foreground_input->shared->focus );
     if (window) return get_window_thread( window );
     return NULL;
 }
@@ -3219,7 +3222,7 @@ DECL_HANDLER(get_thread_input)
 
     if (input)
     {
-        reply->focus      = input->focus;
+        reply->focus      = input->shared->focus;
         reply->capture    = input->capture;
         reply->active     = input->shared->active;
         reply->menu_owner = input->menu_owner;
@@ -3335,8 +3338,10 @@ DECL_HANDLER(set_focus_window)
     reply->previous = 0;
     if (queue && check_queue_input_window( queue, req->handle ))
     {
-        reply->previous = queue->input->focus;
-        queue->input->focus = get_user_full_handle( req->handle );
+        reply->previous = queue->input->shared->focus;
+        SHARED_WRITE_BEGIN( &queue->input->shared->seq );
+        queue->input->shared->focus = get_user_full_handle( req->handle );
+        SHARED_WRITE_END( &queue->input->shared->seq );
     }
 }
 

