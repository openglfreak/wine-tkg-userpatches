From cb82f5592b80ad5dcccf5e2f87e1197904e35467 Mon Sep 17 00:00:00 2001
From: Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
Date: Mon, 7 Mar 2022 11:50:49 +0900
Subject: [PATCH DRAFT] preloader: Forward PT_DYNAMIC for debugger support

In order for a debugger to properly resolve loaded modules and detect
loading of them, it's necessary that the correct DT_DEBUG entry is visible
to the debugger. We had two problems with this before:
1. Since the preloader is the main executable, its ELF metadata is used
   instead of the executable that we are trying to load.
2. The ELF header was actually getting overwritten by the reserved region,
   since we only adjusted the placement for the .text section.

It's impossible to solve 1. unless we run the preloader in another way, e.g.
as an interpreter. This patch simply creates a stub PT_DYNAMIC section in
the preloader, then during execution patch that to point to the main
executable's respective section.

This allows GDB to have full shared library support when attaching. It
still doesn't seem to work when launching from scratch, nor when using
LLDB. GDB doesn't seem to resolve the symbols of the main executable,
but that should not be much of an issue since the loader itself is very
short.

Some alternative ways to fix this are also possible:
1. Run the preloader as an ELF interpreter. This would get rid of the need
   of messing with the auxiliary vector and various ELF metadata, but the
   interpreter can be only specified by absolute path, which is a packaging
   nuisance.
2. Get rid of the preloader entirely, make the loader static and let it perform
    the reservation. This should work on glibc, but it's in general not a
    very well supported use case and feels like a compatibility disaster.
---
 configure                  |  2 +-
 configure.ac               |  2 +-
 loader/Makefile.in         |  5 +++--
 loader/preloader.c         | 43 +++++++++++++++++++++++++++++++++++++-
 loader/preloader_dynamic.s |  9 ++++++++
 5 files changed, 56 insertions(+), 5 deletions(-)
 create mode 100644 loader/preloader_dynamic.s

diff --git a/configure b/configure
index 20bcb96a2a6..ec29b0218f8 100755
--- a/configure
+++ b/configure
@@ -10371,7 +10371,7 @@ if test "x$ac_cv_cflags__Wl___export_dynamic" = xyes
 then :
   WINELOADER_LDFLAGS="-Wl,--export-dynamic"
 fi
-    WINEPRELOADER_LDFLAGS="-static -nostartfiles -nodefaultlibs -Wl,-Ttext=0x7d400000"
+    WINEPRELOADER_LDFLAGS="-static -nostartfiles -nodefaultlibs -Wl,--Ttext-segment=0x7d400000"
 
     case $host_cpu in
       *i[3456789]86* | x86_64 | *aarch64* | arm*)
diff --git a/configure.ac b/configure.ac
index a1f7a7d5e2c..14cf493a262 100644
--- a/configure.ac
+++ b/configure.ac
@@ -826,7 +826,7 @@ case $host_os in
 
     WINE_TRY_CFLAGS([-Wl,-z,defs],[UNIXLDFLAGS="$UNIXLDFLAGS -Wl,-z,defs"])
     WINE_TRY_CFLAGS([-Wl,--export-dynamic],[WINELOADER_LDFLAGS="-Wl,--export-dynamic"])
-    WINEPRELOADER_LDFLAGS="-static -nostartfiles -nodefaultlibs -Wl,-Ttext=0x7d400000"
+    WINEPRELOADER_LDFLAGS="-static -nostartfiles -nodefaultlibs -Wl,--Ttext-segment=0x7d400000"
 
     case $host_cpu in
       *i[[3456789]]86* | x86_64 | *aarch64* | arm*)
diff --git a/loader/Makefile.in b/loader/Makefile.in
index 7302c231915..b5bdf6e1439 100644
--- a/loader/Makefile.in
+++ b/loader/Makefile.in
@@ -2,6 +2,7 @@ SOURCES = \
 	main.c \
 	preloader.c \
 	preloader_mac.c \
+	preloader_dynamic.s \
 	wine.de.UTF-8.man.in \
 	wine.desktop \
 	wine.fr.UTF-8.man.in \
@@ -25,10 +26,10 @@ wine64_OBJS = main.o
 wine64_DEPS = $(WINELOADER_DEPENDS)
 wine64_LDFLAGS = $(WINELOADER_LDFLAGS) $(LDEXECFLAGS) $(PTHREAD_LIBS)
 
-wine_preloader_OBJS = preloader.o preloader_mac.o
+wine_preloader_OBJS = preloader.o preloader_mac.o preloader_dynamic.o
 wine_preloader_DEPS = $(WINELOADER_DEPENDS)
 wine_preloader_LDFLAGS = $(WINEPRELOADER_LDFLAGS)
 
-wine64_preloader_OBJS = preloader.o preloader_mac.o
+wine64_preloader_OBJS = preloader.o preloader_mac.o preloader_dynamic.o
 wine64_preloader_DEPS = $(WINELOADER_DEPENDS)
 wine64_preloader_LDFLAGS = $(WINEPRELOADER_LDFLAGS)
diff --git a/loader/preloader.c b/loader/preloader.c
index 585be50624f..f3943bb5c5f 100644
--- a/loader/preloader.c
+++ b/loader/preloader.c
@@ -1148,6 +1148,23 @@ static unsigned int gnu_hash( const char *name )
     return h;
 }
 
+static void *find_segment(const struct wld_link_map *map, int type,
+			  ElfW(Half) * size)
+{
+	void *ret = NULL;
+	const ElfW(Phdr) * ph;
+	/* parse the (already loaded) ELF executable's header */
+	for (ph = map->l_phdr; ph < &map->l_phdr[map->l_phnum]; ++ph) {
+		if (type == ph->p_type) {
+			ret = (void *)(ph->p_vaddr + map->l_addr);
+			if (size)
+				*size = ph->p_memsz;
+			break;
+		}
+	}
+	return ret;
+}
+
 /*
  * Find a symbol in the symbol table of the executable loaded
  */
@@ -1375,6 +1392,12 @@ void* wld_start( void **stack )
     struct preloader_state state = { 0 };
     struct vma_area_list vma_list = { NULL };
     int remap_done;
+    void *main_binary_dynamic = NULL;
+    ElfW(Half) main_binary_dynamic_size = 0;
+    ElfW(Phdr) *self_phdr;
+    ElfW(Addr) phdr_offset = 0;
+    ElfW(Half) self_phnum;
+    ElfW(Phdr) *ph;
 
     pargc = *stack;
     argv = (char **)pargc + 1;
@@ -1394,6 +1417,8 @@ void* wld_start( void **stack )
     av = (struct wld_auxv *)(p+1);
     page_size = get_auxiliary( av, AT_PAGESZ, 4096 );
     page_mask = page_size - 1;
+    self_phdr = (void *) get_auxiliary( state.s.auxv, AT_PHDR, (ElfW(Addr)) NULL );
+    self_phnum = get_auxiliary( state.s.auxv, AT_PHNUM, 0 );
 
     preloader_start = (char *)_start - ((unsigned long)_start & page_mask);
     preloader_end = (char *)((unsigned long)(_end + page_mask) & ~page_mask);
@@ -1442,6 +1467,22 @@ void* wld_start( void **stack )
     interp = (char *)main_binary_map.l_addr + main_binary_map.l_interp;
     map_so_lib( interp, &ld_so_map );
 
+    main_binary_dynamic = find_segment(&main_binary_map, PT_DYNAMIC,
+				       &main_binary_dynamic_size);
+    for (ph = self_phdr; ph < &self_phdr[self_phnum]; ++ph) {
+	    if (PT_PHDR == ph->p_type) {
+            /* Best effort PIE support */
+		    phdr_offset = (ElfW(Addr))self_phdr -
+				  (ElfW(Addr))ph->p_vaddr;
+	    } else if (PT_DYNAMIC == ph->p_type) {
+		    wld_mprotect((void *)((unsigned long)ph & ~page_mask), page_size,
+				 PROT_READ | PROT_WRITE);
+		    ph->p_vaddr = (ElfW(Addr))main_binary_dynamic - phdr_offset;
+		    ph->p_memsz = main_binary_dynamic_size;
+		    break;
+	    }
+    }
+
     /* store pointer to the preload info into the appropriate main binary variable */
     wine_main_preload_info = find_symbol( &main_binary_map, "wine_main_preload_info", STT_OBJECT );
     if (wine_main_preload_info) *wine_main_preload_info = preload_info;
diff --git a/loader/preloader_dynamic.s b/loader/preloader_dynamic.s
new file mode 100644
index 00000000000..cef05d3fb60
--- /dev/null
+++ b/loader/preloader_dynamic.s
@@ -0,0 +1,9 @@
+DT_NULL=0
+# This section is a stub PT_DYNAMIC entry that will be patched over to the real exectuable's
+# respective section.
+.section ".dynamic"
+    _DYNAMIC: .globl _DYNAMIC
+    # Don't put any "real" entries here: GDB will look at the on-disk image first, and we
+    # need to make sure that the stub entries doesn't get preferred over the real entries
+    # that we forward to.
+    .long DT_NULL,0
-- 
2.35.1

