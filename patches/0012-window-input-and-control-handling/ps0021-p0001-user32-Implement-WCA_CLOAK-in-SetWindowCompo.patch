From: "Gabriel Ivăncescu" <gabrielopcode@gmail.com>
Subject: [PATCH 1/6] user32: Implement WCA_CLOAK in SetWindowCompositionAttribute.
Message-Id: <c2d924287aa6ead5a30239d694d834427a61cf3c.1604678337.git.gabrielopcode@gmail.com>
Date: Fri,  6 Nov 2020 18:03:30 +0200

This implements the user32 and server-side of keeping track of cloaking,
without actually doing the cloaking, which is done by the driver. The
driver function SetWindowCompositionAttribute must return whether it
supports cloaking, and whether it's a manual cloaking done by the app,
or the shell cloaking a window.

Manually cloaked windows can be activated and set to foreground. They also
remain on the taskbar and can be activated from the taskbar too (and function
like uncloaked windows), but are otherwise visibly hidden. WindowFromPoint
doesn't work to retrieve them, though.

Signed-off-by: Gabriel Ivăncescu <gabrielopcode@gmail.com>
---

This patchset will attempt to implement both manual cloaking done by
applications, and shell cloaking using the WM (for virtual desktops/workspaces
for example).

It uses the undocumented user32 API SetWindowCompositionAttribute to do
so. Of course, the documented DwmSetWindowAttribute will just be a wrapper
around this one.

 dlls/user32/user_private.h   |   1 +
 dlls/user32/win.c            |   7 +--
 dlls/win32u/driver.c         |  12 ++++
 dlls/win32u/gdiobj.c         |   1 +
 dlls/win32u/message.c        |   2 +
 dlls/win32u/ntuser_private.h |   2 +
 dlls/win32u/win32u.spec      |   2 +-
 dlls/win32u/win32u_private.h |   1 +
 dlls/win32u/window.c         | 109 ++++++++++++++++++++++++++++++++++-
 dlls/win32u/wrappers.c       |   6 ++
 include/ntuser.h             |  42 ++++++++++++++
 include/wine/gdi_driver.h    |   1 +
 server/protocol.def          |  13 +++++
 server/window.c              |  83 +++++++++++++++++++++++---
 14 files changed, 266 insertions(+), 16 deletions(-)

diff --git a/dlls/user32/user_private.h b/dlls/user32/user_private.h
index 11111111111..11111111111 100644
--- a/dlls/user32/user_private.h
+++ b/dlls/user32/user_private.h
@@ -203,5 +203,6 @@ void WINAPI USER_ScrollBarDraw(HWND, HDC, INT, enum SCROLL_HITTEST,
                                const struct SCROLL_TRACKING_INFO *, BOOL, BOOL, RECT *, INT, INT,
                                INT, BOOL) DECLSPEC_HIDDEN;
 void WINAPI SCROLL_SetStandardScrollPainted(HWND hwnd, INT bar, BOOL visible);
+BOOL WINAPI SetWindowCompositionAttribute(HWND hwnd, const struct WINCOMPATTRDATA* data);
 
 #endif /* __WINE_USER_PRIVATE_H */
diff --git a/dlls/user32/win.c b/dlls/user32/win.c
index 11111111111..11111111111 100644
--- a/dlls/user32/win.c
+++ b/dlls/user32/win.c
@@ -1958,11 +1958,10 @@ BOOL WINAPI SetWindowDisplayAffinity(HWND hwnd, DWORD affinity)
 /**********************************************************************
  *              SetWindowCompositionAttribute (USER32.@)
  */
-BOOL WINAPI SetWindowCompositionAttribute(HWND hwnd, void *data)
+BOOL WINAPI SetWindowCompositionAttribute(HWND hwnd, const struct WINCOMPATTRDATA *data)
 {
-    FIXME("(%p, %p): stub\n", hwnd, data);
-    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
-    return FALSE;
+    TRACE("(%p, %p)\n", hwnd, data);
+    return NtUserSetWindowCompositionAttribute(hwnd, data);
 }
 
 /***********************************************************************
diff --git a/dlls/win32u/driver.c b/dlls/win32u/driver.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/driver.c
+++ b/dlls/win32u/driver.c
@@ -862,6 +862,11 @@ static void CDECL nulldrv_SetParent( HWND hwnd, HWND parent, HWND old_parent )
 {
 }
 
+static DWORD CDECL nulldrv_SetWindowCompositionAttribute( HWND hwnd, DWORD attribute, void *data )
+{
+    return STATUS_NOT_IMPLEMENTED;
+}
+
 static void CDECL nulldrv_SetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw )
 {
 }
@@ -1163,6 +1168,11 @@ static void CDECL loaderdrv_SetLayeredWindowAttributes( HWND hwnd, COLORREF key,
     load_driver()->pSetLayeredWindowAttributes( hwnd, key, alpha, flags );
 }
 
+static DWORD CDECL loaderdrv_SetWindowCompositionAttribute( HWND hwnd, DWORD attribute, void *data )
+{
+    return load_driver()->pSetWindowCompositionAttribute( hwnd, attribute, data );
+}
+
 static void CDECL loaderdrv_SetWindowRgn( HWND hwnd, HRGN hrgn, BOOL redraw )
 {
     load_driver()->pSetWindowRgn( hwnd, hrgn, redraw );
@@ -1218,6 +1228,7 @@ static const struct user_driver_funcs lazy_load_driver =
     nulldrv_SetFocus,
     loaderdrv_SetLayeredWindowAttributes,
     nulldrv_SetParent,
+    loaderdrv_SetWindowCompositionAttribute,
     loaderdrv_SetWindowRgn,
     nulldrv_SetWindowIcon,
     nulldrv_SetWindowStyle,
@@ -1287,6 +1298,7 @@ void CDECL __wine_set_display_driver( struct user_driver_funcs *driver, UINT ver
     SET_USER_FUNC(SetFocus);
     SET_USER_FUNC(SetLayeredWindowAttributes);
     SET_USER_FUNC(SetParent);
+    SET_USER_FUNC(SetWindowCompositionAttribute);
     SET_USER_FUNC(SetWindowRgn);
     SET_USER_FUNC(SetWindowIcon);
     SET_USER_FUNC(SetWindowStyle);
diff --git a/dlls/win32u/gdiobj.c b/dlls/win32u/gdiobj.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/gdiobj.c
+++ b/dlls/win32u/gdiobj.c
@@ -1208,6 +1208,7 @@ static struct unix_funcs unix_funcs =
     NtUserSetLayeredWindowAttributes,
     NtUserSetParent,
     NtUserSetSysColors,
+    NtUserSetWindowCompositionAttribute,
     NtUserSetWindowLong,
     NtUserSetWindowLongPtr,
     NtUserSetWindowPos,
diff --git a/dlls/win32u/message.c b/dlls/win32u/message.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/message.c
+++ b/dlls/win32u/message.c
@@ -146,6 +146,8 @@ LRESULT handle_internal_message( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lpar
     case WM_WINE_UPDATEWINDOWSTATE:
         update_window_state( hwnd );
         return 0;
+    case WM_WINE_SETWINDOWCLOAKED:
+        return user_driver->pSetWindowCompositionAttribute( hwnd, WCA_CLOAK, &wparam );
     default:
         if (msg >= WM_WINE_FIRST_DRIVER_MSG && msg <= WM_WINE_LAST_DRIVER_MSG)
             return user_driver->pWindowMessage( hwnd, msg, wparam, lparam );
diff --git a/dlls/win32u/ntuser_private.h b/dlls/win32u/ntuser_private.h
index 11111111111..11111111111 100644
--- a/dlls/win32u/ntuser_private.h
+++ b/dlls/win32u/ntuser_private.h
@@ -312,6 +312,8 @@ WND *get_win_ptr( HWND hwnd ) DECLSPEC_HIDDEN;
 BOOL is_child( HWND parent, HWND child );
 BOOL is_window( HWND hwnd ) DECLSPEC_HIDDEN;
 
+NTSTATUS WINAPI NtUserSetWindowCompositionAttribute( HWND hwnd, const struct WINCOMPATTRDATA *data );
+
 #if defined(__i386__) || defined(__x86_64__)
 #define __SHARED_READ_SEQ( x ) (*(x))
 #define __SHARED_READ_FENCE do {} while(0)
diff --git a/dlls/win32u/win32u.spec b/dlls/win32u/win32u.spec
index 11111111111..11111111111 100644
--- a/dlls/win32u/win32u.spec
+++ b/dlls/win32u/win32u.spec
@@ -1240,7 +1240,7 @@
 @ stdcall -syscall NtUserSetWinEventHook(long long long ptr ptr long long long)
 @ stub NtUserSetWindowArrangement
 @ stub NtUserSetWindowBand
-@ stub NtUserSetWindowCompositionAttribute
+@ stdcall NtUserSetWindowCompositionAttribute(long ptr)
 @ stub NtUserSetWindowCompositionTransition
 @ stub NtUserSetWindowDisplayAffinity
 @ stub NtUserSetWindowFNID
diff --git a/dlls/win32u/win32u_private.h b/dlls/win32u/win32u_private.h
index 11111111111..11111111111 100644
--- a/dlls/win32u/win32u_private.h
+++ b/dlls/win32u/win32u_private.h
@@ -261,6 +261,7 @@ struct unix_funcs
     BOOL     (WINAPI *pNtUserSetLayeredWindowAttributes)( HWND hwnd, COLORREF key, BYTE alpha, DWORD flags );
     HWND     (WINAPI *pNtUserSetParent)( HWND hwnd, HWND parent );
     BOOL     (WINAPI *pNtUserSetSysColors)( INT count, const INT *colors, const COLORREF *values );
+    NTSTATUS (WINAPI *pNtUserSetWindowCompositionAttribute)( HWND hwnd, const struct WINCOMPATTRDATA *data );
     LONG     (WINAPI *pNtUserSetWindowLong)( HWND hwnd, INT offset, LONG newval, BOOL ansi );
     LONG_PTR (WINAPI *pNtUserSetWindowLongPtr)( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi );
     BOOL     (WINAPI *pNtUserSetWindowPos)( HWND hwnd, HWND after, INT x, INT y, INT cx, INT cy, UINT flags );
diff --git a/dlls/win32u/window.c b/dlls/win32u/window.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/window.c
+++ b/dlls/win32u/window.c
@@ -1138,10 +1138,102 @@ static DWORD fix_exstyle( DWORD style, DWORD exstyle )
     return exstyle;
 }
 
+BOOL WINAPI NtUserSetWindowCompositionAttribute( HWND hwnd, const struct WINCOMPATTRDATA *data )
+{
+    user_handle_t *list;
+    NTSTATUS status;
+    HWND parent;
+    DWORD ret;
+    WND *win;
+
+    TRACE( "(%p, %p)\n", hwnd, data );
+
+    if (!data || !data->pData)
+    {
+        SetLastError( ERROR_NOACCESS );
+        return FALSE;
+    }
+    if (!hwnd || is_broadcast(hwnd) || !(win = get_win_ptr( hwnd )))
+    {
+        SetLastError( ERROR_INVALID_HANDLE );
+        return FALSE;
+    }
+    if (win == WND_DESKTOP || win == WND_OTHER_PROCESS)
+    {
+        SetLastError( ERROR_ACCESS_DENIED );
+        return FALSE;
+    }
+    parent = win->parent;
+    release_win_ptr( win );
+    if (parent && parent != get_desktop_window())
+    {
+        SetLastError( ERROR_INVALID_HANDLE );
+        return FALSE;
+    }
+
+    switch (data->attribute)
+    {
+    case WCA_CLOAK:
+    {
+        unsigned size, count = 0, i;
+
+        if (data->dataSize < sizeof(BOOL))
+        {
+            SetLastError( ERROR_INSUFFICIENT_BUFFER );
+            return FALSE;
+        }
+
+        ret = user_driver->pSetWindowCompositionAttribute( hwnd, WCA_CLOAK, data->pData );
+        if (ret == ~0) return FALSE;
+
+        size = 128;
+        for (;;)
+        {
+            if (!(list = malloc( size * sizeof(user_handle_t) )))
+            {
+                SetLastError( ERROR_OUTOFMEMORY );
+                return FALSE;
+            }
+            SERVER_START_REQ( set_window_cloaked )
+            {
+                req->handle  = wine_server_user_handle( hwnd );
+                req->cloaked = ret;
+                wine_server_set_reply( req, list, size * sizeof(user_handle_t) );
+                status = wine_server_call( req );
+                count = reply->count;
+            }
+            SERVER_END_REQ;
+            if (status && status != STATUS_BUFFER_TOO_SMALL || count <= size)
+                break;
+            free( list );
+            size = count;  /* restart with a large enough buffer */
+        }
+        /* Go through the list to cloak the windows that inherit it */
+        for (i = 0; i < count; i++)
+        {
+            HWND full_handle, handle = wine_server_ptr_handle( list[i] );
+
+            if ((full_handle = is_current_process_window( handle )))
+                user_driver->pSetWindowCompositionAttribute( full_handle, WCA_CLOAK, data->pData );
+            else
+                send_message( handle, WM_WINE_SETWINDOWCLOAKED, *(BOOL*)(data->pData), 0 );
+        }
+        free( list );
+        if (status) SetLastError( RtlNtStatusToDosError( status ) );
+        return !status;
+    }
+    default:
+        FIXME( "unimplemented attribute %ld, size %lu, for hwnd %p.\n", data->attribute, data->dataSize, hwnd );
+        return ERROR_CALL_NOT_IMPLEMENTED;
+    }
+    return TRUE;
+}
+
 /* Change the owner of a window. */
 static HWND set_window_owner( HWND hwnd, HWND owner )
 {
     WND *win = get_win_ptr( hwnd );
+    BOOL needs_cloak = FALSE;
     HWND ret = 0;
 
     if (!win || win == WND_DESKTOP) return 0;
@@ -1158,10 +1250,19 @@ static HWND set_window_owner( HWND hwnd, HWND owner )
         {
             win->owner = wine_server_ptr_handle( reply->full_owner );
             ret = wine_server_ptr_handle( reply->prev_owner );
+            needs_cloak = reply->needs_cloak;
         }
     }
     SERVER_END_REQ;
     release_win_ptr( win );
+    if (needs_cloak)
+    {
+        struct WINCOMPATTRDATA data;
+        data.attribute = WCA_CLOAK;
+        data.pData = &needs_cloak;
+        data.dataSize = sizeof(needs_cloak);
+        NtUserSetWindowCompositionAttribute( hwnd, &data );
+    }
     return ret;
 }
 
@@ -4535,7 +4636,7 @@ void destroy_thread_windows(void)
  */
 static WND *create_window_handle( HWND parent, HWND owner, UNICODE_STRING *name,
                                   HINSTANCE instance, BOOL ansi,
-                                  DWORD style, DWORD ex_style )
+                                  DWORD style, DWORD ex_style, BOOL *needs_cloak )
 {
     DPI_AWARENESS awareness = get_thread_dpi_awareness();
     HWND handle = 0, full_parent = 0, full_owner = 0;
@@ -4564,6 +4665,7 @@ static WND *create_window_handle( HWND parent, HWND owner, UNICODE_STRING *name,
             dpi         = reply->dpi;
             awareness   = reply->awareness;
             class       = wine_server_get_ptr( reply->class_ptr );
+            *needs_cloak = reply->needs_cloak;
         }
     }
     SERVER_END_REQ;
@@ -4719,6 +4821,7 @@ HWND WINAPI NtUserCreateWindowEx( DWORD ex_style, UNICODE_STRING *class_name,
     LRESULT result;
     RECT rect;
     WND *win;
+    BOOL needs_cloak;
 
     static const WCHAR messageW[] = {'M','e','s','s','a','g','e'};
 
@@ -4781,7 +4884,7 @@ HWND WINAPI NtUserCreateWindowEx( DWORD ex_style, UNICODE_STRING *class_name,
 
     style = cs.style & ~WS_VISIBLE;
     ex_style = cs.dwExStyle & ~WS_EX_LAYERED;
-    if (!(win = create_window_handle( parent, owner, class_name, instance, ansi, style, ex_style )))
+    if (!(win = create_window_handle( parent, owner, class_name, instance, ansi, style, ex_style, &needs_cloak )))
         return 0;
     hwnd = win->obj.handle;
 
@@ -4935,6 +5038,8 @@ HWND WINAPI NtUserCreateWindowEx( DWORD ex_style, UNICODE_STRING *class_name,
     /* call the driver */
 
     if (!user_driver->pCreateWindow( hwnd )) goto failed;
+    if (needs_cloak)
+        user_driver->pSetWindowCompositionAttribute( hwnd, WCA_CLOAK, &needs_cloak );
 
     NtUserNotifyWinEvent( EVENT_OBJECT_CREATE, hwnd, OBJID_WINDOW, 0 );
 
diff --git a/dlls/win32u/wrappers.c b/dlls/win32u/wrappers.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/wrappers.c
+++ b/dlls/win32u/wrappers.c
@@ -1070,6 +1070,12 @@ BOOL WINAPI NtUserSetSysColors( INT count, const INT *colors, const COLORREF *va
     return unix_funcs->pNtUserSetSysColors( count, colors, values );
 }
 
+NTSTATUS WINAPI NtUserSetWindowCompositionAttribute( HWND hwnd, const struct WINCOMPATTRDATA *data )
+{
+    if (!unix_funcs) return 0;
+    return unix_funcs->pNtUserSetWindowCompositionAttribute( hwnd, data );
+}
+
 LONG WINAPI NtUserSetWindowLong( HWND hwnd, INT offset, LONG newval, BOOL ansi )
 {
     if (!unix_funcs) return 0;
diff --git a/include/ntuser.h b/include/ntuser.h
index 11111111111..11111111111 100644
--- a/include/ntuser.h
+++ b/include/ntuser.h
@@ -309,11 +309,52 @@ enum wine_internal_message
     WM_WINE_MOUSE_LL_HOOK,
     WM_WINE_CLIPCURSOR,
     WM_WINE_UPDATEWINDOWSTATE,
+    WM_WINE_SETWINDOWCLOAKED,
     WM_WINE_FIRST_DRIVER_MSG = 0x80001000,  /* range of messages reserved for the USER driver */
     WM_WINE_LAST_DRIVER_MSG = 0x80001fff
 };
 
 
+/* Undocumented structure for (Get|Set)WindowCompositionAttribute */
+struct WINCOMPATTRDATA
+{
+    DWORD attribute;
+    void *pData;
+    ULONG dataSize;
+};
+enum
+{
+    WCA_UNDEFINED = 0,
+    WCA_NCRENDERING_ENABLED = 1,
+    WCA_NCRENDERING_POLICY = 2,
+    WCA_TRANSITIONS_FORCEDISABLED = 3,
+    WCA_ALLOW_NCPAINT = 4,
+    WCA_CAPTION_BUTTON_BOUNDS = 5,
+    WCA_NONCLIENT_RTL_LAYOUT = 6,
+    WCA_FORCE_ICONIC_REPRESENTATION = 7,
+    WCA_EXTENDED_FRAME_BOUNDS = 8,
+    WCA_HAS_ICONIC_BITMAP = 9,
+    WCA_THEME_ATTRIBUTES = 10,
+    WCA_NCRENDERING_EXILED = 11,
+    WCA_NCADORNMENTINFO = 12,
+    WCA_EXCLUDED_FROM_LIVEPREVIEW = 13,
+    WCA_VIDEO_OVERLAY_ACTIVE = 14,
+    WCA_FORCE_ACTIVEWINDOW_APPEARANCE = 15,
+    WCA_DISALLOW_PEEK = 16,
+    WCA_CLOAK = 17,
+    WCA_CLOAKED = 18,
+    WCA_ACCENT_POLICY = 19,
+    WCA_FREEZE_REPRESENTATION = 20,
+    WCA_EVER_UNCLOAKED = 21,
+    WCA_VISUAL_OWNER = 22,
+    WCA_HOLOGRAPHIC = 23,
+    WCA_EXCLUDED_FROM_DDA = 24,
+    WCA_PASSIVEUPDATEMODE = 25,
+    WCA_USEDARKMODECOLORS = 26,
+    WCA_LAST
+};
+
+
 HKL     WINAPI NtUserActivateKeyboardLayout( HKL layout, UINT flags );
 BOOL    WINAPI NtUserAddClipboardFormatListener( HWND hwnd );
 BOOL    WINAPI NtUserAttachThreadInput( DWORD from, DWORD to, BOOL attach );
@@ -457,6 +498,7 @@ BOOL    WINAPI NtUserSetSystemMenu( HWND hwnd, HMENU menu );
 UINT_PTR WINAPI NtUserSetSystemTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC proc );
 BOOL    WINAPI NtUserSetThreadDesktop( HDESK handle );
 UINT_PTR WINAPI NtUserSetTimer( HWND hwnd, UINT_PTR id, UINT timeout, TIMERPROC proc, ULONG tolerance );
+NTSTATUS WINAPI NtUserSetWindowCompositionAttribute(HWND hwnd, const struct WINCOMPATTRDATA* data);
 LONG    WINAPI NtUserSetWindowLong( HWND hwnd, INT offset, LONG newval, BOOL ansi );
 LONG_PTR WINAPI NtUserSetWindowLongPtr( HWND hwnd, INT offset, LONG_PTR newval, BOOL ansi );
 BOOL    WINAPI NtUserSetWindowPos( HWND hwnd, HWND after, INT x, INT y, INT cx, INT cy, UINT flags );
diff --git a/include/wine/gdi_driver.h b/include/wine/gdi_driver.h
index 11111111111..11111111111 100644
--- a/include/wine/gdi_driver.h
+++ b/include/wine/gdi_driver.h
@@ -309,6 +309,7 @@ struct user_driver_funcs
     void    (CDECL *pSetFocus)(HWND);
     void    (CDECL *pSetLayeredWindowAttributes)(HWND,COLORREF,BYTE,DWORD);
     void    (CDECL *pSetParent)(HWND,HWND,HWND);
+    DWORD   (CDECL *pSetWindowCompositionAttribute)(HWND,DWORD,void*);
     void    (CDECL *pSetWindowRgn)(HWND,HRGN,BOOL);
     void    (CDECL *pSetWindowIcon)(HWND,UINT,HICON);
     void    (CDECL *pSetWindowStyle)(HWND,INT,STYLESTRUCT*);
diff --git a/server/protocol.def b/server/protocol.def
index 11111111111..11111111111 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -2323,6 +2323,7 @@ enum message_type
     client_ptr_t   class_ptr;   /* pointer to class in client address space */
     int            dpi;         /* window DPI if not per-monitor aware */
     int            awareness;   /* window DPI awareness */
+    int            needs_cloak; /* the window needs to be cloaked by the driver */
 @END
 
 
@@ -2348,6 +2349,7 @@ enum message_type
 @REPLY
     user_handle_t  full_owner;  /* full handle of new owner */
     user_handle_t  prev_owner;  /* full handle of previous owner */
+    int            needs_cloak; /* the owned window needs to be cloaked */
 @END
 
 
@@ -2395,6 +2397,17 @@ enum message_type
 #define SET_WIN_UNICODE   0x40
 
 
+/* Set the window's cloaked attribute */
+@REQ(set_window_cloaked)
+    user_handle_t  handle;        /* handle to the window */
+    unsigned int   cloaked;       /* cloaked attribute to set (see below) */
+@REPLY
+    unsigned int   count;         /* total count of windows inheriting it */
+    VARARG(windows,user_handles); /* window handles that inherit it */
+@END
+#define SET_WINDOW_CLOAKED_ON     0x01
+
+
 /* Set the parent of a window */
 @REQ(set_parent)
     user_handle_t  handle;      /* handle to the window */
diff --git a/server/window.c b/server/window.c
index 11111111111..11111111111 100644
--- a/server/window.c
+++ b/server/window.c
@@ -82,6 +82,7 @@ struct window
     unsigned int     is_layered : 1;  /* has layered info been set? */
     unsigned int     is_orphan : 1;   /* is window orphaned */
     unsigned int     is_desktop : 1;  /* is it a desktop window? */
+    unsigned int     is_cloaked : 1;  /* is the window cloaked by the app? */
     unsigned int     color_key;       /* color key for a layered window */
     unsigned int     alpha;           /* alpha value for a layered window */
     unsigned int     layered_flags;   /* flags for a layered window */
@@ -607,6 +608,7 @@ static struct window *create_window( struct window *parent, struct window *owner
     win->is_layered     = 0;
     win->is_orphan      = 0;
     win->is_desktop     = parent ? 0 : 1;
+    win->is_cloaked     = 0;
     win->dpi_awareness  = DPI_AWARENESS_PER_MONITOR_AWARE;
     win->dpi            = 0;
     win->user_data      = 0;
@@ -903,6 +905,7 @@ static int get_window_children_from_point( struct window *parent, int x, int y,
     {
         int x_child = x, y_child = y;
 
+        if (is_desktop_window( parent ) && ptr->is_cloaked) continue;
         if (!is_point_in_window( ptr, &x_child, &y_child, parent->dpi )) continue;  /* skip it */
 
         /* if point is in client area, and window is not minimized or disabled, check children */
@@ -976,6 +979,21 @@ static int all_windows_from_point( struct window *top, int x, int y, unsigned in
     return 1;
 }
 
+/* fill an array with the handles of all the owned windows, recursively */
+static unsigned int get_owned_windows( struct window *win, user_handle_t *handles )
+{
+    struct window *ptr, *parent = win->parent;
+    unsigned int count = 0;
+
+    LIST_FOR_EACH_ENTRY( ptr, &parent->children, struct window, entry )
+    {
+        if (ptr->owner != win->handle) continue;
+        if (handles) handles[count] = ptr->handle;
+        count++;
+        count += get_owned_windows( ptr, handles ? handles + count : NULL );
+    }
+    return count;
+}
 
 /* return the thread owning a window */
 struct thread *get_window_thread( user_handle_t handle )
@@ -2118,14 +2136,16 @@ DECL_HANDLER(create_window)
     }
     win->style = req->style;
     win->ex_style = req->ex_style;
+    win->is_cloaked = owner ? owner->is_cloaked : 0;
 
-    reply->handle    = win->handle;
-    reply->parent    = win->parent ? win->parent->handle : 0;
-    reply->owner     = win->owner;
-    reply->extra     = win->nb_extra_bytes;
-    reply->dpi       = win->dpi;
-    reply->awareness = win->dpi_awareness;
-    reply->class_ptr = get_class_client_ptr( win->class );
+    reply->handle      = win->handle;
+    reply->parent      = win->parent ? win->parent->handle : 0;
+    reply->owner       = win->owner;
+    reply->extra       = win->nb_extra_bytes;
+    reply->dpi         = win->dpi;
+    reply->awareness   = win->dpi_awareness;
+    reply->class_ptr   = get_class_client_ptr( win->class );
+    reply->needs_cloak = win->is_cloaked;
 }
 
 
@@ -2230,8 +2250,9 @@ DECL_HANDLER(set_window_owner)
         }
     }
 
-    reply->prev_owner = win->owner;
-    reply->full_owner = win->owner = owner ? owner->handle : 0;
+    reply->prev_owner  = win->owner;
+    reply->full_owner  = win->owner = owner ? owner->handle : 0;
+    reply->needs_cloak = owner ? owner->is_cloaked : 0;
 }
 
 
@@ -2309,6 +2330,50 @@ DECL_HANDLER(set_window_info)
 }
 
 
+/* set the window's cloaked attribute */
+DECL_HANDLER(set_window_cloaked)
+{
+    struct window *win = get_window( req->handle );
+    unsigned int i, total;
+    user_handle_t *data;
+
+    if (!win) return;
+    if (is_desktop_window( win ))
+    {
+        set_error( STATUS_ACCESS_DENIED );
+        return;
+    }
+    if (!is_desktop_window( win->parent ))
+    {
+        set_error( STATUS_INVALID_HANDLE );
+        return;
+    }
+
+    reply->count = total = get_owned_windows( win, NULL );
+    if (get_reply_max_size() < total * sizeof(user_handle_t))
+    {
+        set_error( STATUS_BUFFER_TOO_SMALL );
+        return;
+    }
+
+    if (total)
+    {
+        if (!(data = set_reply_data_size( total * sizeof(user_handle_t) )))
+        {
+            set_error( STATUS_NO_MEMORY );
+            return;
+        }
+        get_owned_windows( win, data );
+    }
+
+    win->is_cloaked = req->cloaked;
+
+    for (i = 0; i < total; i++)
+        if ((win = get_window( data[i] )))
+            win->is_cloaked = req->cloaked;
+}
+
+
 /* get a list of the window parents, up to the root of the tree */
 DECL_HANDLER(get_window_parents)
 {

-- 
2.35.1

