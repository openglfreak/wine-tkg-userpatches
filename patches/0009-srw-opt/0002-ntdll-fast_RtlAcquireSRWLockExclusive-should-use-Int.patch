From f5ad32e6ebd80e2e8e0b61226c06a6c2736092bf Mon Sep 17 00:00:00 2001
From: Richard Yao <ryao@gentoo.org>
Date: Sun, 5 Jul 2020 18:36:12 -0400
Subject: [PATCH 2/2] ntdll: fast_RtlAcquireSRWLockExclusive should use
 InterlockedExchangeAdd

Under contention, fast_RtlAcquireSRWLockExclusive can use multiple
atomic operations when trying to increment. However, we could just use
InterlockedExchangeAdd and let the hardware deal with it. This should be
slightly faster.

This micro-optimization opportunity was found by Chris Robinson in
\#winehackers on freenode IRC. We iterated on it until we had a patch we
both liked.

Signed-off-by: Richard Yao <ryao@gentoo.org>
Signed-off-by: Chris Robinson <chris.kcat@gmail.com>
---
 dlls/ntdll/unix/sync.c | 9 +++------
 1 file changed, 3 insertions(+), 6 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 4adbe281eae..a2d6b23dc5d 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -1848,12 +1848,9 @@ NTSTATUS CDECL fast_RtlAcquireSRWLockExclusive( RTL_SRWLOCK *lock )
     }
 
     /* Atomically increment the exclusive waiter count. */
-    do
-    {
-        old = *futex;
-        new = old + SRWLOCK_FUTEX_EXCLUSIVE_WAITERS_INC;
-        assert(new & SRWLOCK_FUTEX_EXCLUSIVE_WAITERS_MASK);
-    } while (InterlockedCompareExchange( futex, new, old ) != old);
+    old = InterlockedExchangeAdd( futex, SRWLOCK_FUTEX_EXCLUSIVE_WAITERS_INC );
+    assert((old & SRWLOCK_FUTEX_EXCLUSIVE_WAITERS_MASK)
+           != SRWLOCK_FUTEX_EXCLUSIVE_WAITERS_MASK);
 
     for (;;)
     {
